{"mode":"editor","version":1,"windowDimensions":{"x":533,"y":60,"width":1594,"height":1277,"maximized":false},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/ahmet/Projects/blueskyeducation-co-uk"],"buffers":[{"text":"require 'spec_helper'\n\ndescribe Myblue::ProjectsController do\n\n  before do\n    ActionMailer::Base.deliveries.clear\n  end\n\n  describe '#index' do\n    it 'should fetch a list of projects' do\n      user = login_user\n      project = FactoryGirl.create(:project, user_id: user.id)\n      project_membership = user.memberships.first\n      get :index\n      expect(response.status).to eq(200)\n      expect(assigns(:projects)).to include(project)\n      expect(assigns(:projects_with_memberships)).to include([project, project_membership])\n    end\n\n    it 'should include organisation projects where the current user is a member' do\n      user = login_user\n      organisation = FactoryGirl.create(:organisation)\n      job = FactoryGirl.create(:job, organisation: organisation, user_id: user.id)\n      project = FactoryGirl.create(:project, projectable: organisation)\n      project_membership = user.memberships.first\n      get :index\n      expect(assigns(:projects)).to include(project)\n    end\n\n    it 'should not include organisation projects where the current user is not a member' do\n      user = login_user\n      organisation = FactoryGirl.create(:organisation)\n      project = FactoryGirl.create(:project, projectable: organisation)\n      project_membership = user.memberships.first\n      get :index\n      expect(assigns(:projects)).to_not include(project)\n    end\n\n    it 'should not include organisation projects where the current user is not part of that organisation' do\n      user = login_user\n      federation = FactoryGirl.create(:federation)\n      organisation_a, organisation_b = federation.organisations\n      FactoryGirl.create(:job, organisation: organisation_a, user_id: user.id)\n      job = FactoryGirl.create(:job, organisation: organisation_a)\n      FactoryGirl.create(:job, organisation: organisation_b, user_id: job.user.id)\n      project = FactoryGirl.create(:project, user_id: job.user.id, projectable: organisation_b)\n      get :index\n      expect(assigns(:projects)).to_not include(project)\n    end\n\n    it 'should search by the project title' do\n      user = login_user\n      project = FactoryGirl.create(:project, user_id: user.id, title: 'Spelling Bee')\n      project_membership = user.memberships.first\n      get :index, keywords: 'spelling'\n      expect(assigns(:projects)).to include(project)\n    end\n\n    it 'should search by the project description' do\n      user = login_user\n      project = FactoryGirl.create(:project, user_id: user.id, title: 'A spelling competition.')\n      project_membership = user.memberships.first\n      get :index, keywords: 'competition'\n      expect(assigns(:projects)).to include(project)\n    end\n\n    it 'should search by the project tags' do\n      user = login_user\n      project = FactoryGirl.create(:project, user_id: user.id)\n      project_membership = user.memberships.first\n      tag = ProjectTag.create!(text: 'Academy')\n      project.project_tags << tag\n      get :index, keywords: 'Academy'\n      expect(assigns(:projects)).to include(project)\n    end\n\n    it 'should exclude projects whose titles do not match the search query' do\n      user = login_user\n      project = FactoryGirl.create(:project, user_id: user.id, title: 'Spelling Bee')\n      project_membership = user.memberships.first\n      get :index, keywords: 'something'\n      expect(assigns(:projects)).to_not include(project)\n    end\n\n    it 'should exclude projects whose descriptions do not match the search query' do\n      user = login_user\n      project = FactoryGirl.create(:project, user_id: user.id, description: 'A spelling competition.')\n      project_membership = user.memberships.first\n      get :index, keywords: 'something'\n      expect(assigns(:projects)).to_not include(project)\n    end\n  end\n\n  describe '#update' do\n    it 'should update a project' do\n      user = login_user\n      project = FactoryGirl.create(:project, user: user, title: 'Title')\n      expect do\n        post :update, id: project.id, project: { title: 'New Title' }\n      end.to change { project.reload.title }.from('Title').to('New Title')\n      expect(response.status).to eq(302)\n      expect(response).to redirect_to(action: :show, id: assigns(:project).id)\n    end\n\n    it 'should generate a notification and email when updating the title' do\n      user = login_user\n      organisation = FactoryGirl.create(:organisation)\n      public_user = FactoryGirl.create(:user)\n      FactoryGirl.create(:job, user: user, organisation: organisation)\n      create_project_admin_job(public_user, organisation)\n      project = FactoryGirl.create(:public_project, user: user, title: 'Title')\n      FactoryGirl.create(:approved_project_membership, project: project, user: public_user)\n      post :update, id: project.id, project: { title: 'New Title' }\n      expect(Notification.all.count).to eq(1)\n      expect(ActionMailer::Base.deliveries.size).to eq(1)\n      expect(Notification.last.body.strip).to eq('The myBlue project <a href=\"/myblue/projects/%d\">New Title</a> title has been changed from %s by %s.' % [project.id, project.title, user.fullname])\n    end\n\n    it 'should generate a notification and email when updating the description' do\n      user = login_user\n      organisation = FactoryGirl.create(:organisation)\n      public_user = FactoryGirl.create(:user)\n      FactoryGirl.create(:job, user: user, organisation: organisation)\n      create_project_admin_job(public_user, organisation)\n      project = FactoryGirl.create(:public_project, user: user, description: 'Description')\n      FactoryGirl.create(:approved_project_membership, project: project, user: public_user)\n      post :update, id: project.id, project: { description: 'New Description' }\n      expect(Notification.all.count).to eq(1)\n      expect(ActionMailer::Base.deliveries.size).to eq(1)\n      expect(Notification.last.body.strip).to eq('The myBlue project <a href=\"/myblue/projects/%d\">%s</a> description has been changed to New Description by %s.' % [project.id, project.title, user.fullname])\n    end\n\n    it 'should generate a notification when updating a title and description' do\n      user = login_user\n      organisation = FactoryGirl.create(:organisation)\n      public_user = FactoryGirl.create(:user)\n      FactoryGirl.create(:job, user: user, organisation: organisation)\n      create_project_admin_job(public_user, organisation)\n      project = FactoryGirl.create(:public_project, user: user, title: 'Title', description: 'Description')\n      FactoryGirl.create(:approved_project_membership, project: project, user: public_user)\n      post :update, id: project.id, project: { title: 'New Title', description: 'New Description'}\n      expect(Notification.all.count).to eq(1)\n      expect(ActionMailer::Base.deliveries.size).to eq(1)\n      expect(Notification.last.body.strip).to eq('The myBlue project <a href=\"/myblue/projects/%d\">%s</a> title has been changed to New Title and the description has been changed to New Description by %s.' % [project.id, project.title, user.fullname])\n    end\n\n    it 'should generate a notification and email when updating the project type to invite only' do\n      user = login_user(user_marked_as_private: false)\n      project = FactoryGirl.create(:public_project, user: user, description: 'Description')\n      expect do\n      expect do\n        post :update, id: project.id, project: { visibility_state_event: 'make_invite_only' }\n      end.to change { Notification.count }.by(1)\n      end.to change { ActionMailer::Base.deliveries.size }.by(1)\n      expect(Notification.last.body.strip).to eq('The myBlue project <a href=\"/myblue/projects/%d\">%s</a> has been changed to an invite only project by %s.' % [project.id, project.title, user.fullname])\n    end\n\n    it \"it should be possible to update a project to invite only if it has a member with a public profile\" do\n      login_user\n      user = FactoryGirl.create(:public_user)\n      FactoryGirl.create(:job, user: user, primary: true)\n      project = FactoryGirl.create(:public_project, user: user, description: 'Description')\n      post :update, id: project.id, project: { visibility_state_event: 'make_invite_only' }\n      project.reload\n      expect(project.visibility_state).to eq('invite_only')\n    end\n\n    it \"it shouldn't be possible to update a project to invite only if it has a member with a private profile and a public profile\" do\n      login_user\n      user = FactoryGirl.create(:public_user)\n      FactoryGirl.create(:job, user: user, primary: true)\n      project = FactoryGirl.create(:public_project, user: user, description: 'Description')\n      FactoryGirl.create(:approved_project_membership, project: project, user: FactoryGirl.create(:private_user))\n      expect do\n        post :update, id: project.id, project: { visibility_state_event: 'make_invite_only' }\n      end.to_not change(project, :visibility_state)\n    end\n\n    it 'should generate a notification and email when updating the project type to partnership-only' do\n      user = login_user\n      org, _ = FactoryGirl.create(:federation).organisations\n      FactoryGirl.create(:job, user: user, organisation: org, primary: true)\n      project = FactoryGirl.create(:public_project, user: user, description: 'Description')\n      expect do\n      expect do\n        post :update, id: project.id, project: { visibility_state_event: 'make_partnership_only' }\n      end.to change { Notification.count }.by(1)\n      end.to change { ActionMailer::Base.deliveries.size }.by(1)\n      expect(Notification.last.body.strip).to eq('The myBlue project <a href=\"/myblue/projects/%d\">%s</a> has been changed to a partnership project by %s.' % [project.id, project.title, user.fullname])\n    end\n\n    it 'should update a project with tags' do\n      tag = ProjectTag.create!(text: 'Academy')\n      user = login_user\n      project = FactoryGirl.create(:project, user: user)\n      post :update, id: project.id, project: { tag_ids: tag.id }\n      expect(assigns(:project).project_tags).to include(tag)\n    end\n\n    it 'should update a project with new tags' do\n      user = login_user\n      project = FactoryGirl.create(:project, user: user)\n      expect do\n        post :update, id: project.id, project: { tag_ids: 'Academy' }\n      end.to change { ProjectTag.count }.by(1)\n      expect(assigns(:project).project_tags.collect(&:text)).to include('Academy')\n    end\n\n    it 'should update a project with both new and old tags' do\n      tag = ProjectTag.create!(text: 'Academy')\n      user = login_user\n      project = FactoryGirl.create(:project, user: user)\n      expect do\n        post :update, id: project.id, project: { tag_ids: ['Partnership', tag.id].join(',') }\n      end.to change { ProjectTag.count }.by(1)\n      expect(assigns(:project).project_tags.collect(&:text)).to include('Academy', 'Partnership')\n    end\n  end\n\n  describe '#create' do\n    it 'should create a project' do\n      user = login_user\n      expect do\n        post :create, project: { title: 'Title', description: 'Description', user_id: user.id }\n      end.to change { Project.count }.by(1)\n      expect(response.status).to eq(302)\n      expect(response).to redirect_to(action: :show, id: assigns(:project).id)\n    end\n\n    it 'should create an organisation-only project' do\n      organisation = FactoryGirl.create(:organisation)\n      user = login_user(user_marked_as_private: false)\n      expect do\n        post :create, project: { title: 'Title', description: 'Description', user_id: user.id, visibility_state_event: 'make_organisation_only', projectable_id: organisation.global_id }\n      end.to change { Project.count }.by(1)\n      expect(response.status).to eq(302)\n      expect(response).to redirect_to(action: :show, id: assigns(:project).id)\n      expect(assigns(:project).projectable).to eq(organisation)\n    end\n\n    it 'should create an partnership-only project' do\n      user = login_user(user_marked_as_private: false)\n      federation = FactoryGirl.create(:federation)\n      organisation = federation.organisations.first\n      FactoryGirl.create(:job, organisation: organisation, user: user)\n      expect do\n        post :create, project: { title: 'Title', description: 'Description', user_id: user.id, visibility_state_event: 'make_partnership_only', projectable_id: federation.global_id }\n      end.to change { Project.count }.by(1)\n      expect(response.status).to eq(302)\n      expect(response).to redirect_to(action: :show, id: assigns(:project).id)\n      expect(assigns(:project).projectable).to eq(federation)\n    end\n\n    it 'should not assign a projectable for a public project' do\n      organisation = FactoryGirl.create(:organisation)\n      user = login_user(user_marked_as_private: false)\n      post :create, project: { title: 'Title', description: 'Description', user_id: user.id, visibility_state_event: 'make_public', projectable_id: organisation.global_id }\n      expect(assigns(:project).projectable).to eq(nil)\n    end\n\n    it 'should create a project with tags' do\n      tag = ProjectTag.create!(text: 'Academy')\n      user = login_user\n      post :create, project: { title: 'Title', description: 'Description', user_id: user.id, tag_ids: tag.id }\n      expect(assigns(:project).project_tags).to include(tag)\n    end\n\n    it 'should not create duplicate tags' do\n      tag = ProjectTag.create!(text: 'Academy')\n      user = login_user\n      expect do\n        post :create, project: { title: 'Title', description: 'Description', user_id: user.id, tag_ids: 'Academy' }\n      end.to_not change { ProjectTag.count }\n    end\n\n    it 'should create a project with new tags' do\n      user = login_user\n      expect do\n        post :create, project: { title: 'Title', description: 'Description', user_id: user.id, tag_ids: 'Academy' }\n      end.to change { ProjectTag.count }.by(1)\n      expect(assigns(:project).project_tags.collect(&:text)).to include('Academy')\n    end\n\n    it 'should create a project with both new and old tags' do\n      tag = ProjectTag.create!(text: 'Academy')\n      user = login_user\n      expect do\n        post :create, project: { title: 'Title', description: 'Description', user_id: user.id, tag_ids: ['Partnership', tag.id].join(',') }\n      end.to change { ProjectTag.count }.by(1)\n      expect(assigns(:project).project_tags.collect(&:text)).to include('Academy', 'Partnership')\n    end\n\n    it 'should notify interested users' do\n      tag = ProjectTag.create!(text: 'Academy')\n      user = login_user\n      public_user = FactoryGirl.create(:public_user)\n      public_user.project_tags << tag\n      expect do\n        post :create, project: { title: 'Title', description: 'Description', user_id: user.id, visibility_state_event: 'make_public', tag_ids: tag.id.to_s }\n      end.to change { Notification.count }.by(1)\n      project = Project.last\n      expect(Notification.last.body.strip).to eq('A new myBlue project <a href=\"/myblue/projects/%d\">%s</a> has been created which matches <a href=\"/myblue/notifications\">your interests</a>.' % [project.id, project.title])\n    end\n\n    it 'should only notify interested users once' do\n      school_tag  = ProjectTag.create!(text: 'School')\n      academy_tag = ProjectTag.create!(text: 'Academy')\n      user = login_user\n      public_user = FactoryGirl.create(:public_user)\n      public_user.project_tags = [school_tag, academy_tag]\n      expect do\n        post :create, project: { title: 'Title', description: 'Description', user_id: user.id, visibility_state_event: 'make_public', tag_ids: [school_tag.id.to_s, academy_tag.id.to_s].join(',') }\n      end.to change { Notification.count }.by(1)\n    end\n\n    it 'should notify invited users' do\n      user = login_user\n      public_user = FactoryGirl.create(:public_user)\n      expect do\n        post :create, project: { title: 'Title', description: 'Description', user_id: user.id, visibility_state_event: 'make_public', invited_users: public_user.id.to_s }\n      end.to change { Notification.count }.by(1)\n      project = Project.last\n      expect(Notification.last.body.strip).to eq('%s has invited you to the myBlue project <a href=\"/myblue/projects/%d\">%s</a>.' % [user.fullname, project.id, project.title])\n    end\n\n    it 'should notify admin users' do\n      organisation = FactoryGirl.create(:organisation)\n      user = login_user\n      admin_user = FactoryGirl.create(:user)\n      FactoryGirl.create(:job, organisation: organisation, user: user)\n      admin_job = create_project_admin_job(admin_user, organisation)\n      expect do\n        post :create, project: { title: 'Title', description: 'Description', user_id: user.id, visibility_state_event: 'make_public' }\n      end.to change { Notification.count }.by(1)\n      project = Project.last\n      expect(Notification.last.body.strip).to eq('%s has created a Public myBlue project <a href=\"/myblue/projects/%d\">%s</a>.' % [user.fullname, project.id, project.title])\n    end\n\n    it 'should notify admin users on a partnership project' do\n      user = login_user\n      admin_user = FactoryGirl.create(:user)\n      federation = FactoryGirl.create(:federation)\n      org1, org2 = federation.organisations\n      FactoryGirl.create(:job, organisation: org1, user: user)\n      admin_job = create_project_admin_job(admin_user, org2)\n      expect do\n        post :create, project: { title: 'Title', description: 'Description', user_id: user.id, visibility_state_event: 'make_partnership_only' }\n      end.to change { Notification.count }.by(1)\n      project = Project.last\n      expect(Notification.last.body.strip).to eq('%s has created a Partnership Only myBlue project <a href=\"/myblue/projects/%d\">%s</a>.' % [user.fullname, project.id, project.title])\n    end\n\n    it 'should notify multiple primary users' do\n      user = login_user\n      admin_user1, admin_user2 = FactoryGirl.create(:user), FactoryGirl.create(:user)\n      federation = FactoryGirl.create(:federation)\n      org1, org2 = federation.organisations\n      FactoryGirl.create(:job, organisation: org1, user: user)\n      FactoryGirl.create(:job, organisation: org2, user: admin_user1, primary: true)\n      FactoryGirl.create(:job, organisation: org2, user: admin_user2, primary: true)\n      expect do\n        post :create, project: { title: 'Title', description: 'Description', user_id: user.id, visibility_state_event: 'make_partnership_only' }\n      end.to change { Notification.count }.by(2)\n      expect(Notification.all[-2..-1].collect(&:user)).to include(admin_user1, admin_user2)\n    end\n  end\n\n  describe '#available_visibilities_for_project' do\n    let(:organisation) { FactoryGirl.create(:organisation) }\n\n    it 'should include public, invite only and organisation-only if a user is in the same organisation' do\n      user = login_user(user_marked_as_private: false)\n      public_user_1 = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: false)\n\n      job_1 = FactoryGirl.create(:job, :organisation => organisation, :user => user)\n      job_2 = FactoryGirl.create(:job, :organisation => organisation, :user => public_user_1)\n\n      get :available_visibilities_for_project, members: [public_user_1.id]\n\n      expect(response.status).to eq(200)\n      statuses = JSON.parse(response.body)\n      expect(statuses.size).to eq(3)\n      expect(statuses).to include('make_invite_only', 'make_public', 'make_organisation_only')\n    end\n\n    it 'should include public and invite only if a user is not in the same organisation' do\n      user = login_user(user_marked_as_private: false)\n      org_2 = FactoryGirl.create(:organisation)\n      public_user_1 = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: false)\n\n      job_1 = FactoryGirl.create(:job, :organisation => organisation, :user => user)\n      job_2 = FactoryGirl.create(:job, :organisation => org_2, :user => public_user_1)\n\n      get :available_visibilities_for_project, members: [public_user_1.id]\n\n      expect(response.status).to eq(200)\n      statuses = JSON.parse(response.body)\n      expect(statuses.size).to eq(2)\n      expect(statuses).to include('make_invite_only', 'make_public')\n    end\n\n    it 'should include public, invite only and partnership-only if a user is in the same federation but different organisation' do\n      user = login_user(user_marked_as_private: false)\n      org_1, org_2 = FactoryGirl.create(:federation).organisations\n      public_user_1 = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: false)\n\n      job_1 = FactoryGirl.create(:job, :organisation => org_1, :user => user)\n      job_2 = FactoryGirl.create(:job, :organisation => org_2, :user => public_user_1)\n\n      get :available_visibilities_for_project, members: [public_user_1.id]\n\n      expect(response.status).to eq(200)\n      statuses = JSON.parse(response.body)\n      expect(statuses.size).to eq(3)\n      expect(statuses).to include('make_invite_only', 'make_public', 'make_partnership_only')\n    end\n\n    it 'should include public, invite only, organisation-only and partnership-only if a user is in the same organisation and federation' do\n      user = login_user(user_marked_as_private: false)\n      org_1, org_2 = FactoryGirl.create(:federation).organisations\n      public_user_1 = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: false)\n\n      job_1 = FactoryGirl.create(:job, :organisation => org_1, :user => user)\n      job_2 = FactoryGirl.create(:job, :organisation => org_1, :user => public_user_1)\n\n      get :available_visibilities_for_project, members: [public_user_1.id]\n\n      expect(response.status).to eq(200)\n      statuses = JSON.parse(response.body)\n      expect(statuses.size).to eq(4)\n      expect(statuses).to include('make_invite_only', 'make_public', 'make_organisation_only', 'make_partnership_only')\n    end\n\n    it 'should include invite-only if a user is hidden by organisation but in the same organisation' do\n      user = login_user(user_marked_as_private: false)\n      another_user = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', organisation_marked_as_private: true)\n      job_1 = FactoryGirl.create(:job, :organisation => organisation, :user => user)\n      job_2 = FactoryGirl.create(:job, :organisation => organisation, :user => another_user)\n      get :available_visibilities_for_project, members: [another_user.id]\n      expect(response.status).to eq(200)\n      statuses = JSON.parse(response.body)\n      expect(statuses).to include('make_invite_only')\n    end\n\n    it 'should not include invite-only if a user is hidden by organisation and in a different organisation' do\n      user = login_user(user_marked_as_private: false)\n      org2 = FactoryGirl.create(:organisation)\n      another_user = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', organisation_marked_as_private: true)\n      job_1 = FactoryGirl.create(:job, :organisation => organisation, :user => user)\n      job_2 = FactoryGirl.create(:job, :organisation => org2, :user => another_user)\n      get :available_visibilities_for_project, members: [another_user.id]\n      expect(response.status).to eq(200)\n      statuses = JSON.parse(response.body)\n      expect(statuses).to_not include('make_invite_only')\n    end\n\n    it 'should include invite-only if a user has not hidden their own profile' do\n      user = login_user(user_marked_as_private: false)\n      org2 = FactoryGirl.create(:organisation)\n      another_user = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: false)\n      job_1 = FactoryGirl.create(:job, :organisation => organisation, :user => user)\n      job_2 = FactoryGirl.create(:job, :organisation => org2, :user => another_user)\n      get :available_visibilities_for_project, members: [another_user.id]\n      expect(response.status).to eq(200)\n      statuses = JSON.parse(response.body)\n      expect(statuses).to include('make_invite_only')\n    end\n\n    it 'should not include invite-only if a user has hidden their own profile and is in a different organisation' do\n      user = login_user(user_marked_as_private: false)\n      org2 = FactoryGirl.create(:organisation)\n      another_user = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: true)\n      job_1 = FactoryGirl.create(:job, :organisation => organisation, :user => user)\n      job_2 = FactoryGirl.create(:job, :organisation => org2, :user => another_user)\n      get :available_visibilities_for_project, members: [another_user.id]\n      expect(response.status).to eq(200)\n      statuses = JSON.parse(response.body)\n      expect(statuses).to_not include('make_invite_only')\n    end\n\n    it 'should include invite-only if a user has hidden their own profile and is in the same organisation' do\n      user = login_user(user_marked_as_private: false)\n      another_user = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: true)\n      job_1 = FactoryGirl.create(:job, :organisation => organisation, :user => user)\n      job_2 = FactoryGirl.create(:job, :organisation => organisation, :user => another_user)\n      get :available_visibilities_for_project, members: [another_user.id]\n      expect(response.status).to eq(200)\n      statuses = JSON.parse(response.body)\n      expect(statuses).to include('make_invite_only')\n    end\n  end\n\n  describe '#inviteable_members_for_project' do\n    let(:organisation) { FactoryGirl.create(:organisation) }\n\n    it 'should include users with public profiles in the same organisation' do\n      user = login_user(user_marked_as_private: false)\n      public_user_1 = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: false)\n\n      job_1 = FactoryGirl.create(:job, :organisation => organisation, :user => user)\n      job_2 = FactoryGirl.create(:job, :organisation => organisation, :user => public_user_1)\n\n      get :inviteable_members_for_project, q: 'don'\n\n      expect(response.status).to eq(200)\n      users = JSON.parse(response.body)\n      expect(users.size).to eq(1)\n      expect(users.first['name']).to eq('Don Key (%s)' % organisation.name)\n    end\n\n    it 'should include users with private profiles in the same organisation' do\n      user = login_user(user_marked_as_private: false)\n      public_user_1 = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: true)\n\n      job_1 = FactoryGirl.create(:job, :organisation => organisation, :user => user)\n      job_2 = FactoryGirl.create(:job, :organisation => organisation, :user => public_user_1)\n\n      get :inviteable_members_for_project, q: 'don'\n\n      expect(response.status).to eq(200)\n      users = JSON.parse(response.body)\n      expect(users.size).to eq(1)\n      expect(users.first['name']).to eq('Don Key (%s)' % organisation.name)\n    end\n\n    it 'should include users with public profiles outside the organisation' do\n      user = login_user(user_marked_as_private: false)\n      public_user_1 = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: false)\n\n      job_1 = FactoryGirl.create(:job, :organisation => organisation, :user => user)\n\n      get :inviteable_members_for_project, q: 'don'\n\n      expect(response.status).to eq(200)\n      users = JSON.parse(response.body)\n      expect(users.size).to eq(1)\n      expect(users.first['name']).to eq('Don Key')\n    end\n\n    it 'should not include users with private profiles outside the organisation' do\n      user = login_user(user_marked_as_private: false)\n      public_user_1 = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: true)\n\n      job_1 = FactoryGirl.create(:job, :organisation => organisation, :user => user)\n\n      get :inviteable_members_for_project, q: 'don'\n\n      expect(response.status).to eq(200)\n      users = JSON.parse(response.body)\n      expect(users.size).to eq(0)\n    end\n\n    it 'should not include users with public profiles outside a provided organisation' do\n      user = login_user(user_marked_as_private: false)\n      public_user_1 = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: false)\n\n      job_1 = FactoryGirl.create(:job, :organisation => organisation, :user => user)\n\n      get :inviteable_members_for_project, q: 'don', project: { projectable_id: organisation.global_id }\n\n      expect(response.status).to eq(200)\n      users = JSON.parse(response.body)\n      expect(users.size).to eq(0)\n    end\n\n    it 'should not include federation users outside a provided organisation' do\n      user = login_user(user_marked_as_private: false)\n      public_user_1 = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: false)\n\n      org_1, org_2 = FactoryGirl.create(:federation).organisations\n      job_1 = FactoryGirl.create(:job, :organisation => org_1, :user => user)\n      job_1 = FactoryGirl.create(:job, :organisation => org_2, :user => public_user_1)\n\n      get :inviteable_members_for_project, q: 'don', project: { projectable_id: org_1.global_id }\n\n      expect(response.status).to eq(200)\n      users = JSON.parse(response.body)\n      expect(users.size).to eq(0)\n    end\n\n    it 'should include federation users within a provided federation' do\n      user = login_user(user_marked_as_private: false)\n      public_user_1 = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: false)\n\n      federation = FactoryGirl.create(:federation)\n      org_1, org_2 = federation.organisations\n      FactoryGirl.create(:job, :organisation => org_1, :user => user)\n      FactoryGirl.create(:job, :organisation => org_2, :user => public_user_1)\n\n      get :inviteable_members_for_project, q: 'don', project: { projectable_id: federation.global_id }\n\n      expect(response.status).to eq(200)\n      users = JSON.parse(response.body)\n      expect(users.size).to eq(1)\n      expect(users.first['name']).to eq('Don Key (%s)' % org_2.name)\n    end\n\n    it 'should not provide duplicate results' do\n      user = login_user(user_marked_as_private: false)\n      public_user_1 = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: false)\n\n      federation = FactoryGirl.create(:federation)\n      org_1, org_2 = federation.organisations\n      FactoryGirl.create(:job, :organisation => org_1, :user => user)\n      FactoryGirl.create(:job, :organisation => org_1, :user => public_user_1)\n      FactoryGirl.create(:job, :organisation => org_2, :user => public_user_1)\n\n      get :inviteable_members_for_project, q: 'don', project: { projectable_id: federation.global_id }\n\n      expect(response.status).to eq(200)\n      users = JSON.parse(response.body)\n      expect(users.size).to eq(1)\n      expect(users.first['name']).to eq(public_user_1.full_name_and_organisations)\n    end\n\n    it 'should not provide the current user as a result' do\n      user = login_user(user_marked_as_private: false)\n      get :inviteable_members_for_project, q: user.first_name\n      expect(response.status).to eq(200)\n      users = JSON.parse(response.body)\n      expect(users.size).to eq(0)\n    end\n  end\n\n  describe '#invite_member' do\n    it 'should be possible to invite a user to a project' do\n      user = login_user(user_marked_as_private: false)\n      public_user = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: false)\n      project = FactoryGirl.create(:project, user: user)\n      expect do\n        put :invite_member, id: project.id, users: public_user.id.to_s\n      end.to change { ProjectMembership.count }.by(1)\n    end\n\n    it 'should be possible to invite a user to a project twice' do\n      user = login_user(user_marked_as_private: false)\n      public_user = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: false)\n      project = FactoryGirl.create(:project, user: user)\n      expect do\n        put :invite_member, id: project.id, users: public_user.id.to_s\n        put :invite_member, id: project.id, users: public_user.id.to_s\n      end.to change { ProjectMembership.count }.by(1)\n    end\n\n    it 'should not be possible to invite a user to a mothballed project' do\n      user = login_user(user_marked_as_private: false)\n      public_user = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: false)\n      project = FactoryGirl.create(:project, user: user)\n      project.mothball!\n      expect do\n        put :invite_member, id: project.id, users: public_user.id.to_s\n      end.to change { ProjectMembership.count }.by(0)\n    end\n\n    it 'should not be possible to invite a member to a hidden project' do\n      user = login_user(user_marked_as_private: false)\n      public_user = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: false)\n      project = FactoryGirl.create(:project, user: user, hidden_by_owner: true)\n      expect do\n        put :invite_member, id: project.id, users: public_user.id.to_s\n      end.to change { ProjectMembership.count }.by(0)\n      expect(response.status).to eq(302)\n      expect(response).to redirect_to(myblue_path)\n    end\n\n    it 'generates notifications' do\n      user = login_user(user_marked_as_private: false)\n      public_user = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: false)\n      project = FactoryGirl.create(:project, user: user)\n      expect do\n        put :invite_member, id: project.id, users: public_user.id.to_s\n      end.to change { Notification.count }.by(1)\n      expect(Notification.last.body.strip).to eq('%s has invited you to the myBlue project <a href=\"/myblue/projects/%d\">%s</a>.' % [user.fullname, project.id, project.title])\n    end\n  end\n\n  describe '#destroy' do\n    it 'should be possible to destroy a project' do\n      user = login_user(user_marked_as_private: false)\n      project = FactoryGirl.create(:project, user: user)\n      expect do\n        delete :destroy, id: project.id\n      end.to change { Project.count }.by(-1)\n      expect(response.status).to eq(302)\n      expect(response).to redirect_to(myblue_projects_path)\n    end\n\n    it 'should not be possible to destroy a mothballed project' do\n      user = login_user(user_marked_as_private: false)\n      project = FactoryGirl.create(:project, user: user)\n      project.mothball!\n      expect do\n        delete :destroy, id: project.id\n      end.to_not change { Project.count }\n      expect(response.status).to eq(302)\n      expect(response).to redirect_to(myblue_path)\n    end\n\n    it 'should redirect the user if they visit a project that does not exist' do\n      user = login_user\n      get :show, id: 9999\n      expect(response.status).to eq(302)\n      expect(flash[:error]).to eq('This record could not be found or has been deleted.')\n      expect(response).to redirect_to(myblue_path)\n    end\n  end\n\n  describe '#accept_invite' do\n    it 'should be possible to accept an invite to a project' do\n      user = login_user(user_marked_as_private: false)\n      public_user = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: false)\n      project = FactoryGirl.create(:project, user: public_user)\n      membership = FactoryGirl.create(:invited_project_membership, user: user, project: project)\n      expect do\n        put :accept_invite, id: project.id, membership: membership.id\n      end.to change { membership.reload.state }.from('invited').to('approved')\n      expect(response.status).to eq(302)\n      expect(response).to redirect_to(myblue_project_path(membership.project))\n    end\n\n    it 'should not be possible to accept an invite to a mothballed project' do\n      user = login_user(user_marked_as_private: false)\n      public_user = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: false)\n      project = FactoryGirl.create(:project, user: public_user)\n      project.mothball!\n      membership = FactoryGirl.create(:invited_project_membership, user: user, project: project)\n      expect do\n        put :accept_invite, id: project.id, membership: membership.id\n      end.to_not change { membership.reload.state }\n    end\n  end\n\n  describe '#decline_invite' do\n    it 'should be possible to decline an invite to a project' do\n      user = login_user(user_marked_as_private: false)\n      project = FactoryGirl.create(:project, user: FactoryGirl.create(:public_user))\n      membership = FactoryGirl.create(:invited_project_membership, user: user, project: project)\n      expect do\n        put :decline_invite, id: project.id, membership: membership.id\n      end.to change { membership.reload.state }.from('invited').to('declined')\n    end\n  end\n\n  describe '#share' do\n    it 'should be possible to share a project' do\n      user = login_user(user_marked_as_private: false)\n      public_user = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: false)\n      project = FactoryGirl.create(:project, user: public_user)\n      membership = FactoryGirl.create(:approved_project_membership, user: user, project: project)\n      put :share, id: project.id, users: public_user.id.to_s\n      expect(response.status).to eq(302)\n      expect(response).to redirect_to(myblue_project_path(project))\n    end\n\n    it 'should not be possible to share a mothballed project' do\n      user = login_user(user_marked_as_private: false)\n      public_user = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: false)\n      project = FactoryGirl.create(:project, user: public_user)\n      project.mothball!\n      membership = FactoryGirl.create(:approved_project_membership, user: user, project: project)\n      put :share, id: project.id, users: public_user.id.to_s\n      expect(response.status).to eq(302)\n      expect(response).to redirect_to(myblue_path)\n    end\n\n    it 'should generate notifications' do\n      user = login_user(user_marked_as_private: false)\n      public_user = FactoryGirl.create(:public_user, first_name: 'Don', second_name: 'Key', user_marked_as_private: false)\n      project = FactoryGirl.create(:project, user: public_user)\n      membership = FactoryGirl.create(:approved_project_membership, user: user, project: project)\n      expect do\n        put :share, id: project.id, users: public_user.id.to_s\n      end.to change { Notification.count }.by(1)\n      expect(Notification.last.body.strip).to eq('%s shared the myBlue project <a href=\"/myblue/projects/%d\">%s</a> with you.' % [user.fullname, project.id, project.title])\n    end\n  end\n\n  describe '#bulk_approve_project_members' do\n    it 'should not allow you to bulk approve pending members if only one member' do\n      user = login_user\n      project = FactoryGirl.create(:project, user: user)\n      membership = FactoryGirl.create(:pending_project_membership, user: FactoryGirl.create(:public_user), project: project)\n\n      put :bulk_approve_project_members, id: project.id, membership: [membership.id]\n\n      expect(response.status).to eq(302)\n      expect(response).to redirect_to(myblue_path)\n    end\n\n    it 'should approve pending members' do\n      user = login_user\n      project = FactoryGirl.create(:project, user: user)\n      membership = FactoryGirl.create(:pending_project_membership, user: FactoryGirl.create(:public_user), project: project)\n      membership2 = FactoryGirl.create(:pending_project_membership, user: FactoryGirl.create(:public_user), project: project)\n\n      put :bulk_approve_project_members, id: project.id, membership: [membership.id, membership2.id]\n\n      expect(response.status).to eq(302)\n      expect(response).to redirect_to(myblue_project_path(project))\n      membership.reload\n      expect(membership.state).to eq('approved')\n    end\n\n    it 'should generate notifications' do\n      user = login_user\n      project = FactoryGirl.create(:project, user: user)\n      membership = FactoryGirl.create(:pending_project_membership, user: FactoryGirl.create(:public_user), project: project)\n      membership2 = FactoryGirl.create(:pending_project_membership, user: FactoryGirl.create(:public_user), project: project)\n\n      expect do\n        put :bulk_approve_project_members, id: project.id, membership: [membership.id, membership2.id]\n      end.to change { Notification.count }.by(2)\n      expect(Notification.last.body.strip).to eq('Your membership request for the project <a href=\"/myblue/projects/%d\">%s</a> has been approved.' % [project.id, project.title])\n    end\n  end\n\n  describe '#dashboard' do\n    it 'should work' do\n      user = login_user\n      get :dashboard\n      expect(response.status).to eq(200)\n    end\n\n    it 'should fetch suggested projects' do\n      tag = ProjectTag.create!(text: 'Academy')\n      user = login_user\n      user.project_tags << tag\n      project = FactoryGirl.create(:public_project)\n      project.project_tags << tag\n      get :dashboard\n      expect(assigns(:suggested_projects)).to include(project)\n    end\n\n    it 'should not find suggested projects which are hidden' do\n      tag = ProjectTag.create!(text: 'Academy')\n      user = login_user\n      user.project_tags << tag\n      project = FactoryGirl.create(:public_project, hidden_by_organisation: true)\n      project.project_tags << tag\n      get :dashboard\n      expect(assigns(:suggested_projects)).to_not include(project)\n    end\n\n    it 'should fetch popular projects' do\n      user = login_user\n      project = FactoryGirl.create(:public_project)\n      FactoryGirl.create(:notification, item: project)\n      get :dashboard\n      expect(assigns(:popular_projects)).to include(project)\n    end\n\n    it 'does not consider projects without any activity to be popular' do\n      user = login_user\n      project = FactoryGirl.create(:public_project)\n      get :dashboard\n      expect(assigns(:popular_projects)).to_not include(project)\n    end\n\n    it 'does not consider inactive projects to be popular' do\n      user = login_user\n      project = FactoryGirl.create(:public_project)\n      FactoryGirl.create(:notification, item: project)\n      project.mothball!\n      get :dashboard\n      expect(assigns(:popular_projects)).to_not include(project)\n    end\n\n    it 'does not include projects that the user cannot see' do\n      user = login_user\n      project = FactoryGirl.create(:public_project, hidden_by_organisation: true)\n      FactoryGirl.create(:notification, item: project)\n      get :dashboard\n      expect(assigns(:popular_projects)).to_not include(project)\n    end\n\n    it 'finds notifications for active projects' do\n      user = login_user\n      project = FactoryGirl.create(:public_project)\n      notification = FactoryGirl.create(:notification, item: project, user: user)\n      get :dashboard\n      expect(assigns(:notifications)).to include(notification)\n    end\n\n    it 'does not include hidden project notifications' do\n      user = login_user\n      project = FactoryGirl.create(:public_project, hidden_by_organisation: true)\n      notification = FactoryGirl.create(:notification, item: project, user: user)\n      get :dashboard\n      expect(assigns(:notifications)).to_not include(notification)\n    end\n\n    it 'does not include popular projects that the user is a member of' do\n      user = login_user\n      project = FactoryGirl.create(:public_project)\n      FactoryGirl.create(:project_membership, project: project, user: user)\n      get :dashboard\n      expect(assigns(:popular_projects)).to_not include(project)\n    end\n\n    it 'includes notifications for comments' do\n      user = login_user\n      project = FactoryGirl.create(:public_project)\n      topic = FactoryGirl.create(:project_topic, project: project, membership: project.project_memberships.first)\n      comment = FactoryGirl.create(:project_comment, project: project, membership: project.project_memberships.first, topic: topic)\n      notification = FactoryGirl.create(:notification, item: comment, user: user)\n      get :dashboard\n      expect(assigns(:notifications)).to include(notification)\n    end\n\n    it 'includes notifications for topics' do\n      user = login_user\n      project = FactoryGirl.create(:public_project)\n      topic = FactoryGirl.create(:project_topic, project: project, membership: project.project_memberships.first)\n      notification = FactoryGirl.create(:notification, item: topic, user: user)\n      get :dashboard\n      expect(assigns(:notifications)).to include(notification)\n    end\n\n    it 'includes notifications for memberships' do\n      user = login_user\n      project = FactoryGirl.create(:public_project)\n      notification = FactoryGirl.create(:notification, item: project.project_memberships.first, user: user)\n      get :dashboard\n      expect(assigns(:notifications)).to include(notification)\n    end\n\n    it 'does not suggest projects that the user is a member of' do\n      tag = ProjectTag.create!(text: 'Academy')\n      user = login_user\n      user.project_tags << tag\n      project = FactoryGirl.create(:public_project)\n      project.project_tags << tag\n      FactoryGirl.create(:project_membership, project: project, user: user)\n      get :dashboard\n      expect(assigns(:suggested_projects)).to_not include(project)\n    end\n\n    it 'finds tags on projects that the user can see' do\n      user = login_user\n      project = FactoryGirl.create(:public_project)\n      notification = FactoryGirl.create(:notification, item: project, user: user)\n      tag = ProjectTag.create!(text: 'Academy')\n      project.project_tags << tag\n      get :dashboard\n      expect(assigns(:projects_tags)).to include(tag)\n    end\n  end\n\n  describe '#tags' do\n    it 'finds tags that match a given text' do\n      user = login_user\n      ProjectTag.create!(text: 'Academy')\n      get :tags, q: 'Aca', format: :json\n      expect(assigns(:projects_tags).size).to eq(1)\n    end\n\n    it 'does not find tags that do not match a given text' do\n      user = login_user\n      ProjectTag.create!(text: 'Academy')\n      get :tags, q: 'Acd', format: :json\n      expect(assigns(:projects_tags).size).to eq(0)\n    end\n\n    it 'finds all tags on projects that the user is a member of' do\n      user = login_user\n      tag = ProjectTag.create!(text: 'Academy')\n      project = FactoryGirl.create(:project, user: user)\n      project.project_tags << tag\n      get :tags, format: :json\n      expect(assigns(:projects_tags).size).to eq(1)\n    end\n\n    it 'does not find tags that are not on projects that the user is a member of' do\n      user = login_user\n      ProjectTag.create!(text: 'Academy')\n      get :tags, format: :json\n      expect(assigns(:projects_tags).size).to eq(0)\n    end\n  end\n\n  describe '#confirm_hide_by_user' do\n    it 'should display a confirmation page' do\n      user = login_user\n      project = FactoryGirl.create(:project, user: user)\n      get :confirm_hide_by_owner, id: project.id\n      expect(response.status).to eq(200)\n    end\n  end\n\n  describe '#hide_by_owner' do\n    it 'should hide a project' do\n      user = login_user\n      project = FactoryGirl.create(:project, user: user)\n      expect do\n        put :hide_by_owner, id: project.id\n      end.to change { project.reload.hidden_by_owner }.from(false).to(true)\n      expect(response.status).to eq(302)\n      expect(response).to redirect_to(myblue_project_path(project))\n    end\n\n    it 'should generate notification to all but the owner' do\n      user = login_user\n      project = FactoryGirl.create(:project, user: user)\n      membership = FactoryGirl.create(:approved_project_membership, user: FactoryGirl.create(:user), project: project)\n      expect do\n        put :hide_by_owner, id: project.id\n      end.to change { Notification.count }.by(1)\n      expect(Notification.last.body.strip).to eq('The myBlue project <a href=\"/myblue/projects/%d\">%s</a> has been hidden by %s.' % [project.id, project.title, user.fullname])\n    end\n  end\n\n  describe '#confirm_show_by_owner' do\n    it 'should display a confirmation page' do\n      user = login_user\n      project = FactoryGirl.create(:project, user: user, hidden_by_owner: true)\n      get :confirm_show_by_owner, id: project.id\n      expect(response.status).to eq(200)\n    end\n  end\n\n  describe '#show_by_owner' do\n    it 'should show a project' do\n      user = login_user\n      project = FactoryGirl.create(:project, user: user, hidden_by_owner: true)\n      expect do\n        put :show_by_owner, id: project.id\n      end.to change { project.reload.hidden_by_owner }.from(true).to(false)\n      expect(response.status).to eq(302)\n      expect(response).to redirect_to(myblue_project_path(project))\n    end\n  end\n\n  describe '#mothball' do\n    it 'should mothball a project' do\n      user = login_user\n      project = FactoryGirl.create(:project, user: user)\n      expect do\n        put :mothball, id: project.id\n      end.to change { project.reload.mothballed? }.from(false).to(true)\n      expect(response.status).to eq(302)\n      expect(response).to redirect_to(myblue_project_path(project))\n    end\n\n    it 'should generate notifications for admins and users but not the project owner\n        or the person mothballing the project' do\n      user = login_user\n      project = FactoryGirl.create(:project, user: user)\n      organisation = FactoryGirl.create(:organisation)\n      admin_user = FactoryGirl.create(:user)\n      FactoryGirl.create(:job, organisation: organisation, user: user)\n      create_project_admin_job(admin_user, organisation)\n      expect do\n        put :mothball, id: project.id\n      end.to change { Notification.count }.by(1)\n      notification = Notification.last\n      expect(notification.body.strip).to eq('The myBlue project <a href=\"/myblue/projects/%d\">%s</a> has been mothballed by %s.' % [project.id, project.title, user.fullname])\n      expect(notification.user).to eq(admin_user)\n    end\n  end\n\n  describe '#reactivate' do\n    it 'should reactivate a project' do\n      user = login_user\n      project = FactoryGirl.create(:project, user: user, activity_state: 'mothballed')\n      expect do\n        put :reactivate, id: project.id\n      end.to change { project.reload.mothballed? }.from(true).to(false)\n      expect(response.status).to eq(302)\n      expect(response).to redirect_to(myblue_project_path(project))\n    end\n\n    it 'should generate notifications' do\n      user = login_user\n      project = FactoryGirl.create(:project, user: user, activity_state: 'mothballed')\n      expect do\n        put :reactivate, id: project.id\n      end.to change { Notification.count }.by(1)\n      expect(Notification.last.body.strip).to eq('The myBlue project <a href=\"/myblue/projects/%d\">%s</a> has been un-mothballed by %s.' % [project.id, project.title, user.fullname])\n    end\n\n    it 'should generate notifications for everyone but the person un-mothballing the project' do\n      user = login_user\n      project = FactoryGirl.create(:project, user: user, activity_state: 'mothballed')\n      organisation = FactoryGirl.create(:organisation)\n      admin_user = FactoryGirl.create(:user)\n      FactoryGirl.create(:job, organisation: organisation, user: user)\n      create_project_admin_job(admin_user, organisation)\n      expect do\n        put :reactivate, id: project.id\n      end.to change { Notification.count }.by(1)\n      notification = Notification.last\n      expect(notification.body.strip).to eq('The myBlue project <a href=\"/myblue/projects/%d\">%s</a> has been un-mothballed by %s.' % [project.id, project.title, user.fullname])\n      expect(notification.user).to eq(admin_user)\n    end\n  end\n\n  describe '#show' do\n    it 'should show a project' do\n      user = login_user\n      project = FactoryGirl.create(:public_project)\n      get :show, id: project.id\n      expect(response.status).to eq(200)\n      expect(assigns(:project)).to eq(project)\n    end\n\n    it 'should show an organisation-only project to someone in that organisation' do\n      user = login_user\n      organisation = FactoryGirl.create(:organisation)\n      project = FactoryGirl.create(:organisation_project, projectable: organisation)\n      FactoryGirl.create(:job, user: user, organisation: organisation)\n      get :show, id: project.id\n      expect(response.status).to eq(200)\n    end\n\n    it 'should show a federation-only project to someone in that federation' do\n      user = login_user\n      other_user = FactoryGirl.create(:user)\n      federation = FactoryGirl.create(:federation)\n      org1, org2 = federation.organisations\n      job1 = FactoryGirl.create(:job, user: user, organisation: org1)\n      job2 = FactoryGirl.create(:job, user: other_user, organisation: org1)\n      project = FactoryGirl.create(:partnership_project, user: other_user)\n      get :show, id: project.id\n      expect(response.status).to eq(200)\n    end\n\n    it 'should not show a project hidden by its organisation' do\n      user = login_user\n      project = FactoryGirl.create(:public_project, hidden_by_organisation: true)\n      get :show, id: project.id\n      expect(response.status).to eq(302)\n      expect(flash[:error]).to eq('This project has been hidden.')\n    end\n\n    it 'should not show an organisation-only project to someone not in that organisation' do\n      user = login_user\n      project = FactoryGirl.create(:organisation_project)\n      get :show, id: project.id\n      expect(response.status).to eq(302)\n      expect(flash[:error]).to eq('You cannot view this project.')\n    end\n\n    it 'should not show a project hidden by its owner' do\n      user = login_user\n      project = FactoryGirl.create(:public_project, hidden_by_owner: true)\n      get :show, id: project.id\n      expect(response.status).to eq(302)\n      expect(flash[:error]).to eq('This project has been hidden.')\n    end\n\n    it 'should show an invite only project where the user is a member' do\n      user = login_user\n      project = FactoryGirl.create(:invite_only_project)\n      FactoryGirl.create(:approved_project_membership, user: user, project: project)\n      get :show, id: project.id\n      expect(response.status).to eq(200)\n      expect(assigns(:project)).to eq(project)\n    end\n\n    it 'should not show a project where the user\\'s membership has been deactivated' do\n      user = login_user\n      project = FactoryGirl.create(:invite_only_project)\n      FactoryGirl.create(:project_membership, user: user, project: project, state: 'deactivated')\n      get :show, id: project.id\n      expect(response.status).to eq(302)\n      expect(flash[:error]).to eq('You have been removed from this project.')\n    end\n\n    it 'should not show a project where the user\\'s invitation has been revoked' do\n      user = login_user\n      project = FactoryGirl.create(:invite_only_project)\n      FactoryGirl.create(:project_membership, user: user, project: project, state: 'declined')\n      get :show, id: project.id\n      expect(response.status).to eq(302)\n      expect(flash[:error]).to eq('Your invitation for this project has been revoked.')\n    end\n\n    it 'should mark notifications as read' do\n      user = login_user\n      project = FactoryGirl.create(:public_project)\n      project.generate_notifications(notification_type: :create, email: true, created_by: user.fullname, users_to_notify: [user])\n      expect do\n        get :show, id: project.id\n      end.to change { project.unread_notifications_for(user).count }.by(-1)\n    end\n  end\nend\n","markerStore":{"nextMarkerId":232,"markersById":{"0":{"range":{"start":{"row":178,"column":4},"end":{"row":178,"column":4}},"properties":{"type":"selection","editorId":10,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"3":{"range":{"start":{"row":178,"column":4},"end":{"row":178,"column":4}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":true},"4":{"range":{"start":{"row":3,"column":0},"end":{"row":3,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"5":{"range":{"start":{"row":16,"column":80},"end":{"row":16,"column":91}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"6":{"range":{"start":{"row":19,"column":80},"end":{"row":19,"column":83}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"7":{"range":{"start":{"row":22,"column":6},"end":{"row":22,"column":82}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"8":{"range":{"start":{"row":24,"column":6},"end":{"row":24,"column":49}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"9":{"range":{"start":{"row":29,"column":80},"end":{"row":29,"column":91}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"10":{"range":{"start":{"row":33,"column":6},"end":{"row":33,"column":49}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"11":{"range":{"start":{"row":38,"column":80},"end":{"row":38,"column":108}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"12":{"range":{"start":{"row":44,"column":80},"end":{"row":44,"column":82}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"13":{"range":{"start":{"row":45,"column":80},"end":{"row":45,"column":95}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"14":{"range":{"start":{"row":52,"column":80},"end":{"row":52,"column":85}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"15":{"range":{"start":{"row":53,"column":6},"end":{"row":53,"column":49}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"16":{"range":{"start":{"row":60,"column":80},"end":{"row":60,"column":96}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"17":{"range":{"start":{"row":61,"column":6},"end":{"row":61,"column":49}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"18":{"range":{"start":{"row":69,"column":6},"end":{"row":69,"column":49}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"19":{"range":{"start":{"row":78,"column":80},"end":{"row":78,"column":85}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"20":{"range":{"start":{"row":79,"column":6},"end":{"row":79,"column":49}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"21":{"range":{"start":{"row":84,"column":80},"end":{"row":84,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"22":{"range":{"start":{"row":86,"column":80},"end":{"row":86,"column":102}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"23":{"range":{"start":{"row":87,"column":6},"end":{"row":87,"column":49}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"24":{"range":{"start":{"row":111,"column":80},"end":{"row":111,"column":91}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"25":{"range":{"start":{"row":115,"column":80},"end":{"row":115,"column":197}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"26":{"range":{"start":{"row":118,"column":80},"end":{"row":118,"column":82}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"27":{"range":{"start":{"row":124,"column":80},"end":{"row":124,"column":91}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"28":{"range":{"start":{"row":125,"column":80},"end":{"row":125,"column":91}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"29":{"range":{"start":{"row":129,"column":80},"end":{"row":129,"column":207}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"30":{"range":{"start":{"row":138,"column":80},"end":{"row":138,"column":107}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"31":{"range":{"start":{"row":139,"column":80},"end":{"row":139,"column":91}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"32":{"range":{"start":{"row":140,"column":80},"end":{"row":140,"column":98}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"33":{"range":{"start":{"row":143,"column":80},"end":{"row":143,"column":251}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"34":{"range":{"start":{"row":146,"column":80},"end":{"row":146,"column":98}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"35":{"range":{"start":{"row":148,"column":80},"end":{"row":148,"column":91}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"36":{"range":{"start":{"row":150,"column":6},"end":{"row":150,"column":15}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"37":{"range":{"start":{"row":151,"column":80},"end":{"row":151,"column":93}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"38":{"range":{"start":{"row":154,"column":80},"end":{"row":154,"column":202}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"39":{"range":{"start":{"row":157,"column":7},"end":{"row":157,"column":109}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"40":{"range":{"start":{"row":161,"column":80},"end":{"row":161,"column":91}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"41":{"range":{"start":{"row":162,"column":80},"end":{"row":162,"column":91}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"42":{"range":{"start":{"row":167,"column":80},"end":{"row":167,"column":134}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"43":{"range":{"start":{"row":171,"column":80},"end":{"row":171,"column":91}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"44":{"range":{"start":{"row":172,"column":80},"end":{"row":172,"column":113}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"45":{"range":{"start":{"row":174,"column":80},"end":{"row":174,"column":93}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"46":{"range":{"start":{"row":178,"column":80},"end":{"row":178,"column":103}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"47":{"range":{"start":{"row":182,"column":80},"end":{"row":182,"column":91}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"48":{"range":{"start":{"row":184,"column":6},"end":{"row":184,"column":15}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"49":{"range":{"start":{"row":185,"column":80},"end":{"row":185,"column":98}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"50":{"range":{"start":{"row":188,"column":80},"end":{"row":188,"column":201}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"51":{"range":{"start":{"row":205,"column":80},"end":{"row":205,"column":82}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"52":{"range":{"start":{"row":213,"column":80},"end":{"row":213,"column":93}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"53":{"range":{"start":{"row":215,"column":80},"end":{"row":215,"column":97}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"54":{"range":{"start":{"row":223,"column":80},"end":{"row":223,"column":95}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"55":{"range":{"start":{"row":233,"column":80},"end":{"row":233,"column":185}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"56":{"range":{"start":{"row":246,"column":80},"end":{"row":246,"column":182}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"57":{"range":{"start":{"row":256,"column":80},"end":{"row":256,"column":172}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"58":{"range":{"start":{"row":263,"column":80},"end":{"row":263,"column":110}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"59":{"range":{"start":{"row":268,"column":6},"end":{"row":268,"column":47}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"60":{"range":{"start":{"row":271,"column":80},"end":{"row":271,"column":115}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"61":{"range":{"start":{"row":278,"column":80},"end":{"row":278,"column":115}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"62":{"range":{"start":{"row":280,"column":80},"end":{"row":280,"column":82}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"63":{"range":{"start":{"row":287,"column":80},"end":{"row":287,"column":139}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"64":{"range":{"start":{"row":289,"column":80},"end":{"row":289,"column":97}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"65":{"range":{"start":{"row":298,"column":80},"end":{"row":298,"column":156}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"66":{"range":{"start":{"row":301,"column":80},"end":{"row":301,"column":222}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"67":{"range":{"start":{"row":311,"column":80},"end":{"row":311,"column":196}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"68":{"range":{"start":{"row":319,"column":80},"end":{"row":319,"column":170}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"69":{"range":{"start":{"row":322,"column":80},"end":{"row":322,"column":175}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"70":{"range":{"start":{"row":330,"column":6},"end":{"row":330,"column":68}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"71":{"range":{"start":{"row":332,"column":80},"end":{"row":332,"column":134}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"72":{"range":{"start":{"row":335,"column":80},"end":{"row":335,"column":173}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"73":{"range":{"start":{"row":344,"column":6},"end":{"row":344,"column":60}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"74":{"range":{"start":{"row":346,"column":80},"end":{"row":346,"column":144}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"75":{"range":{"start":{"row":349,"column":80},"end":{"row":349,"column":183}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"76":{"range":{"start":{"row":354,"column":80},"end":{"row":354,"column":85}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"77":{"range":{"start":{"row":358,"column":80},"end":{"row":358,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"78":{"range":{"start":{"row":359,"column":80},"end":{"row":359,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"79":{"range":{"start":{"row":361,"column":80},"end":{"row":361,"column":144}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"80":{"range":{"start":{"row":363,"column":80},"end":{"row":363,"column":91}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"81":{"range":{"start":{"row":370,"column":80},"end":{"row":370,"column":106}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"82":{"range":{"start":{"row":372,"column":80},"end":{"row":372,"column":124}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"83":{"range":{"start":{"row":374,"column":6},"end":{"row":374,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"84":{"range":{"start":{"row":375,"column":6},"end":{"row":375,"column":93}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"85":{"range":{"start":{"row":382,"column":80},"end":{"row":382,"column":94}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"86":{"range":{"start":{"row":385,"column":80},"end":{"row":385,"column":91}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"87":{"range":{"start":{"row":388,"column":80},"end":{"row":388,"column":124}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"88":{"range":{"start":{"row":390,"column":6},"end":{"row":390,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"89":{"range":{"start":{"row":391,"column":6},"end":{"row":391,"column":86}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"90":{"range":{"start":{"row":401,"column":80},"end":{"row":401,"column":130}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"91":{"range":{"start":{"row":404,"column":80},"end":{"row":404,"column":124}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"92":{"range":{"start":{"row":406,"column":6},"end":{"row":406,"column":77}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"93":{"range":{"start":{"row":407,"column":6},"end":{"row":407,"column":86}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"94":{"range":{"start":{"row":414,"column":80},"end":{"row":414,"column":93}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"95":{"range":{"start":{"row":417,"column":80},"end":{"row":417,"column":139}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"96":{"range":{"start":{"row":419,"column":13},"end":{"row":419,"column":66}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"97":{"range":{"start":{"row":420,"column":80},"end":{"row":420,"column":124}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"98":{"range":{"start":{"row":422,"column":6},"end":{"row":422,"column":77}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"99":{"range":{"start":{"row":423,"column":6},"end":{"row":423,"column":86}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"100":{"range":{"start":{"row":430,"column":80},"end":{"row":430,"column":119}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"101":{"range":{"start":{"row":433,"column":80},"end":{"row":433,"column":103}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"102":{"range":{"start":{"row":435,"column":80},"end":{"row":435,"column":130}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"103":{"range":{"start":{"row":436,"column":6},"end":{"row":436,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"104":{"range":{"start":{"row":437,"column":6},"end":{"row":437,"column":92}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"105":{"range":{"start":{"row":444,"column":80},"end":{"row":444,"column":110}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"106":{"range":{"start":{"row":447,"column":80},"end":{"row":447,"column":130}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"107":{"range":{"start":{"row":448,"column":6},"end":{"row":448,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"108":{"range":{"start":{"row":449,"column":6},"end":{"row":449,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"109":{"range":{"start":{"row":456,"column":80},"end":{"row":456,"column":81}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"110":{"range":{"start":{"row":459,"column":80},"end":{"row":459,"column":123}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"111":{"range":{"start":{"row":460,"column":6},"end":{"row":460,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"112":{"range":{"start":{"row":461,"column":6},"end":{"row":461,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"113":{"range":{"start":{"row":468,"column":80},"end":{"row":468,"column":116}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"114":{"range":{"start":{"row":471,"column":80},"end":{"row":471,"column":122}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"115":{"range":{"start":{"row":472,"column":6},"end":{"row":472,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"116":{"range":{"start":{"row":473,"column":6},"end":{"row":473,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"117":{"range":{"start":{"row":480,"column":80},"end":{"row":480,"column":109}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"118":{"range":{"start":{"row":482,"column":80},"end":{"row":482,"column":122}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"119":{"range":{"start":{"row":483,"column":6},"end":{"row":483,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"120":{"range":{"start":{"row":484,"column":6},"end":{"row":484,"column":92}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"121":{"range":{"start":{"row":497,"column":80},"end":{"row":497,"column":124}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"122":{"range":{"start":{"row":499,"column":6},"end":{"row":499,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"123":{"range":{"start":{"row":500,"column":6},"end":{"row":500,"column":93}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"124":{"range":{"start":{"row":507,"column":55},"end":{"row":507,"column":75}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"125":{"range":{"start":{"row":512,"column":80},"end":{"row":512,"column":123}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"126":{"range":{"start":{"row":514,"column":6},"end":{"row":514,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"127":{"range":{"start":{"row":515,"column":6},"end":{"row":515,"column":93}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"128":{"range":{"start":{"row":522,"column":55},"end":{"row":522,"column":75}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"129":{"range":{"start":{"row":527,"column":6},"end":{"row":527,"column":124}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"130":{"range":{"start":{"row":529,"column":6},"end":{"row":529,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"131":{"range":{"start":{"row":539,"column":80},"end":{"row":539,"column":83}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"132":{"range":{"start":{"row":541,"column":6},"end":{"row":541,"column":123}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"133":{"range":{"start":{"row":543,"column":6},"end":{"row":543,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"134":{"range":{"start":{"row":552,"column":80},"end":{"row":552,"column":89}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"135":{"range":{"start":{"row":554,"column":6},"end":{"row":554,"column":124}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"136":{"range":{"start":{"row":556,"column":6},"end":{"row":556,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"137":{"range":{"start":{"row":558,"column":80},"end":{"row":558,"column":104}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"138":{"range":{"start":{"row":567,"column":80},"end":{"row":567,"column":124}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"139":{"range":{"start":{"row":570,"column":6},"end":{"row":570,"column":77}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"140":{"range":{"start":{"row":571,"column":6},"end":{"row":571,"column":86}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"141":{"range":{"start":{"row":573,"column":80},"end":{"row":573,"column":97}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"142":{"range":{"start":{"row":582,"column":80},"end":{"row":582,"column":124}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"143":{"range":{"start":{"row":586,"column":31},"end":{"row":586,"column":69}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"144":{"range":{"start":{"row":587,"column":31},"end":{"row":587,"column":78}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"145":{"range":{"start":{"row":589,"column":80},"end":{"row":589,"column":102}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"146":{"range":{"start":{"row":594,"column":55},"end":{"row":594,"column":68}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"147":{"range":{"start":{"row":599,"column":80},"end":{"row":599,"column":124}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"148":{"range":{"start":{"row":603,"column":31},"end":{"row":603,"column":69}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"149":{"range":{"start":{"row":604,"column":31},"end":{"row":604,"column":78}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"150":{"range":{"start":{"row":605,"column":31},"end":{"row":605,"column":78}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"151":{"range":{"start":{"row":607,"column":80},"end":{"row":607,"column":102}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"152":{"range":{"start":{"row":612,"column":80},"end":{"row":612,"column":82}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"153":{"range":{"start":{"row":627,"column":80},"end":{"row":627,"column":122}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"154":{"range":{"start":{"row":636,"column":80},"end":{"row":636,"column":122}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"155":{"range":{"start":{"row":646,"column":80},"end":{"row":646,"column":122}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"156":{"range":{"start":{"row":656,"column":80},"end":{"row":656,"column":122}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"157":{"range":{"start":{"row":667,"column":80},"end":{"row":667,"column":122}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"158":{"range":{"start":{"row":672,"column":80},"end":{"row":672,"column":175}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"159":{"range":{"start":{"row":699,"column":6},"end":{"row":699,"column":23}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"160":{"range":{"start":{"row":702,"column":80},"end":{"row":702,"column":88}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"161":{"range":{"start":{"row":710,"column":80},"end":{"row":710,"column":122}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"162":{"range":{"start":{"row":712,"column":80},"end":{"row":712,"column":96}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"163":{"range":{"start":{"row":722,"column":80},"end":{"row":722,"column":122}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"164":{"range":{"start":{"row":725,"column":80},"end":{"row":725,"column":96}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"165":{"range":{"start":{"row":735,"column":80},"end":{"row":735,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"166":{"range":{"start":{"row":736,"column":80},"end":{"row":736,"column":96}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"167":{"range":{"start":{"row":746,"column":80},"end":{"row":746,"column":122}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"168":{"range":{"start":{"row":748,"column":6},"end":{"row":748,"column":97}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"169":{"range":{"start":{"row":756,"column":80},"end":{"row":756,"column":122}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"170":{"range":{"start":{"row":759,"column":6},"end":{"row":759,"column":97}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"171":{"range":{"start":{"row":767,"column":80},"end":{"row":767,"column":122}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"172":{"range":{"start":{"row":769,"column":6},"end":{"row":769,"column":97}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"173":{"range":{"start":{"row":773,"column":80},"end":{"row":773,"column":172}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"174":{"range":{"start":{"row":778,"column":80},"end":{"row":778,"column":83}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"175":{"range":{"start":{"row":781,"column":80},"end":{"row":781,"column":124}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"176":{"range":{"start":{"row":783,"column":80},"end":{"row":783,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"177":{"range":{"start":{"row":792,"column":80},"end":{"row":792,"column":124}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"178":{"range":{"start":{"row":793,"column":80},"end":{"row":793,"column":125}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"179":{"range":{"start":{"row":795,"column":80},"end":{"row":795,"column":100}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"180":{"range":{"start":{"row":806,"column":80},"end":{"row":806,"column":124}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"181":{"range":{"start":{"row":807,"column":80},"end":{"row":807,"column":125}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"182":{"range":{"start":{"row":810,"column":80},"end":{"row":810,"column":102}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"183":{"range":{"start":{"row":812,"column":80},"end":{"row":812,"column":177}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"184":{"range":{"start":{"row":818,"column":6},"end":{"row":818,"column":23}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"185":{"range":{"start":{"row":837,"column":80},"end":{"row":837,"column":81}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"186":{"range":{"start":{"row":844,"column":6},"end":{"row":844,"column":23}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"187":{"range":{"start":{"row":852,"column":6},"end":{"row":852,"column":23}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"188":{"range":{"start":{"row":859,"column":6},"end":{"row":859,"column":23}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"189":{"range":{"start":{"row":868,"column":6},"end":{"row":868,"column":23}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"190":{"range":{"start":{"row":869,"column":80},"end":{"row":869,"column":81}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"191":{"range":{"start":{"row":878,"column":80},"end":{"row":878,"column":81}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"192":{"range":{"start":{"row":885,"column":80},"end":{"row":885,"column":81}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"193":{"range":{"start":{"row":886,"column":80},"end":{"row":886,"column":81}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"194":{"range":{"start":{"row":902,"column":80},"end":{"row":902,"column":113}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"195":{"range":{"start":{"row":903,"column":80},"end":{"row":903,"column":131}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"196":{"range":{"start":{"row":904,"column":80},"end":{"row":904,"column":81}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"197":{"range":{"start":{"row":912,"column":80},"end":{"row":912,"column":113}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"198":{"range":{"start":{"row":921,"column":80},"end":{"row":921,"column":107}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"199":{"range":{"start":{"row":940,"column":6},"end":{"row":940,"column":81}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"200":{"range":{"start":{"row":950,"column":6},"end":{"row":950,"column":23}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"201":{"range":{"start":{"row":957,"column":6},"end":{"row":957,"column":23}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"202":{"range":{"start":{"row":972,"column":80},"end":{"row":972,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"203":{"range":{"start":{"row":973,"column":6},"end":{"row":973,"column":23}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"204":{"range":{"start":{"row":1003,"column":6},"end":{"row":1003,"column":118}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"205":{"range":{"start":{"row":1007,"column":80},"end":{"row":1007,"column":175}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"206":{"range":{"start":{"row":1043,"column":80},"end":{"row":1043,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"207":{"range":{"start":{"row":1055,"column":80},"end":{"row":1055,"column":174}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"208":{"range":{"start":{"row":1063,"column":80},"end":{"row":1063,"column":86}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"209":{"range":{"start":{"row":1073,"column":80},"end":{"row":1073,"column":86}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"210":{"range":{"start":{"row":1077,"column":80},"end":{"row":1077,"column":182}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"211":{"range":{"start":{"row":1080,"column":80},"end":{"row":1080,"column":96}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"212":{"range":{"start":{"row":1082,"column":80},"end":{"row":1082,"column":86}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"213":{"range":{"start":{"row":1091,"column":80},"end":{"row":1091,"column":177}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"214":{"range":{"start":{"row":1098,"column":6},"end":{"row":1098,"column":23}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"215":{"range":{"start":{"row":1105,"column":80},"end":{"row":1105,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"216":{"range":{"start":{"row":1108,"column":80},"end":{"row":1108,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"217":{"range":{"start":{"row":1118,"column":12},"end":{"row":1118,"column":43}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"218":{"range":{"start":{"row":1119,"column":6},"end":{"row":1119,"column":69}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"219":{"range":{"start":{"row":1120,"column":6},"end":{"row":1120,"column":75}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"220":{"range":{"start":{"row":1127,"column":6},"end":{"row":1127,"column":23}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"221":{"range":{"start":{"row":1128,"column":80},"end":{"row":1128,"column":81}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"222":{"range":{"start":{"row":1134,"column":80},"end":{"row":1134,"column":92}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"223":{"range":{"start":{"row":1135,"column":6},"end":{"row":1135,"column":23}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"224":{"range":{"start":{"row":1143,"column":6},"end":{"row":1143,"column":23}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"225":{"range":{"start":{"row":1153,"column":80},"end":{"row":1153,"column":84}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"226":{"range":{"start":{"row":1159,"column":80},"end":{"row":1159,"column":87}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"227":{"range":{"start":{"row":1162,"column":80},"end":{"row":1162,"column":97}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"228":{"range":{"start":{"row":1168,"column":80},"end":{"row":1168,"column":83}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"229":{"range":{"start":{"row":1171,"column":80},"end":{"row":1171,"column":94}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"230":{"range":{"start":{"row":1174,"column":80},"end":{"row":1174,"column":87}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"231":{"range":{"start":{"row":1180,"column":80},"end":{"row":1180,"column":129}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/ahmet/Projects/blueskyeducation-co-uk/spec/controllers/myblue/projects_controller_spec.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"f002364a06a96f493c5964b2f36fd8dd9b340f2a","deserializer":"TextBuffer","version":2}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":10,"softTabs":true,"displayBuffer":{"id":11,"softWrapped":false,"scrollTop":2260,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/ahmet/Projects/blueskyeducation-co-uk/spec/controllers/myblue/projects_controller_spec.rb","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/ahmet/Projects/blueskyeducation-co-uk/spec/controllers/myblue/projects_controller_spec.rb","focused":true,"flexScale":1,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-rspec","language-ruby"],"deserializer":"Workspace"},"packageStates":{"symbol-gen":{},"find-and-replace":{"viewState":"","modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false,"wholeWord":false},"projectViewState":"","resultsModelState":{"useRegex":false,"caseSensitive":false},"findHistory":["project_links","link","Add link","@project_file","project_links","Add link","new",".error","mess","key","link","linkks","links","project_files","render 'form","'form'","myblue_project_project_file","project_link","membership","owner","Add link »",":upload","add_link",":upload","can"],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/Users/ahmet/Projects/blueskyeducation-co-uk/spec/controllers/myblue/projects_controller_spec.rb":1434984458470},"keybinding-resolver":{},"tree-view":{"directoryExpansionStates":{"/Users/ahmet/Projects/blueskyeducation-co-uk":{"isExpanded":true,"entries":{"app":{"isExpanded":true,"entries":{"assets":{"isExpanded":false,"entries":{}},"cells":{"isExpanded":false,"entries":{}},"controllers":{"isExpanded":false,"entries":{}},"helpers":{"isExpanded":false,"entries":{}},"mailers":{"isExpanded":false,"entries":{}},"models":{"isExpanded":false,"entries":{}},"uploaders":{"isExpanded":false,"entries":{}},"views":{"isExpanded":false,"entries":{}}}},"config":{"isExpanded":false,"entries":{}},"db":{"isExpanded":false,"entries":{}},"lib":{"isExpanded":false,"entries":{}},"public":{"isExpanded":false,"entries":{}},"spec":{"isExpanded":false,"entries":{}},"test":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/ahmet/Projects/blueskyeducation-co-uk/spec","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":418},"tabs":[{}]}}