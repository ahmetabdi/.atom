(function(global, factory){if(typeof module === "object" && typeof module.exports === "object"){module.exports = global.document?factory(global, true):function(w){if(!w.document){throw new Error("jQuery requires a window with a document");}return factory(w);};}else {factory(global);}})(typeof window !== "undefined"?window:this, function(window, noGlobal){var arr=[];var document=window.document;var slice=arr.slice;var concat=arr.concat;var push=arr.push;var indexOf=arr.indexOf;var class2type={};var toString=class2type.toString;var hasOwn=class2type.hasOwnProperty;var support={};var version="3.0.0-pre a5e1c9b44c971fd7046d9a95bd0810e50840b663", jQuery=(function(_jQuery2){function jQuery(_x, _x2){return _jQuery2.apply(this, arguments);}jQuery.toString = function(){return _jQuery2.toString();};return jQuery;})(function(selector, context){return new jQuery.fn.init(selector, context);}), rtrim=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, rmsPrefix=/^-ms-/, rdashAlpha=/-([\da-z])/gi, fcamelCase=function fcamelCase(all, letter){return letter.toUpperCase();};jQuery.fn = jQuery.prototype = {jquery:version, constructor:jQuery, length:0, toArray:function toArray(){return slice.call(this);}, get:function get(num){return num != null?num < 0?this[num + this.length]:this[num]:slice.call(this);}, pushStack:function pushStack(elems){var ret=jQuery.merge(this.constructor(), elems);ret.prevObject = this;return ret;}, each:function each(callback, args){return jQuery.each(this, callback, args);}, map:function map(callback){return this.pushStack(jQuery.map(this, function(elem, i){return callback.call(elem, i, elem);}));}, slice:(function(_slice){function slice(){return _slice.apply(this, arguments);}slice.toString = function(){return _slice.toString();};return slice;})(function(){return this.pushStack(slice.apply(this, arguments));}), first:function first(){return this.eq(0);}, last:function last(){return this.eq(-1);}, eq:function eq(i){var len=this.length, j=+i + (i < 0?len:0);return this.pushStack(j >= 0 && j < len?[this[j]]:[]);}, end:function end(){return this.prevObject || this.constructor(null);}, push:push, sort:arr.sort, splice:arr.splice};jQuery.extend = jQuery.fn.extend = function(){var options, name, src, copy, copyIsArray, clone, target=arguments[0] || {}, i=1, length=arguments.length, deep=false;if(typeof target === "boolean"){deep = target;target = arguments[i] || {};i++;}if(typeof target !== "object" && !jQuery.isFunction(target)){target = {};}if(i === length){target = this;i--;}for(; i < length; i++) {if((options = arguments[i]) != null){for(name in options) {src = target[name];copy = options[name];if(target === copy){continue;}if(deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))){if(copyIsArray){copyIsArray = false;clone = src && jQuery.isArray(src)?src:[];}else {clone = src && jQuery.isPlainObject(src)?src:{};}target[name] = jQuery.extend(deep, clone, copy);}else if(copy !== undefined){target[name] = copy;}}}}return target;};jQuery.extend({expando:"jQuery" + (version + Math.random()).replace(/\D/g, ""), isReady:true, error:function error(msg){throw new Error(msg);}, noop:function noop(){}, isFunction:function isFunction(obj){return jQuery.type(obj) === "function";}, isArray:Array.isArray, isWindow:function isWindow(obj){return obj != null && obj === obj.window;}, isNumeric:function isNumeric(obj){return !jQuery.isArray(obj) && obj - parseFloat(obj) + 1 >= 0;}, isPlainObject:function isPlainObject(obj){if(jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)){return false;}if(obj.constructor && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")){return false;}return true;}, isEmptyObject:function isEmptyObject(obj){var name;for(name in obj) {return false;}return true;}, type:function type(obj){if(obj == null){return obj + "";}return typeof obj === "object" || typeof obj === "function"?class2type[toString.call(obj)] || "object":typeof obj;}, globalEval:function globalEval(code){var script=document.createElement("script");script.text = code;document.head.appendChild(script).parentNode.removeChild(script);}, camelCase:function camelCase(string){return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);}, nodeName:function nodeName(elem, name){return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();}, each:function each(obj, callback, args){var i=0, length=obj.length, isArray=isArraylike(obj);if(args){if(isArray){for(; i < length; i++) {if(callback.apply(obj[i], args) === false){break;}}}else {for(i in obj) {if(callback.apply(obj[i], args) === false){break;}}}}else {if(isArray){for(; i < length; i++) {if(callback.call(obj[i], i, obj[i]) === false){break;}}}else {for(i in obj) {if(callback.call(obj[i], i, obj[i]) === false){break;}}}}return obj;}, trim:function trim(text){return text == null?"":(text + "").replace(rtrim, "");}, makeArray:function makeArray(arr, results){var ret=results || [];if(arr != null){if(isArraylike(Object(arr))){jQuery.merge(ret, typeof arr === "string"?[arr]:arr);}else {push.call(ret, arr);}}return ret;}, inArray:function inArray(elem, arr, i){return arr == null?-1:indexOf.call(arr, elem, i);}, merge:function merge(first, second){var len=+second.length, j=0, i=first.length;for(; j < len; j++) {first[i++] = second[j];}first.length = i;return first;}, grep:function grep(elems, callback, invert){var callbackInverse, matches=[], i=0, length=elems.length, callbackExpect=!invert;for(; i < length; i++) {callbackInverse = !callback(elems[i], i);if(callbackInverse !== callbackExpect){matches.push(elems[i]);}}return matches;}, map:function map(elems, callback, arg){var value, i=0, length=elems.length, isArray=isArraylike(elems), ret=[];if(isArray){for(; i < length; i++) {value = callback(elems[i], i, arg);if(value != null){ret.push(value);}}}else {for(i in elems) {value = callback(elems[i], i, arg);if(value != null){ret.push(value);}}}return concat.apply([], ret);}, guid:1, proxy:function proxy(fn, context){var tmp, args, proxy;if(typeof context === "string"){tmp = fn[context];context = fn;fn = tmp;}if(!jQuery.isFunction(fn)){return undefined;}args = slice.call(arguments, 2);proxy = function(){return fn.apply(context || this, args.concat(slice.call(arguments)));};proxy.guid = fn.guid = fn.guid || jQuery.guid++;return proxy;}, now:Date.now, support:support});jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name){class2type["[object " + name + "]"] = name.toLowerCase();});function isArraylike(obj){var length=obj.length, type=jQuery.type(obj);if(type === "function" || jQuery.isWindow(obj)){return false;}if(obj.nodeType === 1 && length){return true;}return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;}var Sizzle=(function(window){var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando="sizzle" + 1 * new Date(), preferredDoc=window.document, dirruns=0, done=0, classCache=createCache(), tokenCache=createCache(), compilerCache=createCache(), sortOrder=function sortOrder(a, b){if(a === b){hasDuplicate = true;}return 0;}, MAX_NEGATIVE=1 << 31, hasOwn=({}).hasOwnProperty, arr=[], pop=arr.pop, push_native=arr.push, push=arr.push, slice=arr.slice, indexOf=function indexOf(list, elem){var i=0, len=list.length;for(; i < len; i++) {if(list[i] === elem){return i;}}return -1;}, booleans="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", whitespace="[\\x20\\t\\r\\n\\f]", identifier="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", attributes="\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]", pseudos=":(" + identifier + ")(?:\\((" + "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + ".*" + ")\\)|)", rwhitespace=new RegExp(whitespace + "+", "g"), rtrim=new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"), rcomma=new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators=new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rattributeQuotes=new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"), rpseudo=new RegExp(pseudos), ridentifier=new RegExp("^" + identifier + "$"), matchExpr={ID:new RegExp("^#(" + identifier + ")"), CLASS:new RegExp("^\\.(" + identifier + ")"), TAG:new RegExp("^(" + identifier + "|[*])"), ATTR:new RegExp("^" + attributes), PSEUDO:new RegExp("^" + pseudos), CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"), bool:new RegExp("^(?:" + booleans + ")$", "i"), needsContext:new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")}, rinputs=/^(?:input|select|textarea|button)$/i, rheader=/^h\d$/i, rnative=/^[^{]+\{\s*\[native \w/, rquickExpr=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling=/[+~]/, rescape=/'|\\/g, runescape=new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"), funescape=function funescape(_, escaped, escapedWhitespace){var high="0x" + escaped - 65536;return high !== high || escapedWhitespace?escaped:high < 0?String.fromCharCode(high + 65536):String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);}, unloadHandler=function unloadHandler(){setDocument();};try{push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);arr[preferredDoc.childNodes.length].nodeType;}catch(e) {push = {apply:arr.length?function(target, els){push_native.apply(target, slice.call(els));}:function(target, els){var j=target.length, i=0;while(target[j++] = els[i++]) {}target.length = j - 1;}};}function Sizzle(selector, context, results, seed){var match, elem, m, nodeType, i, groups, old, nid, newContext, newSelector;if((context?context.ownerDocument || context:preferredDoc) !== document){setDocument(context);}context = context || document;results = results || [];if(!selector || typeof selector !== "string"){return results;}if((nodeType = context.nodeType) !== 1 && nodeType !== 9 && nodeType !== 11){return [];}if(documentIsHTML && !seed){if(nodeType !== 11 && (match = rquickExpr.exec(selector))){if(m = match[1]){if(nodeType === 9){elem = context.getElementById(m);if(elem && elem.parentNode){if(elem.id === m){results.push(elem);return results;}}else {return results;}}else {if(context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m){results.push(elem);return results;}}}else if(match[2]){push.apply(results, context.getElementsByTagName(selector));return results;}else if((m = match[3]) && support.getElementsByClassName){push.apply(results, context.getElementsByClassName(m));return results;}}if(support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))){nid = old = expando;newContext = context;newSelector = nodeType !== 1 && selector;if(nodeType === 1 && context.nodeName.toLowerCase() !== "object"){groups = tokenize(selector);if(old = context.getAttribute("id")){nid = old.replace(rescape, "\\$&");}else {context.setAttribute("id", nid);}nid = "[id='" + nid + "'] ";i = groups.length;while(i--) {groups[i] = nid + toSelector(groups[i]);}newContext = rsibling.test(selector) && testContext(context.parentNode) || context;newSelector = groups.join(",");}if(newSelector){try{push.apply(results, newContext.querySelectorAll(newSelector));return results;}catch(qsaError) {}finally {if(!old){context.removeAttribute("id");}}}}}return select(selector.replace(rtrim, "$1"), context, results, seed);}function createCache(){var keys=[];function cache(key, value){if(keys.push(key + " ") > Expr.cacheLength){delete cache[keys.shift()];}return cache[key + " "] = value;}return cache;}function markFunction(fn){fn[expando] = true;return fn;}function assert(fn){var div=document.createElement("div");try{return !!fn(div);}catch(e) {return false;}finally {if(div.parentNode){div.parentNode.removeChild(div);}div = null;}}function addHandle(attrs, handler){var arr=attrs.split("|"), i=attrs.length;while(i--) {Expr.attrHandle[arr[i]] = handler;}}function siblingCheck(a, b){var cur=b && a, diff=cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);if(diff){return diff;}if(cur){while(cur = cur.nextSibling) {if(cur === b){return -1;}}}return a?1:-1;}function createInputPseudo(type){return function(elem){var name=elem.nodeName.toLowerCase();return name === "input" && elem.type === type;};}function createButtonPseudo(type){return function(elem){var name=elem.nodeName.toLowerCase();return (name === "input" || name === "button") && elem.type === type;};}function createPositionalPseudo(fn){return markFunction(function(argument){argument = +argument;return markFunction(function(seed, matches){var j, matchIndexes=fn([], seed.length, argument), i=matchIndexes.length;while(i--) {if(seed[j = matchIndexes[i]]){seed[j] = !(matches[j] = seed[j]);}}});});}function testContext(context){return context && typeof context.getElementsByTagName !== "undefined" && context;}support = Sizzle.support = {};isXML = Sizzle.isXML = function(elem){var documentElement=elem && (elem.ownerDocument || elem).documentElement;return documentElement?documentElement.nodeName !== "HTML":false;};setDocument = Sizzle.setDocument = function(node){var hasCompare, parent, doc=node?node.ownerDocument || node:preferredDoc;if(doc === document || doc.nodeType !== 9 || !doc.documentElement){return document;}document = doc;docElem = doc.documentElement;parent = doc.defaultView;if(parent && parent !== parent.top){if(parent.addEventListener){parent.addEventListener("unload", unloadHandler, false);}else if(parent.attachEvent){parent.attachEvent("onunload", unloadHandler);}}documentIsHTML = !isXML(doc);support.attributes = assert(function(div){div.className = "i";return !div.getAttribute("className");});support.getElementsByTagName = assert(function(div){div.appendChild(doc.createComment(""));return !div.getElementsByTagName("*").length;});support.getElementsByClassName = rnative.test(doc.getElementsByClassName);support.getById = assert(function(div){docElem.appendChild(div).id = expando;return !doc.getElementsByName || !doc.getElementsByName(expando).length;});if(support.getById){Expr.find.ID = function(id, context){if(typeof context.getElementById !== "undefined" && documentIsHTML){var m=context.getElementById(id);return m && m.parentNode?[m]:[];}};Expr.filter.ID = function(id){var attrId=id.replace(runescape, funescape);return function(elem){return elem.getAttribute("id") === attrId;};};}else {delete Expr.find.ID;Expr.filter.ID = function(id){var attrId=id.replace(runescape, funescape);return function(elem){var node=typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");return node && node.value === attrId;};};}Expr.find.TAG = support.getElementsByTagName?function(tag, context){if(typeof context.getElementsByTagName !== "undefined"){return context.getElementsByTagName(tag);}else if(support.qsa){return context.querySelectorAll(tag);}}:function(tag, context){var elem, tmp=[], i=0, results=context.getElementsByTagName(tag);if(tag === "*"){while(elem = results[i++]) {if(elem.nodeType === 1){tmp.push(elem);}}return tmp;}return results;};Expr.find.CLASS = support.getElementsByClassName && function(className, context){if(documentIsHTML){return context.getElementsByClassName(className);}};rbuggyMatches = [];rbuggyQSA = [];if(support.qsa = rnative.test(doc.querySelectorAll)){assert(function(div){docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\f]' msallowcapture=''>" + "<option selected=''></option></select>";if(div.querySelectorAll("[msallowcapture^='']").length){rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");}if(!div.querySelectorAll("[selected]").length){rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");}if(!div.querySelectorAll("[id~=" + expando + "-]").length){rbuggyQSA.push("~=");}if(!div.querySelectorAll(":checked").length){rbuggyQSA.push(":checked");}if(!div.querySelectorAll("a#" + expando + "+*").length){rbuggyQSA.push(".#.+[+~]");}});assert(function(div){var input=doc.createElement("input");input.setAttribute("type", "hidden");div.appendChild(input).setAttribute("name", "D");if(div.querySelectorAll("[name=d]").length){rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");}if(!div.querySelectorAll(":enabled").length){rbuggyQSA.push(":enabled", ":disabled");}div.querySelectorAll("*,:x");rbuggyQSA.push(",.*:");});}if(support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)){assert(function(div){support.disconnectedMatch = matches.call(div, "div");matches.call(div, "[s!='']:x");rbuggyMatches.push("!=", pseudos);});}rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));hasCompare = rnative.test(docElem.compareDocumentPosition);contains = hasCompare || rnative.test(docElem.contains)?function(a, b){var adown=a.nodeType === 9?a.documentElement:a, bup=b && b.parentNode;return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains?adown.contains(bup):a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));}:function(a, b){if(b){while(b = b.parentNode) {if(b === a){return true;}}}return false;};sortOrder = hasCompare?function(a, b){if(a === b){hasDuplicate = true;return 0;}var compare=!a.compareDocumentPosition - !b.compareDocumentPosition;if(compare){return compare;}compare = (a.ownerDocument || a) === (b.ownerDocument || b)?a.compareDocumentPosition(b):1;if(compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare){if(a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)){return -1;}if(b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)){return 1;}return sortInput?indexOf(sortInput, a) - indexOf(sortInput, b):0;}return compare & 4?-1:1;}:function(a, b){if(a === b){hasDuplicate = true;return 0;}var cur, i=0, aup=a.parentNode, bup=b.parentNode, ap=[a], bp=[b];if(!aup || !bup){return a === doc?-1:b === doc?1:aup?-1:bup?1:sortInput?indexOf(sortInput, a) - indexOf(sortInput, b):0;}else if(aup === bup){return siblingCheck(a, b);}cur = a;while(cur = cur.parentNode) {ap.unshift(cur);}cur = b;while(cur = cur.parentNode) {bp.unshift(cur);}while(ap[i] === bp[i]) {i++;}return i?siblingCheck(ap[i], bp[i]):ap[i] === preferredDoc?-1:bp[i] === preferredDoc?1:0;};return doc;};Sizzle.matches = function(expr, elements){return Sizzle(expr, null, null, elements);};Sizzle.matchesSelector = function(elem, expr){if((elem.ownerDocument || elem) !== document){setDocument(elem);}expr = expr.replace(rattributeQuotes, "='$1']");if(support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))){try{var ret=matches.call(elem, expr);if(ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11){return ret;}}catch(e) {}}return Sizzle(expr, document, null, [elem]).length > 0;};Sizzle.contains = function(context, elem){if((context.ownerDocument || context) !== document){setDocument(context);}return contains(context, elem);};Sizzle.attr = function(elem, name){if((elem.ownerDocument || elem) !== document){setDocument(elem);}var fn=Expr.attrHandle[name.toLowerCase()], val=fn && hasOwn.call(Expr.attrHandle, name.toLowerCase())?fn(elem, name, !documentIsHTML):undefined;return val !== undefined?val:support.attributes || !documentIsHTML?elem.getAttribute(name):(val = elem.getAttributeNode(name)) && val.specified?val.value:null;};Sizzle.error = function(msg){throw new Error("Syntax error, unrecognized expression: " + msg);};Sizzle.uniqueSort = function(results){var elem, duplicates=[], j=0, i=0;hasDuplicate = !support.detectDuplicates;sortInput = !support.sortStable && results.slice(0);results.sort(sortOrder);if(hasDuplicate){while(elem = results[i++]) {if(elem === results[i]){j = duplicates.push(i);}}while(j--) {results.splice(duplicates[j], 1);}}sortInput = null;return results;};getText = Sizzle.getText = function(elem){var node, ret="", i=0, nodeType=elem.nodeType;if(!nodeType){while(node = elem[i++]) {ret += getText(node);}}else if(nodeType === 1 || nodeType === 9 || nodeType === 11){if(typeof elem.textContent === "string"){return elem.textContent;}else {for(elem = elem.firstChild; elem; elem = elem.nextSibling) {ret += getText(elem);}}}else if(nodeType === 3 || nodeType === 4){return elem.nodeValue;}return ret;};Expr = Sizzle.selectors = {cacheLength:50, createPseudo:markFunction, match:matchExpr, attrHandle:{}, find:{}, relative:{">":{dir:"parentNode", first:true}, " ":{dir:"parentNode"}, "+":{dir:"previousSibling", first:true}, "~":{dir:"previousSibling"}}, preFilter:{ATTR:function ATTR(match){match[1] = match[1].replace(runescape, funescape);match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);if(match[2] === "~="){match[3] = " " + match[3] + " ";}return match.slice(0, 4);}, CHILD:function CHILD(match){match[1] = match[1].toLowerCase();if(match[1].slice(0, 3) === "nth"){if(!match[3]){Sizzle.error(match[0]);}match[4] = +(match[4]?match[5] + (match[6] || 1):2 * (match[3] === "even" || match[3] === "odd"));match[5] = +(match[7] + match[8] || match[3] === "odd");}else if(match[3]){Sizzle.error(match[0]);}return match;}, PSEUDO:function PSEUDO(match){var excess, unquoted=!match[6] && match[2];if(matchExpr.CHILD.test(match[0])){return null;}if(match[3]){match[2] = match[4] || match[5] || "";}else if(unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)){match[0] = match[0].slice(0, excess);match[2] = unquoted.slice(0, excess);}return match.slice(0, 3);}}, filter:{TAG:function TAG(nodeNameSelector){var nodeName=nodeNameSelector.replace(runescape, funescape).toLowerCase();return nodeNameSelector === "*"?function(){return true;}:function(elem){return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;};}, CLASS:function CLASS(className){var pattern=classCache[className + " "];return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem){return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");});}, ATTR:function ATTR(name, operator, check){return function(elem){var result=Sizzle.attr(elem, name);if(result == null){return operator === "!=";}if(!operator){return true;}result += "";return operator === "="?result === check:operator === "!="?result !== check:operator === "^="?check && result.indexOf(check) === 0:operator === "*="?check && result.indexOf(check) > -1:operator === "$="?check && result.slice(-check.length) === check:operator === "~="?(" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1:operator === "|="?result === check || result.slice(0, check.length + 1) === check + "-":false;};}, CHILD:function CHILD(type, what, argument, first, last){var simple=type.slice(0, 3) !== "nth", forward=type.slice(-4) !== "last", ofType=what === "of-type";return first === 1 && last === 0?function(elem){return !!elem.parentNode;}:function(elem, context, xml){var cache, outerCache, node, diff, nodeIndex, start, dir=simple !== forward?"nextSibling":"previousSibling", parent=elem.parentNode, name=ofType && elem.nodeName.toLowerCase(), useCache=!xml && !ofType;if(parent){if(simple){while(dir) {node = elem;while(node = node[dir]) {if(ofType?node.nodeName.toLowerCase() === name:node.nodeType === 1){return false;}}start = dir = type === "only" && !start && "nextSibling";}return true;}start = [forward?parent.firstChild:parent.lastChild];if(forward && useCache){outerCache = parent[expando] || (parent[expando] = {});cache = outerCache[type] || [];nodeIndex = cache[0] === dirruns && cache[1];diff = cache[0] === dirruns && cache[2];node = nodeIndex && parent.childNodes[nodeIndex];while(node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {if(node.nodeType === 1 && ++diff && node === elem){outerCache[type] = [dirruns, nodeIndex, diff];break;}}}else if(useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns){diff = cache[1];}else {while(node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {if((ofType?node.nodeName.toLowerCase() === name:node.nodeType === 1) && ++diff){if(useCache){(node[expando] || (node[expando] = {}))[type] = [dirruns, diff];}if(node === elem){break;}}}}diff -= last;return diff === first || diff % first === 0 && diff / first >= 0;}};}, PSEUDO:function PSEUDO(pseudo, argument){var args, fn=Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);if(fn[expando]){return fn(argument);}if(fn.length > 1){args = [pseudo, pseudo, "", argument];return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase())?markFunction(function(seed, matches){var idx, matched=fn(seed, argument), i=matched.length;while(i--) {idx = indexOf(seed, matched[i]);seed[idx] = !(matches[idx] = matched[i]);}}):function(elem){return fn(elem, 0, args);};}return fn;}}, pseudos:{not:markFunction(function(selector){var input=[], results=[], matcher=compile(selector.replace(rtrim, "$1"));return matcher[expando]?markFunction(function(seed, matches, context, xml){var elem, unmatched=matcher(seed, null, xml, []), i=seed.length;while(i--) {if(elem = unmatched[i]){seed[i] = !(matches[i] = elem);}}}):function(elem, context, xml){input[0] = elem;matcher(input, null, xml, results);input[0] = null;return !results.pop();};}), has:markFunction(function(selector){return function(elem){return Sizzle(selector, elem).length > 0;};}), contains:markFunction(function(text){text = text.replace(runescape, funescape);return function(elem){return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;};}), lang:markFunction(function(lang){if(!ridentifier.test(lang || "")){Sizzle.error("unsupported lang: " + lang);}lang = lang.replace(runescape, funescape).toLowerCase();return function(elem){var elemLang;do {if(elemLang = documentIsHTML?elem.lang:elem.getAttribute("xml:lang") || elem.getAttribute("lang")){elemLang = elemLang.toLowerCase();return elemLang === lang || elemLang.indexOf(lang + "-") === 0;}}while((elem = elem.parentNode) && elem.nodeType === 1);return false;};}), target:function target(elem){var hash=window.location && window.location.hash;return hash && hash.slice(1) === elem.id;}, root:function root(elem){return elem === docElem;}, focus:function focus(elem){return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);}, enabled:function enabled(elem){return elem.disabled === false;}, disabled:function disabled(elem){return elem.disabled === true;}, checked:function checked(elem){var nodeName=elem.nodeName.toLowerCase();return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;}, selected:function selected(elem){if(elem.parentNode){elem.parentNode.selectedIndex;}return elem.selected === true;}, empty:function empty(elem){for(elem = elem.firstChild; elem; elem = elem.nextSibling) {if(elem.nodeType < 6){return false;}}return true;}, parent:function parent(elem){return !Expr.pseudos.empty(elem);}, header:function header(elem){return rheader.test(elem.nodeName);}, input:function input(elem){return rinputs.test(elem.nodeName);}, button:function button(elem){var name=elem.nodeName.toLowerCase();return name === "input" && elem.type === "button" || name === "button";}, text:function text(elem){var attr;return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");}, first:createPositionalPseudo(function(){return [0];}), last:createPositionalPseudo(function(matchIndexes, length){return [length - 1];}), eq:createPositionalPseudo(function(matchIndexes, length, argument){return [argument < 0?argument + length:argument];}), even:createPositionalPseudo(function(matchIndexes, length){var i=0;for(; i < length; i += 2) {matchIndexes.push(i);}return matchIndexes;}), odd:createPositionalPseudo(function(matchIndexes, length){var i=1;for(; i < length; i += 2) {matchIndexes.push(i);}return matchIndexes;}), lt:createPositionalPseudo(function(matchIndexes, length, argument){var i=argument < 0?argument + length:argument;for(; --i >= 0;) {matchIndexes.push(i);}return matchIndexes;}), gt:createPositionalPseudo(function(matchIndexes, length, argument){var i=argument < 0?argument + length:argument;for(; ++i < length;) {matchIndexes.push(i);}return matchIndexes;})}};Expr.pseudos.nth = Expr.pseudos.eq;for(i in {radio:true, checkbox:true, file:true, password:true, image:true}) {Expr.pseudos[i] = createInputPseudo(i);}for(i in {submit:true, reset:true}) {Expr.pseudos[i] = createButtonPseudo(i);}function setFilters(){}setFilters.prototype = Expr.filters = Expr.pseudos;Expr.setFilters = new setFilters();tokenize = Sizzle.tokenize = function(selector, parseOnly){var matched, match, tokens, type, soFar, groups, preFilters, cached=tokenCache[selector + " "];if(cached){return parseOnly?0:cached.slice(0);}soFar = selector;groups = [];preFilters = Expr.preFilter;while(soFar) {if(!matched || (match = rcomma.exec(soFar))){if(match){soFar = soFar.slice(match[0].length) || soFar;}groups.push(tokens = []);}matched = false;if(match = rcombinators.exec(soFar)){matched = match.shift();tokens.push({value:matched, type:match[0].replace(rtrim, " ")});soFar = soFar.slice(matched.length);}for(type in Expr.filter) {if((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))){matched = match.shift();tokens.push({value:matched, type:type, matches:match});soFar = soFar.slice(matched.length);}}if(!matched){break;}}return parseOnly?soFar.length:soFar?Sizzle.error(selector):tokenCache(selector, groups).slice(0);};function toSelector(tokens){var i=0, len=tokens.length, selector="";for(; i < len; i++) {selector += tokens[i].value;}return selector;}function addCombinator(matcher, combinator, base){var dir=combinator.dir, checkNonElements=base && dir === "parentNode", doneName=done++;return combinator.first?function(elem, context, xml){while(elem = elem[dir]) {if(elem.nodeType === 1 || checkNonElements){return matcher(elem, context, xml);}}}:function(elem, context, xml){var oldCache, outerCache, newCache=[dirruns, doneName];if(xml){while(elem = elem[dir]) {if(elem.nodeType === 1 || checkNonElements){if(matcher(elem, context, xml)){return true;}}}}else {while(elem = elem[dir]) {if(elem.nodeType === 1 || checkNonElements){outerCache = elem[expando] || (elem[expando] = {});if((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName){return newCache[2] = oldCache[2];}else {outerCache[dir] = newCache;if(newCache[2] = matcher(elem, context, xml)){return true;}}}}}};}function elementMatcher(matchers){return matchers.length > 1?function(elem, context, xml){var i=matchers.length;while(i--) {if(!matchers[i](elem, context, xml)){return false;}}return true;}:matchers[0];}function multipleContexts(selector, contexts, results){var i=0, len=contexts.length;for(; i < len; i++) {Sizzle(selector, contexts[i], results);}return results;}function condense(unmatched, map, filter, context, xml){var elem, newUnmatched=[], i=0, len=unmatched.length, mapped=map != null;for(; i < len; i++) {if(elem = unmatched[i]){if(!filter || filter(elem, context, xml)){newUnmatched.push(elem);if(mapped){map.push(i);}}}}return newUnmatched;}function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector){if(postFilter && !postFilter[expando]){postFilter = setMatcher(postFilter);}if(postFinder && !postFinder[expando]){postFinder = setMatcher(postFinder, postSelector);}return markFunction(function(seed, results, context, xml){var temp, i, elem, preMap=[], postMap=[], preexisting=results.length, elems=seed || multipleContexts(selector || "*", context.nodeType?[context]:context, []), matcherIn=preFilter && (seed || !selector)?condense(elems, preMap, preFilter, context, xml):elems, matcherOut=matcher?postFinder || (seed?preFilter:preexisting || postFilter)?[]:results:matcherIn;if(matcher){matcher(matcherIn, matcherOut, context, xml);}if(postFilter){temp = condense(matcherOut, postMap);postFilter(temp, [], context, xml);i = temp.length;while(i--) {if(elem = temp[i]){matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);}}}if(seed){if(postFinder || preFilter){if(postFinder){temp = [];i = matcherOut.length;while(i--) {if(elem = matcherOut[i]){temp.push(matcherIn[i] = elem);}}postFinder(null, matcherOut = [], temp, xml);}i = matcherOut.length;while(i--) {if((elem = matcherOut[i]) && (temp = postFinder?indexOf(seed, elem):preMap[i]) > -1){seed[temp] = !(results[temp] = elem);}}}}else {matcherOut = condense(matcherOut === results?matcherOut.splice(preexisting, matcherOut.length):matcherOut);if(postFinder){postFinder(null, results, matcherOut, xml);}else {push.apply(results, matcherOut);}}});}function matcherFromTokens(tokens){var checkContext, matcher, j, len=tokens.length, leadingRelative=Expr.relative[tokens[0].type], implicitRelative=leadingRelative || Expr.relative[" "], i=leadingRelative?1:0, matchContext=addCombinator(function(elem){return elem === checkContext;}, implicitRelative, true), matchAnyContext=addCombinator(function(elem){return indexOf(checkContext, elem) > -1;}, implicitRelative, true), matchers=[function(elem, context, xml){var ret=!leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType?matchContext(elem, context, xml):matchAnyContext(elem, context, xml));checkContext = null;return ret;}];for(; i < len; i++) {if(matcher = Expr.relative[tokens[i].type]){matchers = [addCombinator(elementMatcher(matchers), matcher)];}else {matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);if(matcher[expando]){j = ++i;for(; j < len; j++) {if(Expr.relative[tokens[j].type]){break;}}return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({value:tokens[i - 2].type === " "?"*":""})).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));}matchers.push(matcher);}}return elementMatcher(matchers);}function matcherFromGroupMatchers(elementMatchers, setMatchers){var bySet=setMatchers.length > 0, byElement=elementMatchers.length > 0, superMatcher=function superMatcher(seed, context, xml, results, outermost){var elem, j, matcher, matchedCount=0, i="0", unmatched=seed && [], setMatched=[], contextBackup=outermostContext, elems=seed || byElement && Expr.find.TAG("*", outermost), dirrunsUnique=dirruns += contextBackup == null?1:Math.random() || 0.1, len=elems.length;if(outermost){outermostContext = context !== document && context;}for(; i !== len && (elem = elems[i]) != null; i++) {if(byElement && elem){j = 0;while(matcher = elementMatchers[j++]) {if(matcher(elem, context, xml)){results.push(elem);break;}}if(outermost){dirruns = dirrunsUnique;}}if(bySet){if(elem = !matcher && elem){matchedCount--;}if(seed){unmatched.push(elem);}}}matchedCount += i;if(bySet && i !== matchedCount){j = 0;while(matcher = setMatchers[j++]) {matcher(unmatched, setMatched, context, xml);}if(seed){if(matchedCount > 0){while(i--) {if(!(unmatched[i] || setMatched[i])){setMatched[i] = pop.call(results);}}}setMatched = condense(setMatched);}push.apply(results, setMatched);if(outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1){Sizzle.uniqueSort(results);}}if(outermost){dirruns = dirrunsUnique;outermostContext = contextBackup;}return unmatched;};return bySet?markFunction(superMatcher):superMatcher;}compile = Sizzle.compile = function(selector, match){var i, setMatchers=[], elementMatchers=[], cached=compilerCache[selector + " "];if(!cached){if(!match){match = tokenize(selector);}i = match.length;while(i--) {cached = matcherFromTokens(match[i]);if(cached[expando]){setMatchers.push(cached);}else {elementMatchers.push(cached);}}cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));cached.selector = selector;}return cached;};select = Sizzle.select = function(selector, context, results, seed){var i, tokens, token, type, find, compiled=typeof selector === "function" && selector, match=!seed && tokenize(selector = compiled.selector || selector);results = results || [];if(match.length === 1){tokens = match[0] = match[0].slice(0);if(tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]){context = (Expr.find.ID(token.matches[0].replace(runescape, funescape), context) || [])[0];if(!context){return results;}else if(compiled){context = context.parentNode;}selector = selector.slice(tokens.shift().value.length);}i = matchExpr.needsContext.test(selector)?0:tokens.length;while(i--) {token = tokens[i];if(Expr.relative[type = token.type]){break;}if(find = Expr.find[type]){if(seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)){tokens.splice(i, 1);selector = seed.length && toSelector(tokens);if(!selector){push.apply(results, seed);return results;}break;}}}}(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);return results;};support.sortStable = expando.split("").sort(sortOrder).join("") === expando;support.detectDuplicates = !!hasDuplicate;setDocument();support.sortDetached = assert(function(div1){return div1.compareDocumentPosition(document.createElement("div")) & 1;});if(!assert(function(div){div.innerHTML = "<a href='#'></a>";return div.firstChild.getAttribute("href") === "#";})){addHandle("type|href|height|width", function(elem, name, isXML){if(!isXML){return elem.getAttribute(name, name.toLowerCase() === "type"?1:2);}});}if(!support.attributes || !assert(function(div){div.innerHTML = "<input/>";div.firstChild.setAttribute("value", "");return div.firstChild.getAttribute("value") === "";})){addHandle("value", function(elem, name, isXML){if(!isXML && elem.nodeName.toLowerCase() === "input"){return elem.defaultValue;}});}if(!assert(function(div){return div.getAttribute("disabled") == null;})){addHandle(booleans, function(elem, name, isXML){var val;if(!isXML){return elem[name] === true?name.toLowerCase():(val = elem.getAttributeNode(name)) && val.specified?val.value:null;}});}return Sizzle;})(window);jQuery.find = Sizzle;jQuery.expr = Sizzle.selectors;jQuery.expr[":"] = jQuery.expr.pseudos;jQuery.unique = Sizzle.uniqueSort;jQuery.text = Sizzle.getText;jQuery.isXMLDoc = Sizzle.isXML;jQuery.contains = Sizzle.contains;var rneedsContext=jQuery.expr.match.needsContext;var rsingleTag=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;var risSimple=/^.[^:#\[\.,]*$/;function winnow(elements, qualifier, not){if(jQuery.isFunction(qualifier)){return jQuery.grep(elements, function(elem, i){return !!qualifier.call(elem, i, elem) !== not;});}if(qualifier.nodeType){return jQuery.grep(elements, function(elem){return elem === qualifier !== not;});}if(typeof qualifier === "string"){if(risSimple.test(qualifier)){return jQuery.filter(qualifier, elements, not);}qualifier = jQuery.filter(qualifier, elements);}return jQuery.grep(elements, function(elem){return indexOf.call(qualifier, elem) > -1 !== not;});}jQuery.filter = function(expr, elems, not){var elem=elems[0];if(not){expr = ":not(" + expr + ")";}return elems.length === 1 && elem.nodeType === 1?jQuery.find.matchesSelector(elem, expr)?[elem]:[]:jQuery.find.matches(expr, jQuery.grep(elems, function(elem){return elem.nodeType === 1;}));};jQuery.fn.extend({find:function find(selector){var i, len=this.length, ret=[], self=this;if(typeof selector !== "string"){return this.pushStack(jQuery(selector).filter(function(){for(i = 0; i < len; i++) {if(jQuery.contains(self[i], this)){return true;}}}));}for(i = 0; i < len; i++) {jQuery.find(selector, self[i], ret);}return this.pushStack(len > 1?jQuery.unique(ret):ret);}, filter:function filter(selector){return this.pushStack(winnow(this, selector || [], false));}, not:function not(selector){return this.pushStack(winnow(this, selector || [], true));}, is:function is(selector){return !!winnow(this, typeof selector === "string" && rneedsContext.test(selector)?jQuery(selector):selector || [], false).length;}});var rootjQuery, rquickExpr=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init=jQuery.fn.init = function(selector, context){var match, elem;if(!selector){return this;}if(typeof selector === "string"){if(selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3){match = [null, selector, null];}else {match = rquickExpr.exec(selector);}if(match && (match[1] || !context)){if(match[1]){context = context instanceof jQuery?context[0]:context;jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType?context.ownerDocument || context:document, true));if(rsingleTag.test(match[1]) && jQuery.isPlainObject(context)){for(match in context) {if(jQuery.isFunction(this[match])){this[match](context[match]);}else {this.attr(match, context[match]);}}}return this;}else {elem = document.getElementById(match[2]);if(elem){this[0] = elem;this.length = 1;}return this;}}else if(!context || context.jquery){return (context || rootjQuery).find(selector);}else {return this.constructor(context).find(selector);}}else if(selector.nodeType){this[0] = selector;this.length = 1;return this;}else if(jQuery.isFunction(selector)){return rootjQuery.ready !== undefined?rootjQuery.ready(selector):selector(jQuery);}return jQuery.makeArray(selector, this);};init.prototype = jQuery.fn;rootjQuery = jQuery(document);var rparentsprev=/^(?:parents|prev(?:Until|All))/, guaranteedUnique={children:true, contents:true, next:true, prev:true};jQuery.extend({dir:(function(_dir){function dir(_x3, _x4, _x5){return _dir.apply(this, arguments);}dir.toString = function(){return _dir.toString();};return dir;})(function(elem, dir, until){var matched=[], truncate=until !== undefined;while((elem = elem[dir]) && elem.nodeType !== 9) {if(elem.nodeType === 1){if(truncate && jQuery(elem).is(until)){break;}matched.push(elem);}}return matched;}), sibling:function sibling(n, elem){var matched=[];for(; n; n = n.nextSibling) {if(n.nodeType === 1 && n !== elem){matched.push(n);}}return matched;}});jQuery.fn.extend({has:function has(target){var targets=jQuery(target, this), l=targets.length;return this.filter(function(){var i=0;for(; i < l; i++) {if(jQuery.contains(this, targets[i])){return true;}}});}, closest:function closest(selectors, context){var cur, i=0, l=this.length, matched=[], pos=rneedsContext.test(selectors) || typeof selectors !== "string"?jQuery(selectors, context || this.context):0;for(; i < l; i++) {for(cur = this[i]; cur && cur !== context; cur = cur.parentNode) {if(cur.nodeType < 11 && (pos?pos.index(cur) > -1:cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))){matched.push(cur);break;}}}return this.pushStack(matched.length > 1?jQuery.unique(matched):matched);}, index:function index(elem){if(!elem){return this[0] && this[0].parentNode?this.first().prevAll().length:-1;}if(typeof elem === "string"){return indexOf.call(jQuery(elem), this[0]);}return indexOf.call(this, elem.jquery?elem[0]:elem);}, add:function add(selector, context){return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));}, addBack:function addBack(selector){return this.add(selector == null?this.prevObject:this.prevObject.filter(selector));}});function sibling(cur, dir){while((cur = cur[dir]) && cur.nodeType !== 1) {}return cur;}jQuery.each({parent:function parent(elem){var parent=elem.parentNode;return parent && parent.nodeType !== 11?parent:null;}, parents:function parents(elem){return jQuery.dir(elem, "parentNode");}, parentsUntil:function parentsUntil(elem, i, until){return jQuery.dir(elem, "parentNode", until);}, next:function next(elem){return sibling(elem, "nextSibling");}, prev:function prev(elem){return sibling(elem, "previousSibling");}, nextAll:function nextAll(elem){return jQuery.dir(elem, "nextSibling");}, prevAll:function prevAll(elem){return jQuery.dir(elem, "previousSibling");}, nextUntil:function nextUntil(elem, i, until){return jQuery.dir(elem, "nextSibling", until);}, prevUntil:function prevUntil(elem, i, until){return jQuery.dir(elem, "previousSibling", until);}, siblings:function siblings(elem){return jQuery.sibling((elem.parentNode || {}).firstChild, elem);}, children:function children(elem){return jQuery.sibling(elem.firstChild);}, contents:function contents(elem){return elem.contentDocument || jQuery.merge([], elem.childNodes);}}, function(name, fn){jQuery.fn[name] = function(until, selector){var matched=jQuery.map(this, fn, until);if(name.slice(-5) !== "Until"){selector = until;}if(selector && typeof selector === "string"){matched = jQuery.filter(selector, matched);}if(this.length > 1){if(!guaranteedUnique[name]){jQuery.unique(matched);}if(rparentsprev.test(name)){matched.reverse();}}return this.pushStack(matched);};});var rnotwhite=/\S+/g;function createOptions(options){var object={};jQuery.each(options.match(rnotwhite) || [], function(_, flag){object[flag] = true;});return object;}jQuery.Callbacks = function(options){options = typeof options === "string"?createOptions(options):jQuery.extend({}, options);var firing, memory, fired, locked, list=[], queue=[], firingIndex=-1, fire=function fire(){locked = options.once;fired = firing = true;for(; queue.length; firingIndex = -1) {memory = queue.shift();while(++firingIndex < list.length) {if(list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse){firingIndex = list.length;memory = false;}}}if(!options.memory){memory = false;}firing = false;if(locked){if(memory){list = [];}else {list = "";}}}, self={add:function add(){if(list){if(memory && !firing){firingIndex = list.length - 1;queue.push(memory);}(function add(args){jQuery.each(args, function(_, arg){if(jQuery.isFunction(arg)){if(!options.unique || !self.has(arg)){list.push(arg);}}else if(arg && arg.length && jQuery.type(arg) !== "string"){add(arg);}});})(arguments);if(memory && !firing){fire();}}return this;}, remove:function remove(){jQuery.each(arguments, function(_, arg){var index;while((index = jQuery.inArray(arg, list, index)) > -1) {list.splice(index, 1);if(index <= firingIndex){firingIndex--;}}});return this;}, has:function has(fn){return fn?jQuery.inArray(fn, list) > -1:list.length > 0;}, empty:function empty(){if(list){list = [];}return this;}, disable:function disable(){locked = queue = [];list = memory = "";return this;}, disabled:function disabled(){return !list;}, lock:function lock(){locked = queue = [];if(!memory && !firing){list = memory = "";}return this;}, locked:(function(_locked){function locked(){return _locked.apply(this, arguments);}locked.toString = function(){return _locked.toString();};return locked;})(function(){return !!locked;}), fireWith:function fireWith(context, args){if(!locked){args = args || [];args = [context, args.slice?args.slice():args];queue.push(args);if(!firing){fire();}}return this;}, fire:function fire(){self.fireWith(this, arguments);return this;}, fired:(function(_fired){function fired(){return _fired.apply(this, arguments);}fired.toString = function(){return _fired.toString();};return fired;})(function(){return !!fired;})};return self;};jQuery.extend({Deferred:function Deferred(func){var tuples=[["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]], state="pending", promise={state:(function(_state){function state(){return _state.apply(this, arguments);}state.toString = function(){return _state.toString();};return state;})(function(){return state;}), always:function always(){deferred.done(arguments).fail(arguments);return this;}, then:function then(){var fns=arguments;return jQuery.Deferred(function(newDefer){jQuery.each(tuples, function(i, tuple){var fn=jQuery.isFunction(fns[i]) && fns[i];deferred[tuple[1]](function(){var returned=fn && fn.apply(this, arguments);if(returned && jQuery.isFunction(returned.promise)){returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);}else {newDefer[tuple[0] + "With"](this === promise?newDefer.promise():this, fn?[returned]:arguments);}});});fns = null;}).promise();}, promise:(function(_promise){function promise(_x6){return _promise.apply(this, arguments);}promise.toString = function(){return _promise.toString();};return promise;})(function(obj){return obj != null?jQuery.extend(obj, promise):promise;})}, deferred={};promise.pipe = promise.then;jQuery.each(tuples, function(i, tuple){var list=tuple[2], stateString=tuple[3];promise[tuple[1]] = list.add;if(stateString){list.add(function(){state = stateString;}, tuples[i ^ 1][2].disable, tuples[2][2].lock);}deferred[tuple[0]] = function(){deferred[tuple[0] + "With"](this === deferred?promise:this, arguments);return this;};deferred[tuple[0] + "With"] = list.fireWith;});promise.promise(deferred);if(func){func.call(deferred, deferred);}return deferred;}, when:function when(subordinate){var i=0, resolveValues=slice.call(arguments), length=resolveValues.length, remaining=length !== 1 || subordinate && jQuery.isFunction(subordinate.promise)?length:0, deferred=remaining === 1?subordinate:jQuery.Deferred(), updateFunc=function updateFunc(i, contexts, values){return function(value){contexts[i] = this;values[i] = arguments.length > 1?slice.call(arguments):value;if(values === progressValues){deferred.notifyWith(contexts, values);}else if(! --remaining){deferred.resolveWith(contexts, values);}};}, progressValues, progressContexts, resolveContexts;if(length > 1){progressValues = new Array(length);progressContexts = new Array(length);resolveContexts = new Array(length);for(; i < length; i++) {if(resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)){resolveValues[i].promise().progress(updateFunc(i, progressContexts, progressValues)).done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject);}else {--remaining;}}}if(!remaining){deferred.resolveWith(resolveContexts, resolveValues);}return deferred.promise();}});var readyList;jQuery.fn.ready = function(fn){jQuery.ready.promise().done(fn);return this;};jQuery.extend({isReady:false, readyWait:1, holdReady:function holdReady(hold){if(hold){jQuery.readyWait++;}else {jQuery.ready(true);}}, ready:function ready(wait){if(wait === true?--jQuery.readyWait:jQuery.isReady){return;}jQuery.isReady = true;if(wait !== true && --jQuery.readyWait > 0){return;}readyList.resolveWith(document, [jQuery]);if(jQuery.fn.triggerHandler){jQuery(document).triggerHandler("ready");jQuery(document).off("ready");}}});function completed(){document.removeEventListener("DOMContentLoaded", completed, false);window.removeEventListener("load", completed, false);jQuery.ready();}jQuery.ready.promise = function(obj){if(!readyList){readyList = jQuery.Deferred();if(document.readyState === "complete"){setTimeout(jQuery.ready);}else {document.addEventListener("DOMContentLoaded", completed, false);window.addEventListener("load", completed, false);}}return readyList.promise(obj);};jQuery.ready.promise();var access=jQuery.access = function(elems, fn, key, value, chainable, emptyGet, raw){var i=0, len=elems.length, bulk=key == null;if(jQuery.type(key) === "object"){chainable = true;for(i in key) {access(elems, fn, i, key[i], true, emptyGet, raw);}}else if(value !== undefined){chainable = true;if(!jQuery.isFunction(value)){raw = true;}if(bulk){if(raw){fn.call(elems, value);fn = null;}else {bulk = fn;fn = function(elem, key, value){return bulk.call(jQuery(elem), value);};}}if(fn){for(; i < len; i++) {fn(elems[i], key, raw?value:value.call(elems[i], i, fn(elems[i], key)));}}}return chainable?elems:bulk?fn.call(elems):len?fn(elems[0], key):emptyGet;};jQuery.acceptData = function(owner){return owner.nodeType === 1 || owner.nodeType === 9 || ! +owner.nodeType;};function Data(){Object.defineProperty(this.cache = {}, 0, {get:function get(){return {};}});this.expando = jQuery.expando + Data.uid++;}Data.uid = 1;Data.accepts = jQuery.acceptData;Data.prototype = {key:function key(owner){if(!Data.accepts(owner)){return 0;}var descriptor={}, unlock=owner[this.expando];if(!unlock){unlock = Data.uid++;try{descriptor[this.expando] = {value:unlock};Object.defineProperties(owner, descriptor);}catch(e) {descriptor[this.expando] = unlock;jQuery.extend(owner, descriptor);}}if(!this.cache[unlock]){this.cache[unlock] = {};}return unlock;}, set:function set(owner, data, value){var prop, unlock=this.key(owner), cache=this.cache[unlock];if(typeof data === "string"){cache[data] = value;}else {if(jQuery.isEmptyObject(cache)){jQuery.extend(this.cache[unlock], data);}else {for(prop in data) {cache[prop] = data[prop];}}}return cache;}, get:function get(owner, key){var cache=this.cache[this.key(owner)];return key === undefined?cache:cache[key];}, access:function access(owner, key, value){var stored;if(key === undefined || key && typeof key === "string" && value === undefined){stored = this.get(owner, key);return stored !== undefined?stored:this.get(owner, jQuery.camelCase(key));}this.set(owner, key, value);return value !== undefined?value:key;}, remove:function remove(owner, key){var i, name, camel, unlock=this.key(owner), cache=this.cache[unlock];if(key === undefined){this.cache[unlock] = {};}else {if(jQuery.isArray(key)){name = key.concat(key.map(jQuery.camelCase));}else {camel = jQuery.camelCase(key);if(key in cache){name = [key, camel];}else {name = camel;name = name in cache?[name]:name.match(rnotwhite) || [];}}i = name.length;while(i--) {delete cache[name[i]];}}}, hasData:function hasData(owner){return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});}, discard:function discard(owner){if(owner[this.expando]){delete this.cache[owner[this.expando]];}}};var dataPriv=new Data();var dataUser=new Data();var rbrace=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash=/[A-Z]/g;function dataAttr(elem, key, data){var name;if(data === undefined && elem.nodeType === 1){name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();data = elem.getAttribute(name);if(typeof data === "string"){try{data = data === "true"?true:data === "false"?false:data === "null"?null:+data + "" === data?+data:rbrace.test(data)?jQuery.parseJSON(data):data;}catch(e) {}dataUser.set(elem, key, data);}else {data = undefined;}}return data;}jQuery.extend({hasData:function hasData(elem){return dataUser.hasData(elem) || dataPriv.hasData(elem);}, data:(function(_data){function data(_x7, _x8, _x9){return _data.apply(this, arguments);}data.toString = function(){return _data.toString();};return data;})(function(elem, name, data){return dataUser.access(elem, name, data);}), removeData:function removeData(elem, name){dataUser.remove(elem, name);}, _data:function _data(elem, name, data){return dataPriv.access(elem, name, data);}, _removeData:function _removeData(elem, name){dataPriv.remove(elem, name);}});jQuery.fn.extend({data:function data(key, value){var i, name, data, elem=this[0], attrs=elem && elem.attributes;if(key === undefined){if(this.length){data = dataUser.get(elem);if(elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")){i = attrs.length;while(i--) {if(attrs[i]){name = attrs[i].name;if(name.indexOf("data-") === 0){name = jQuery.camelCase(name.slice(5));dataAttr(elem, name, data[name]);}}}dataPriv.set(elem, "hasDataAttrs", true);}}return data;}if(typeof key === "object"){return this.each(function(){dataUser.set(this, key);});}return access(this, function(value){var data, camelKey;if(elem && value === undefined){data = dataUser.get(elem, key);if(data !== undefined){return data;}camelKey = jQuery.camelCase(key);data = dataUser.get(elem, camelKey);if(data !== undefined){return data;}data = dataAttr(elem, camelKey, undefined);if(data !== undefined){return data;}return;}camelKey = jQuery.camelCase(key);this.each(function(){var data=dataUser.get(this, camelKey);dataUser.set(this, camelKey, value);if(key.indexOf("-") > -1 && data !== undefined){dataUser.set(this, key, value);}});}, null, value, arguments.length > 1, null, true);}, removeData:function removeData(key){return this.each(function(){dataUser.remove(this, key);});}});jQuery.extend({queue:function queue(elem, type, data){var queue;if(elem){type = (type || "fx") + "queue";queue = dataPriv.get(elem, type);if(data){if(!queue || jQuery.isArray(data)){queue = dataPriv.access(elem, type, jQuery.makeArray(data));}else {queue.push(data);}}return queue || [];}}, dequeue:function dequeue(elem, type){type = type || "fx";var queue=jQuery.queue(elem, type), startLength=queue.length, fn=queue.shift(), hooks=jQuery._queueHooks(elem, type), next=function next(){jQuery.dequeue(elem, type);};if(fn === "inprogress"){fn = queue.shift();startLength--;}if(fn){if(type === "fx"){queue.unshift("inprogress");}delete hooks.stop;fn.call(elem, next, hooks);}if(!startLength && hooks){hooks.empty.fire();}}, _queueHooks:function _queueHooks(elem, type){var key=type + "queueHooks";return dataPriv.get(elem, key) || dataPriv.access(elem, key, {empty:jQuery.Callbacks("once memory").add(function(){dataPriv.remove(elem, [type + "queue", key]);})});}});jQuery.fn.extend({queue:function queue(type, data){var setter=2;if(typeof type !== "string"){data = type;type = "fx";setter--;}if(arguments.length < setter){return jQuery.queue(this[0], type);}return data === undefined?this:this.each(function(){var queue=jQuery.queue(this, type, data);jQuery._queueHooks(this, type);if(type === "fx" && queue[0] !== "inprogress"){jQuery.dequeue(this, type);}});}, dequeue:function dequeue(type){return this.each(function(){jQuery.dequeue(this, type);});}, clearQueue:function clearQueue(type){return this.queue(type || "fx", []);}, promise:function promise(type, obj){var tmp, count=1, defer=jQuery.Deferred(), elements=this, i=this.length, resolve=function resolve(){if(! --count){defer.resolveWith(elements, [elements]);}};if(typeof type !== "string"){obj = type;type = undefined;}type = type || "fx";while(i--) {tmp = dataPriv.get(elements[i], type + "queueHooks");if(tmp && tmp.empty){count++;tmp.empty.add(resolve);}}resolve();return defer.promise(obj);}});var pnum=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;var cssExpand=["Top", "Right", "Bottom", "Left"];var isHidden=function isHidden(elem, el){elem = el || elem;return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);};var rcheckableType=/^(?:checkbox|radio)$/i;(function(){var fragment=document.createDocumentFragment(), div=fragment.appendChild(document.createElement("div")), input=document.createElement("input");input.setAttribute("type", "radio");input.setAttribute("checked", "checked");input.setAttribute("name", "t");div.appendChild(input);support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;div.innerHTML = "<textarea>x</textarea>";support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;})();support.focusinBubbles = "onfocusin" in window;var rkeyEvent=/^key/, rmouseEvent=/^(?:mouse|pointer|contextmenu|drag|drop)|click/, rfocusMorph=/^(?:focusinfocus|focusoutblur)$/, rtypenamespace=/^([^.]*)(?:\.(.+)|)/;function returnTrue(){return true;}function returnFalse(){return false;}function safeActiveElement(){try{return document.activeElement;}catch(err) {}}jQuery.event = {global:{}, add:function add(elem, types, handler, data, selector){var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData=dataPriv.get(elem);if(!elemData){return;}if(handler.handler){handleObjIn = handler;handler = handleObjIn.handler;selector = handleObjIn.selector;}if(!handler.guid){handler.guid = jQuery.guid++;}if(!(events = elemData.events)){events = elemData.events = {};}if(!(eventHandle = elemData.handle)){eventHandle = elemData.handle = function(e){return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type?jQuery.event.dispatch.apply(elem, arguments):undefined;};}types = (types || "").match(rnotwhite) || [""];t = types.length;while(t--) {tmp = rtypenamespace.exec(types[t]) || [];type = origType = tmp[1];namespaces = (tmp[2] || "").split(".").sort();if(!type){continue;}special = jQuery.event.special[type] || {};type = (selector?special.delegateType:special.bindType) || type;special = jQuery.event.special[type] || {};handleObj = jQuery.extend({type:type, origType:origType, data:data, handler:handler, guid:handler.guid, selector:selector, needsContext:selector && jQuery.expr.match.needsContext.test(selector), namespace:namespaces.join(".")}, handleObjIn);if(!(handlers = events[type])){handlers = events[type] = [];handlers.delegateCount = 0;if(!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false){if(elem.addEventListener){elem.addEventListener(type, eventHandle, false);}}}if(special.add){special.add.call(elem, handleObj);if(!handleObj.handler.guid){handleObj.handler.guid = handler.guid;}}if(selector){handlers.splice(handlers.delegateCount++, 0, handleObj);}else {handlers.push(handleObj);}jQuery.event.global[type] = true;}}, remove:function remove(elem, types, handler, selector, mappedTypes){var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData=dataPriv.hasData(elem) && dataPriv.get(elem);if(!elemData || !(events = elemData.events)){return;}types = (types || "").match(rnotwhite) || [""];t = types.length;while(t--) {tmp = rtypenamespace.exec(types[t]) || [];type = origType = tmp[1];namespaces = (tmp[2] || "").split(".").sort();if(!type){for(type in events) {jQuery.event.remove(elem, type + types[t], handler, selector, true);}continue;}special = jQuery.event.special[type] || {};type = (selector?special.delegateType:special.bindType) || type;handlers = events[type] || [];tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");origCount = j = handlers.length;while(j--) {handleObj = handlers[j];if((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)){handlers.splice(j, 1);if(handleObj.selector){handlers.delegateCount--;}if(special.remove){special.remove.call(elem, handleObj);}}}if(origCount && !handlers.length){if(!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false){jQuery.removeEvent(elem, type, elemData.handle);}delete events[type];}}if(jQuery.isEmptyObject(events)){delete elemData.handle;dataPriv.remove(elem, "events");}}, trigger:function trigger(event, data, elem, onlyHandlers){var i, cur, tmp, bubbleType, ontype, handle, special, eventPath=[elem || document], type=hasOwn.call(event, "type")?event.type:event, namespaces=hasOwn.call(event, "namespace")?event.namespace.split("."):[];cur = tmp = elem = elem || document;if(elem.nodeType === 3 || elem.nodeType === 8){return;}if(rfocusMorph.test(type + jQuery.event.triggered)){return;}if(type.indexOf(".") > -1){namespaces = type.split(".");type = namespaces.shift();namespaces.sort();}ontype = type.indexOf(":") < 0 && "on" + type;event = event[jQuery.expando]?event:new jQuery.Event(type, typeof event === "object" && event);event.isTrigger = onlyHandlers?2:3;event.namespace = namespaces.join(".");event.rnamespace = event.namespace?new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"):null;event.result = undefined;if(!event.target){event.target = elem;}data = data == null?[event]:jQuery.makeArray(data, [event]);special = jQuery.event.special[type] || {};if(!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false){return;}if(!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)){bubbleType = special.delegateType || type;if(!rfocusMorph.test(bubbleType + type)){cur = cur.parentNode;}for(; cur; cur = cur.parentNode) {eventPath.push(cur);tmp = cur;}if(tmp === (elem.ownerDocument || document)){eventPath.push(tmp.defaultView || tmp.parentWindow || window);}}i = 0;while((cur = eventPath[i++]) && !event.isPropagationStopped()) {event.type = i > 1?bubbleType:special.bindType || type;handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");if(handle){handle.apply(cur, data);}handle = ontype && cur[ontype];if(handle && handle.apply && jQuery.acceptData(cur)){event.result = handle.apply(cur, data);if(event.result === false){event.preventDefault();}}}event.type = type;if(!onlyHandlers && !event.isDefaultPrevented()){if((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)){if(ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)){tmp = elem[ontype];if(tmp){elem[ontype] = null;}jQuery.event.triggered = type;elem[type]();jQuery.event.triggered = undefined;if(tmp){elem[ontype] = tmp;}}}}return event.result;}, dispatch:function dispatch(event){event = jQuery.event.fix(event);var i, j, ret, matched, handleObj, handlerQueue=[], args=slice.call(arguments), handlers=(dataPriv.get(this, "events") || {})[event.type] || [], special=jQuery.event.special[event.type] || {};args[0] = event;event.delegateTarget = this;if(special.preDispatch && special.preDispatch.call(this, event) === false){return;}handlerQueue = jQuery.event.handlers.call(this, event, handlers);i = 0;while((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {event.currentTarget = matched.elem;j = 0;while((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {if(!event.rnamespace || event.rnamespace.test(handleObj.namespace)){event.handleObj = handleObj;event.data = handleObj.data;ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);if(ret !== undefined){if((event.result = ret) === false){event.preventDefault();event.stopPropagation();}}}}}if(special.postDispatch){special.postDispatch.call(this, event);}return event.result;}, handlers:(function(_handlers){function handlers(_x10, _x11){return _handlers.apply(this, arguments);}handlers.toString = function(){return _handlers.toString();};return handlers;})(function(event, handlers){var i, matches, sel, handleObj, handlerQueue=[], delegateCount=handlers.delegateCount, cur=event.target;if(delegateCount && cur.nodeType && (!event.button || event.type !== "click")){for(; cur !== this; cur = cur.parentNode || this) {if(cur.disabled !== true || event.type !== "click"){matches = [];for(i = 0; i < delegateCount; i++) {handleObj = handlers[i];sel = handleObj.selector + " ";if(matches[sel] === undefined){matches[sel] = handleObj.needsContext?jQuery(sel, this).index(cur) > -1:jQuery.find(sel, this, null, [cur]).length;}if(matches[sel]){matches.push(handleObj);}}if(matches.length){handlerQueue.push({elem:cur, handlers:matches});}}}}if(delegateCount < handlers.length){handlerQueue.push({elem:this, handlers:handlers.slice(delegateCount)});}return handlerQueue;}), props:("altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " + "metaKey relatedTarget shiftKey target timeStamp view which").split(" "), fixHooks:{}, keyHooks:{props:"char charCode key keyCode".split(" "), filter:function filter(event, original){if(event.which == null){event.which = original.charCode != null?original.charCode:original.keyCode;}return event;}}, mouseHooks:{props:("button buttons clientX clientY offsetX offsetY pageX pageY " + "screenX screenY toElement").split(" "), filter:function filter(event, original){var eventDoc, doc, body, button=original.button;if(event.pageX == null && original.clientX != null){eventDoc = event.target.ownerDocument || document;doc = eventDoc.documentElement;body = eventDoc.body;event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);}if(!event.which && button !== undefined){event.which = button & 1?1:button & 2?3:button & 4?2:0;}return event;}}, fix:function fix(event){if(event[jQuery.expando]){return event;}var i, prop, copy, type=event.type, originalEvent=event, fixHook=this.fixHooks[type];if(!fixHook){this.fixHooks[type] = fixHook = rmouseEvent.test(type)?this.mouseHooks:rkeyEvent.test(type)?this.keyHooks:{};}copy = fixHook.props?this.props.concat(fixHook.props):this.props;event = new jQuery.Event(originalEvent);i = copy.length;while(i--) {prop = copy[i];event[prop] = originalEvent[prop];}if(event.target.nodeType === 3){event.target = event.target.parentNode;}return fixHook.filter?fixHook.filter(event, originalEvent):event;}, special:{load:{noBubble:true}, focus:{trigger:function trigger(){if(this !== safeActiveElement() && this.focus){this.focus();return false;}}, delegateType:"focusin"}, blur:{trigger:function trigger(){if(this === safeActiveElement() && this.blur){this.blur();return false;}}, delegateType:"focusout"}, click:{trigger:function trigger(){if(this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")){this.click();return false;}}, _default:function _default(event){return jQuery.nodeName(event.target, "a");}}, beforeunload:{postDispatch:function postDispatch(event){if(event.result !== undefined && event.originalEvent){event.originalEvent.returnValue = event.result;}}}}, simulate:function simulate(type, elem, event, bubble){var e=jQuery.extend(new jQuery.Event(), event, {type:type, isSimulated:true, originalEvent:{}});if(bubble){jQuery.event.trigger(e, null, elem);}else {jQuery.event.dispatch.call(elem, e);}if(e.isDefaultPrevented()){event.preventDefault();}}};jQuery.removeEvent = function(elem, type, handle){if(elem.removeEventListener){elem.removeEventListener(type, handle, false);}};jQuery.Event = function(src, props){if(!(this instanceof jQuery.Event)){return new jQuery.Event(src, props);}if(src && src.type){this.originalEvent = src;this.type = src.type;this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false?returnTrue:returnFalse;}else {this.type = src;}if(props){jQuery.extend(this, props);}this.timeStamp = src && src.timeStamp || jQuery.now();this[jQuery.expando] = true;};jQuery.Event.prototype = {constructor:jQuery.Event, isDefaultPrevented:returnFalse, isPropagationStopped:returnFalse, isImmediatePropagationStopped:returnFalse, preventDefault:function preventDefault(){var e=this.originalEvent;this.isDefaultPrevented = returnTrue;if(e && e.preventDefault){e.preventDefault();}}, stopPropagation:function stopPropagation(){var e=this.originalEvent;this.isPropagationStopped = returnTrue;if(e && e.stopPropagation){e.stopPropagation();}}, stopImmediatePropagation:function stopImmediatePropagation(){var e=this.originalEvent;this.isImmediatePropagationStopped = returnTrue;if(e && e.stopImmediatePropagation){e.stopImmediatePropagation();}this.stopPropagation();}};jQuery.each({mouseenter:"mouseover", mouseleave:"mouseout", pointerenter:"pointerover", pointerleave:"pointerout"}, function(orig, fix){jQuery.event.special[orig] = {delegateType:fix, bindType:fix, handle:function handle(event){var ret, target=this, related=event.relatedTarget, handleObj=event.handleObj;if(!related || related !== target && !jQuery.contains(target, related)){event.type = handleObj.origType;ret = handleObj.handler.apply(this, arguments);event.type = fix;}return ret;}};});if(!support.focusinBubbles){jQuery.each({focus:"focusin", blur:"focusout"}, function(orig, fix){var handler=function handler(event){jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);};jQuery.event.special[fix] = {setup:function setup(){var doc=this.ownerDocument || this, attaches=dataPriv.access(doc, fix);if(!attaches){doc.addEventListener(orig, handler, true);}dataPriv.access(doc, fix, (attaches || 0) + 1);}, teardown:function teardown(){var doc=this.ownerDocument || this, attaches=dataPriv.access(doc, fix) - 1;if(!attaches){doc.removeEventListener(orig, handler, true);dataPriv.remove(doc, fix);}else {dataPriv.access(doc, fix, attaches);}}};});}jQuery.fn.extend({on:function on(types, selector, data, fn, one){var origFn, type;if(typeof types === "object"){if(typeof selector !== "string"){data = data || selector;selector = undefined;}for(type in types) {this.on(type, selector, data, types[type], one);}return this;}if(data == null && fn == null){fn = selector;data = selector = undefined;}else if(fn == null){if(typeof selector === "string"){fn = data;data = undefined;}else {fn = data;data = selector;selector = undefined;}}if(fn === false){fn = returnFalse;}else if(!fn){return this;}if(one === 1){origFn = fn;fn = function(event){jQuery().off(event);return origFn.apply(this, arguments);};fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);}return this.each(function(){jQuery.event.add(this, types, fn, data, selector);});}, one:function one(types, selector, data, fn){return this.on(types, selector, data, fn, 1);}, off:function off(types, selector, fn){var handleObj, type;if(types && types.preventDefault && types.handleObj){handleObj = types.handleObj;jQuery(types.delegateTarget).off(handleObj.namespace?handleObj.origType + "." + handleObj.namespace:handleObj.origType, handleObj.selector, handleObj.handler);return this;}if(typeof types === "object"){for(type in types) {this.off(type, selector, types[type]);}return this;}if(selector === false || typeof selector === "function"){fn = selector;selector = undefined;}if(fn === false){fn = returnFalse;}return this.each(function(){jQuery.event.remove(this, types, fn, selector);});}, trigger:function trigger(type, data){return this.each(function(){jQuery.event.trigger(type, data, this);});}, triggerHandler:function triggerHandler(type, data){var elem=this[0];if(elem){return jQuery.event.trigger(type, data, elem, true);}}});var rxhtmlTag=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi, rtagName=/<([\w:-]+)/, rhtml=/<|&#?\w+;/, rnoInnerhtml=/<(?:script|style|link)/i, rchecked=/checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType=/^$|\/(?:java|ecma)script/i, rscriptTypeMasked=/^true\/(.*)/, rcleanScript=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, wrapMap={option:[1, "<select multiple='multiple'>", "</select>"], thead:[1, "<table>", "</table>"], col:[2, "<table><colgroup>", "</colgroup></table>"], tr:[2, "<table><tbody>", "</tbody></table>"], td:[3, "<table><tbody><tr>", "</tr></tbody></table>"], _default:[0, "", ""]};wrapMap.optgroup = wrapMap.option;wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;wrapMap.th = wrapMap.td;function manipulationTarget(elem, content){return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11?content:content.firstChild, "tr")?elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")):elem;}function disableScript(elem){elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;return elem;}function restoreScript(elem){var match=rscriptTypeMasked.exec(elem.type);if(match){elem.type = match[1];}else {elem.removeAttribute("type");}return elem;}function setGlobalEval(elems, refElements){var i=0, l=elems.length;for(; i < l; i++) {dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));}}function cloneCopyEvent(src, dest){var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;if(dest.nodeType !== 1){return;}if(dataPriv.hasData(src)){pdataOld = dataPriv.access(src);pdataCur = dataPriv.set(dest, pdataOld);events = pdataOld.events;if(events){delete pdataCur.handle;pdataCur.events = {};for(type in events) {for(i = 0, l = events[type].length; i < l; i++) {jQuery.event.add(dest, type, events[type][i]);}}}}if(dataUser.hasData(src)){udataOld = dataUser.access(src);udataCur = jQuery.extend({}, udataOld);dataUser.set(dest, udataCur);}}function getAll(context, tag){var ret=typeof context.getElementsByTagName !== "undefined"?context.getElementsByTagName(tag || "*"):typeof context.querySelectorAll !== "undefined"?context.querySelectorAll(tag || "*"):[];return tag === undefined || tag && jQuery.nodeName(context, tag)?jQuery.merge([context], ret):ret;}function fixInput(src, dest){var nodeName=dest.nodeName.toLowerCase();if(nodeName === "input" && rcheckableType.test(src.type)){dest.checked = src.checked;}else if(nodeName === "input" || nodeName === "textarea"){dest.defaultValue = src.defaultValue;}}jQuery.extend({clone:function clone(elem, dataAndEvents, deepDataAndEvents){var i, l, srcElements, destElements, clone=elem.cloneNode(true), inPage=jQuery.contains(elem.ownerDocument, elem);if(!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)){destElements = getAll(clone);srcElements = getAll(elem);for(i = 0, l = srcElements.length; i < l; i++) {fixInput(srcElements[i], destElements[i]);}}if(dataAndEvents){if(deepDataAndEvents){srcElements = srcElements || getAll(elem);destElements = destElements || getAll(clone);for(i = 0, l = srcElements.length; i < l; i++) {cloneCopyEvent(srcElements[i], destElements[i]);}}else {cloneCopyEvent(elem, clone);}}destElements = getAll(clone, "script");if(destElements.length > 0){setGlobalEval(destElements, !inPage && getAll(elem, "script"));}return clone;}, buildFragment:function buildFragment(elems, context, scripts, selection){var elem, tmp, tag, wrap, contains, j, fragment=context.createDocumentFragment(), nodes=[], i=0, l=elems.length;for(; i < l; i++) {elem = elems[i];if(elem || elem === 0){if(jQuery.type(elem) === "object"){jQuery.merge(nodes, elem.nodeType?[elem]:elem);}else if(!rhtml.test(elem)){nodes.push(context.createTextNode(elem));}else {tmp = tmp || fragment.appendChild(context.createElement("div"));tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();wrap = wrapMap[tag] || wrapMap._default;tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];j = wrap[0];while(j--) {tmp = tmp.lastChild;}jQuery.merge(nodes, tmp.childNodes);tmp = fragment.firstChild;tmp.textContent = "";}}}fragment.textContent = "";i = 0;while(elem = nodes[i++]) {if(selection && jQuery.inArray(elem, selection) > -1){continue;}contains = jQuery.contains(elem.ownerDocument, elem);tmp = getAll(fragment.appendChild(elem), "script");if(contains){setGlobalEval(tmp);}if(scripts){j = 0;while(elem = tmp[j++]) {if(rscriptType.test(elem.type || "")){scripts.push(elem);}}}}return fragment;}, cleanData:function cleanData(elems){var data, elem, type, key, special=jQuery.event.special, i=0;for(; (elem = elems[i]) !== undefined; i++) {if(jQuery.acceptData(elem)){key = elem[dataPriv.expando];if(key && (data = dataPriv.cache[key])){if(data.events){for(type in data.events) {if(special[type]){jQuery.event.remove(elem, type);}else {jQuery.removeEvent(elem, type, data.handle);}}}if(dataPriv.cache[key]){delete dataPriv.cache[key];}}}delete dataUser.cache[elem[dataUser.expando]];}}});jQuery.fn.extend({text:function text(value){return access(this, function(value){return value === undefined?jQuery.text(this):this.empty().each(function(){if(this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9){this.textContent = value;}});}, null, value, arguments.length);}, append:function append(){return this.domManip(arguments, function(elem){if(this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9){var target=manipulationTarget(this, elem);target.appendChild(elem);}});}, prepend:function prepend(){return this.domManip(arguments, function(elem){if(this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9){var target=manipulationTarget(this, elem);target.insertBefore(elem, target.firstChild);}});}, before:function before(){return this.domManip(arguments, function(elem){if(this.parentNode){this.parentNode.insertBefore(elem, this);}});}, after:function after(){return this.domManip(arguments, function(elem){if(this.parentNode){this.parentNode.insertBefore(elem, this.nextSibling);}});}, remove:function remove(selector, keepData){var elem, elems=selector?jQuery.filter(selector, this):this, i=0;for(; (elem = elems[i]) != null; i++) {if(!keepData && elem.nodeType === 1){jQuery.cleanData(getAll(elem));}if(elem.parentNode){if(keepData && jQuery.contains(elem.ownerDocument, elem)){setGlobalEval(getAll(elem, "script"));}elem.parentNode.removeChild(elem);}}return this;}, empty:function empty(){var elem, i=0;for(; (elem = this[i]) != null; i++) {if(elem.nodeType === 1){jQuery.cleanData(getAll(elem, false));elem.textContent = "";}}return this;}, clone:function clone(dataAndEvents, deepDataAndEvents){dataAndEvents = dataAndEvents == null?false:dataAndEvents;deepDataAndEvents = deepDataAndEvents == null?dataAndEvents:deepDataAndEvents;return this.map(function(){return jQuery.clone(this, dataAndEvents, deepDataAndEvents);});}, html:function html(value){return access(this, function(value){var elem=this[0] || {}, i=0, l=this.length;if(value === undefined && elem.nodeType === 1){return elem.innerHTML;}if(typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]){value = value.replace(rxhtmlTag, "<$1></$2>");try{for(; i < l; i++) {elem = this[i] || {};if(elem.nodeType === 1){jQuery.cleanData(getAll(elem, false));elem.innerHTML = value;}}elem = 0;}catch(e) {}}if(elem){this.empty().append(value);}}, null, value, arguments.length);}, replaceWith:function replaceWith(){var arg=arguments[0];this.domManip(arguments, function(elem){arg = this.parentNode;jQuery.cleanData(getAll(this));if(arg){arg.replaceChild(elem, this);}});return arg && (arg.length || arg.nodeType)?this:this.remove();}, detach:function detach(selector){return this.remove(selector, true);}, domManip:function domManip(args, callback){args = concat.apply([], args);var fragment, first, scripts, hasScripts, node, doc, i=0, l=this.length, set=this, iNoClone=l - 1, value=args[0], isFunction=jQuery.isFunction(value);if(isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)){return this.each(function(index){var self=set.eq(index);if(isFunction){args[0] = value.call(this, index, self.html());}self.domManip(args, callback);});}if(l){fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);first = fragment.firstChild;if(fragment.childNodes.length === 1){fragment = first;}if(first){scripts = jQuery.map(getAll(fragment, "script"), disableScript);hasScripts = scripts.length;for(; i < l; i++) {node = fragment;if(i !== iNoClone){node = jQuery.clone(node, true, true);if(hasScripts){jQuery.merge(scripts, getAll(node, "script"));}}callback.call(this[i], node, i);}if(hasScripts){doc = scripts[scripts.length - 1].ownerDocument;jQuery.map(scripts, restoreScript);for(i = 0; i < hasScripts; i++) {node = scripts[i];if(rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)){if(node.src){if(jQuery._evalUrl){jQuery._evalUrl(node.src);}}else {jQuery.globalEval(node.textContent.replace(rcleanScript, ""));}}}}}}return this;}});jQuery.each({appendTo:"append", prependTo:"prepend", insertBefore:"before", insertAfter:"after", replaceAll:"replaceWith"}, function(name, original){jQuery.fn[name] = function(selector){var elems, ret=[], insert=jQuery(selector), last=insert.length - 1, i=0;for(; i <= last; i++) {elems = i === last?this:this.clone(true);jQuery(insert[i])[original](elems);push.apply(ret, elems.get());}return this.pushStack(ret);};});var iframe, elemdisplay={HTML:"block", BODY:"block"};function actualDisplay(name, doc){var elem=jQuery(doc.createElement(name)).appendTo(doc.body), display=jQuery.css(elem[0], "display");elem.detach();return display;}function defaultDisplay(nodeName){var doc=document, display=elemdisplay[nodeName];if(!display){display = actualDisplay(nodeName, doc);if(display === "none" || !display){iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);doc = iframe[0].contentDocument;doc.write();doc.close();display = actualDisplay(nodeName, doc);iframe.detach();}elemdisplay[nodeName] = display;}return display;}var rmargin=/^margin/;var rnumnonpx=new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");var getStyles=function getStyles(elem){if(elem.ownerDocument.defaultView.opener){return elem.ownerDocument.defaultView.getComputedStyle(elem, null);}return window.getComputedStyle(elem, null);};function curCSS(elem, name, computed){var ret;computed = computed || getStyles(elem);if(computed){ret = computed.getPropertyValue(name) || computed[name];}if(computed){if(ret === "" && !jQuery.contains(elem.ownerDocument, elem)){ret = jQuery.style(elem, name);}}return ret !== undefined?ret + "":ret;}function addGetHookIf(conditionFn, hookFn){return {get:function get(){if(conditionFn()){delete this.get;return;}return (this.get = hookFn).apply(this, arguments);}};}var documentElement=document.documentElement;(function(){var pixelPositionVal, boxSizingReliableVal, container=document.createElement("div"), div=document.createElement("div");if(!div.style){return;}div.style.backgroundClip = "content-box";div.cloneNode(true).style.backgroundClip = "";support.clearCloneStyle = div.style.backgroundClip === "content-box";container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" + "position:absolute";container.appendChild(div);function computePixelPositionAndBoxSizingReliable(){div.style.cssText = "-webkit-box-sizing:border-box;box-sizing:border-box;" + "display:block;margin-top:1%;top:1%;" + "border:1px;padding:1px;width:4px;position:absolute";div.innerHTML = "";documentElement.appendChild(container);var divStyle=window.getComputedStyle(div, null);pixelPositionVal = divStyle.top !== "1%";boxSizingReliableVal = divStyle.width === "4px";documentElement.removeChild(container);}if(window.getComputedStyle){jQuery.extend(support, {pixelPosition:function pixelPosition(){computePixelPositionAndBoxSizingReliable();return pixelPositionVal;}, boxSizingReliable:function boxSizingReliable(){if(boxSizingReliableVal == null){computePixelPositionAndBoxSizingReliable();}return boxSizingReliableVal;}, reliableMarginRight:function reliableMarginRight(){var ret, marginDiv=div.appendChild(document.createElement("div"));marginDiv.style.cssText = div.style.cssText = "-webkit-box-sizing:content-box;box-sizing:content-box;" + "display:block;margin:0;border:0;padding:0";marginDiv.style.marginRight = marginDiv.style.width = "0";div.style.width = "1px";documentElement.appendChild(container);ret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);documentElement.removeChild(container);div.removeChild(marginDiv);return ret;}});}})();jQuery.swap = function(elem, options, callback, args){var ret, name, old={};for(name in options) {old[name] = elem.style[name];elem.style[name] = options[name];}ret = callback.apply(elem, args || []);for(name in options) {elem.style[name] = old[name];}return ret;};var rdisplayswap=/^(none|table(?!-c[ea]).+)/, rnumsplit=new RegExp("^(" + pnum + ")(.*)$", "i"), rrelNum=new RegExp("^([+-])=(" + pnum + ")", "i"), cssShow={position:"absolute", visibility:"hidden", display:"block"}, cssNormalTransform={letterSpacing:"0", fontWeight:"400"}, cssPrefixes=["Webkit", "Moz", "ms"];function vendorPropName(style, name){if(name in style){return name;}var capName=name[0].toUpperCase() + name.slice(1), origName=name, i=cssPrefixes.length;while(i--) {name = cssPrefixes[i] + capName;if(name in style){return name;}}return origName;}function setPositiveNumber(elem, value, subtract){var matches=rnumsplit.exec(value);return matches?Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px"):value;}function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles){var i=extra === (isBorderBox?"border":"content")?4:name === "width"?1:0, val=0;for(; i < 4; i += 2) {if(extra === "margin"){val += jQuery.css(elem, extra + cssExpand[i], true, styles);}if(isBorderBox){if(extra === "content"){val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);}if(extra !== "margin"){val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);}}else {val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);if(extra !== "padding"){val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);}}}return val;}function getWidthOrHeight(elem, name, extra){var valueIsBorderBox=true, val=name === "width"?elem.offsetWidth:elem.offsetHeight, styles=getStyles(elem), isBorderBox=jQuery.css(elem, "boxSizing", false, styles) === "border-box";if(val <= 0 || val == null){val = curCSS(elem, name, styles);if(val < 0 || val == null){val = elem.style[name];}if(rnumnonpx.test(val)){return val;}valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);val = parseFloat(val) || 0;}return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox?"border":"content"), valueIsBorderBox, styles) + "px";}function showHide(elements, show){var display, elem, hidden, values=[], index=0, length=elements.length;for(; index < length; index++) {elem = elements[index];if(!elem.style){continue;}values[index] = dataPriv.get(elem, "olddisplay");display = elem.style.display;if(show){if(!values[index] && display === "none"){elem.style.display = "";}if(elem.style.display === "" && isHidden(elem)){values[index] = dataPriv.access(elem, "olddisplay", defaultDisplay(elem.nodeName));}}else {hidden = isHidden(elem);if(display !== "none" || !hidden){dataPriv.set(elem, "olddisplay", hidden?display:jQuery.css(elem, "display"));}}}for(index = 0; index < length; index++) {elem = elements[index];if(!elem.style){continue;}if(!show || elem.style.display === "none" || elem.style.display === ""){elem.style.display = show?values[index] || "":"none";}}return elements;}jQuery.extend({cssHooks:{opacity:{get:function get(elem, computed){if(computed){var ret=curCSS(elem, "opacity");return ret === ""?"1":ret;}}}}, cssNumber:{columnCount:true, fillOpacity:true, flexGrow:true, flexShrink:true, fontWeight:true, lineHeight:true, opacity:true, order:true, orphans:true, widows:true, zIndex:true, zoom:true}, cssProps:{float:"cssFloat"}, style:function style(elem, name, value, extra){if(!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style){return;}var ret, type, hooks, origName=jQuery.camelCase(name), style=elem.style;name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];if(value !== undefined){type = typeof value;if(type === "string" && (ret = rrelNum.exec(value))){value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));type = "number";}if(value == null || value !== value){return;}if(type === "number" && !jQuery.cssNumber[origName]){value += "px";}if(!support.clearCloneStyle && value === "" && name.indexOf("background") === 0){style[name] = "inherit";}if(!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined){style[name] = value;}}else {if(hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined){return ret;}return style[name];}}, css:function css(elem, name, extra, styles){var val, num, hooks, origName=jQuery.camelCase(name);name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];if(hooks && "get" in hooks){val = hooks.get(elem, true, extra);}if(val === undefined){val = curCSS(elem, name, styles);}if(val === "normal" && name in cssNormalTransform){val = cssNormalTransform[name];}if(extra === "" || extra){num = parseFloat(val);return extra === true || jQuery.isNumeric(num)?num || 0:val;}return val;}});jQuery.each(["height", "width"], function(i, name){jQuery.cssHooks[name] = {get:function get(elem, computed, extra){if(computed){return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0?jQuery.swap(elem, cssShow, function(){return getWidthOrHeight(elem, name, extra);}):getWidthOrHeight(elem, name, extra);}}, set:function set(elem, value, extra){var styles=extra && getStyles(elem);return setPositiveNumber(elem, value, extra?augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles):0);}};});jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function(elem, computed){if(computed){return jQuery.swap(elem, {display:"inline-block"}, curCSS, [elem, "marginRight"]);}});jQuery.each({margin:"", padding:"", border:"Width"}, function(prefix, suffix){jQuery.cssHooks[prefix + suffix] = {expand:function expand(value){var i=0, expanded={}, parts=typeof value === "string"?value.split(" "):[value];for(; i < 4; i++) {expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];}return expanded;}};if(!rmargin.test(prefix)){jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;}});jQuery.fn.extend({css:function css(name, value){return access(this, function(elem, name, value){var styles, len, map={}, i=0;if(jQuery.isArray(name)){styles = getStyles(elem);len = name.length;for(; i < len; i++) {map[name[i]] = jQuery.css(elem, name[i], false, styles);}return map;}return value !== undefined?jQuery.style(elem, name, value):jQuery.css(elem, name);}, name, value, arguments.length > 1);}, show:function show(){return showHide(this, true);}, hide:function hide(){return showHide(this);}, toggle:function toggle(state){if(typeof state === "boolean"){return state?this.show():this.hide();}return this.each(function(){if(isHidden(this)){jQuery(this).show();}else {jQuery(this).hide();}});}});function Tween(elem, options, prop, end, easing){return new Tween.prototype.init(elem, options, prop, end, easing);}jQuery.Tween = Tween;Tween.prototype = {constructor:Tween, init:function init(elem, options, prop, end, easing, unit){this.elem = elem;this.prop = prop;this.easing = easing || "swing";this.options = options;this.start = this.now = this.cur();this.end = end;this.unit = unit || (jQuery.cssNumber[prop]?"":"px");}, cur:function cur(){var hooks=Tween.propHooks[this.prop];return hooks && hooks.get?hooks.get(this):Tween.propHooks._default.get(this);}, run:function run(percent){var eased, hooks=Tween.propHooks[this.prop];if(this.options.duration){this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);}else {this.pos = eased = percent;}this.now = (this.end - this.start) * eased + this.start;if(this.options.step){this.options.step.call(this.elem, this.now, this);}if(hooks && hooks.set){hooks.set(this);}else {Tween.propHooks._default.set(this);}return this;}};Tween.prototype.init.prototype = Tween.prototype;Tween.propHooks = {_default:{get:function get(tween){var result;if(tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)){return tween.elem[tween.prop];}result = jQuery.css(tween.elem, tween.prop, "");return !result || result === "auto"?0:result;}, set:function set(tween){if(jQuery.fx.step[tween.prop]){jQuery.fx.step[tween.prop](tween);}else if(tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])){jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);}else {tween.elem[tween.prop] = tween.now;}}}};Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {set:function set(tween){if(tween.elem.nodeType && tween.elem.parentNode){tween.elem[tween.prop] = tween.now;}}};jQuery.easing = {linear:function linear(p){return p;}, swing:function swing(p){return 0.5 - Math.cos(p * Math.PI) / 2;}};jQuery.fx = Tween.prototype.init;jQuery.fx.step = {};var fxNow, timerId, rfxtypes=/^(?:toggle|show|hide)$/, rfxnum=new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"), rrun=/queueHooks$/, animationPrefilters=[defaultPrefilter], tweeners={"*":[function(prop, value){var tween=this.createTween(prop, value), target=tween.cur(), parts=rfxnum.exec(value), unit=parts && parts[3] || (jQuery.cssNumber[prop]?"":"px"), start=(jQuery.cssNumber[prop] || unit !== "px" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)), scale=1, maxIterations=20;if(start && start[3] !== unit){unit = unit || start[3];parts = parts || [];start = +target || 1;do {scale = scale || ".5";start = start / scale;jQuery.style(tween.elem, prop, start + unit);}while(scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);}if(parts){start = tween.start = +start || +target || 0;tween.unit = unit;tween.end = parts[1]?start + (parts[1] + 1) * parts[2]:+parts[2];}return tween;}]};function raf(){if(timerId){window.requestAnimationFrame(raf);jQuery.fx.tick();}}function createFxNow(){setTimeout(function(){fxNow = undefined;});return fxNow = jQuery.now();}function genFx(type, includeWidth){var which, i=0, attrs={height:type};includeWidth = includeWidth?1:0;for(; i < 4; i += 2 - includeWidth) {which = cssExpand[i];attrs["margin" + which] = attrs["padding" + which] = type;}if(includeWidth){attrs.opacity = attrs.width = type;}return attrs;}function createTween(value, prop, animation){var tween, collection=(tweeners[prop] || []).concat(tweeners["*"]), index=0, length=collection.length;for(; index < length; index++) {if(tween = collection[index].call(animation, prop, value)){return tween;}}}function defaultPrefilter(elem, props, opts){var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay, anim=this, orig={}, style=elem.style, hidden=elem.nodeType && isHidden(elem), dataShow=dataPriv.get(elem, "fxshow");if(!opts.queue){hooks = jQuery._queueHooks(elem, "fx");if(hooks.unqueued == null){hooks.unqueued = 0;oldfire = hooks.empty.fire;hooks.empty.fire = function(){if(!hooks.unqueued){oldfire();}};}hooks.unqueued++;anim.always(function(){anim.always(function(){hooks.unqueued--;if(!jQuery.queue(elem, "fx").length){hooks.empty.fire();}});});}if(elem.nodeType === 1 && ("height" in props || "width" in props)){opts.overflow = [style.overflow, style.overflowX, style.overflowY];display = jQuery.css(elem, "display");checkDisplay = display === "none"?dataPriv.get(elem, "olddisplay") || defaultDisplay(elem.nodeName):display;if(checkDisplay === "inline" && jQuery.css(elem, "float") === "none"){style.display = "inline-block";}}if(opts.overflow){style.overflow = "hidden";anim.always(function(){style.overflow = opts.overflow[0];style.overflowX = opts.overflow[1];style.overflowY = opts.overflow[2];});}for(prop in props) {value = props[prop];if(rfxtypes.exec(value)){delete props[prop];toggle = toggle || value === "toggle";if(value === (hidden?"hide":"show")){if(value === "show" && dataShow && dataShow[prop] !== undefined){hidden = true;}else {continue;}}orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);}else {display = undefined;}}if(!jQuery.isEmptyObject(orig)){if(dataShow){if("hidden" in dataShow){hidden = dataShow.hidden;}}else {dataShow = dataPriv.access(elem, "fxshow", {});}if(toggle){dataShow.hidden = !hidden;}if(hidden){jQuery(elem).show();}else {anim.done(function(){jQuery(elem).hide();});}anim.done(function(){var prop;dataPriv.remove(elem, "fxshow");for(prop in orig) {jQuery.style(elem, prop, orig[prop]);}});for(prop in orig) {tween = createTween(hidden?dataShow[prop]:0, prop, anim);if(!(prop in dataShow)){dataShow[prop] = tween.start;if(hidden){tween.end = tween.start;tween.start = prop === "width" || prop === "height"?1:0;}}}}else if((display === "none"?defaultDisplay(elem.nodeName):display) === "inline"){style.display = display;}}function propFilter(props, specialEasing){var index, name, easing, value, hooks;for(index in props) {name = jQuery.camelCase(index);easing = specialEasing[name];value = props[index];if(jQuery.isArray(value)){easing = value[1];value = props[index] = value[0];}if(index !== name){props[name] = value;delete props[index];}hooks = jQuery.cssHooks[name];if(hooks && "expand" in hooks){value = hooks.expand(value);delete props[name];for(index in value) {if(!(index in props)){props[index] = value[index];specialEasing[index] = easing;}}}else {specialEasing[name] = easing;}}}function Animation(elem, properties, options){var result, stopped, index=0, length=animationPrefilters.length, deferred=jQuery.Deferred().always(function(){delete tick.elem;}), tick=function tick(){if(stopped){return false;}var currentTime=fxNow || createFxNow(), remaining=Math.max(0, animation.startTime + animation.duration - currentTime), temp=remaining / animation.duration || 0, percent=1 - temp, index=0, length=animation.tweens.length;for(; index < length; index++) {animation.tweens[index].run(percent);}deferred.notifyWith(elem, [animation, percent, remaining]);if(percent < 1 && length){return remaining;}else {deferred.resolveWith(elem, [animation]);return false;}}, animation=deferred.promise({elem:elem, props:jQuery.extend({}, properties), opts:jQuery.extend(true, {specialEasing:{}}, options), originalProperties:properties, originalOptions:options, startTime:fxNow || createFxNow(), duration:options.duration, tweens:[], createTween:function createTween(prop, end){var tween=jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);animation.tweens.push(tween);return tween;}, stop:function stop(gotoEnd){var index=0, length=gotoEnd?animation.tweens.length:0;if(stopped){return this;}stopped = true;for(; index < length; index++) {animation.tweens[index].run(1);}if(gotoEnd){deferred.resolveWith(elem, [animation, gotoEnd]);}else {deferred.rejectWith(elem, [animation, gotoEnd]);}return this;}}), props=animation.props;propFilter(props, animation.opts.specialEasing);for(; index < length; index++) {result = animationPrefilters[index].call(animation, elem, props, animation.opts);if(result){return result;}}jQuery.map(props, createTween, animation);if(jQuery.isFunction(animation.opts.start)){animation.opts.start.call(elem, animation);}jQuery.fx.timer(jQuery.extend(tick, {elem:elem, anim:animation, queue:animation.opts.queue}));return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);}jQuery.Animation = jQuery.extend(Animation, {tweener:function tweener(props, callback){if(jQuery.isFunction(props)){callback = props;props = ["*"];}else {props = props.split(" ");}var prop, index=0, length=props.length;for(; index < length; index++) {prop = props[index];tweeners[prop] = tweeners[prop] || [];tweeners[prop].unshift(callback);}}, prefilter:function prefilter(callback, prepend){if(prepend){animationPrefilters.unshift(callback);}else {animationPrefilters.push(callback);}}});jQuery.speed = function(speed, easing, fn){var opt=speed && typeof speed === "object"?jQuery.extend({}, speed):{complete:fn || !fn && easing || jQuery.isFunction(speed) && speed, duration:speed, easing:fn && easing || easing && !jQuery.isFunction(easing) && easing};if(jQuery.fx.off || document.hidden){opt.duration = 0;}else {opt.duration = typeof opt.duration === "number"?opt.duration:opt.duration in jQuery.fx.speeds?jQuery.fx.speeds[opt.duration]:jQuery.fx.speeds._default;}if(opt.queue == null || opt.queue === true){opt.queue = "fx";}opt.old = opt.complete;opt.complete = function(){if(jQuery.isFunction(opt.old)){opt.old.call(this);}if(opt.queue){jQuery.dequeue(this, opt.queue);}};return opt;};jQuery.fn.extend({fadeTo:function fadeTo(speed, to, easing, callback){return this.filter(isHidden).css("opacity", 0).show().end().animate({opacity:to}, speed, easing, callback);}, animate:function animate(prop, speed, easing, callback){var empty=jQuery.isEmptyObject(prop), optall=jQuery.speed(speed, easing, callback), doAnimation=function doAnimation(){var anim=Animation(this, jQuery.extend({}, prop), optall);if(empty || dataPriv.get(this, "finish")){anim.stop(true);}};doAnimation.finish = doAnimation;return empty || optall.queue === false?this.each(doAnimation):this.queue(optall.queue, doAnimation);}, stop:function stop(type, clearQueue, gotoEnd){var stopQueue=function stopQueue(hooks){var stop=hooks.stop;delete hooks.stop;stop(gotoEnd);};if(typeof type !== "string"){gotoEnd = clearQueue;clearQueue = type;type = undefined;}if(clearQueue && type !== false){this.queue(type || "fx", []);}return this.each(function(){var dequeue=true, index=type != null && type + "queueHooks", timers=jQuery.timers, data=dataPriv.get(this);if(index){if(data[index] && data[index].stop){stopQueue(data[index]);}}else {for(index in data) {if(data[index] && data[index].stop && rrun.test(index)){stopQueue(data[index]);}}}for(index = timers.length; index--;) {if(timers[index].elem === this && (type == null || timers[index].queue === type)){timers[index].anim.stop(gotoEnd);dequeue = false;timers.splice(index, 1);}}if(dequeue || !gotoEnd){jQuery.dequeue(this, type);}});}, finish:function finish(type){if(type !== false){type = type || "fx";}return this.each(function(){var index, data=dataPriv.get(this), queue=data[type + "queue"], hooks=data[type + "queueHooks"], timers=jQuery.timers, length=queue?queue.length:0;data.finish = true;jQuery.queue(this, type, []);if(hooks && hooks.stop){hooks.stop.call(this, true);}for(index = timers.length; index--;) {if(timers[index].elem === this && timers[index].queue === type){timers[index].anim.stop(true);timers.splice(index, 1);}}for(index = 0; index < length; index++) {if(queue[index] && queue[index].finish){queue[index].finish.call(this);}}delete data.finish;});}});jQuery.each(["toggle", "show", "hide"], function(i, name){var cssFn=jQuery.fn[name];jQuery.fn[name] = function(speed, easing, callback){return speed == null || typeof speed === "boolean"?cssFn.apply(this, arguments):this.animate(genFx(name, true), speed, easing, callback);};});jQuery.each({slideDown:genFx("show"), slideUp:genFx("hide"), slideToggle:genFx("toggle"), fadeIn:{opacity:"show"}, fadeOut:{opacity:"hide"}, fadeToggle:{opacity:"toggle"}}, function(name, props){jQuery.fn[name] = function(speed, easing, callback){return this.animate(props, speed, easing, callback);};});jQuery.timers = [];jQuery.fx.tick = function(){var timer, i=0, timers=jQuery.timers;fxNow = jQuery.now();for(; i < timers.length; i++) {timer = timers[i];if(!timer() && timers[i] === timer){timers.splice(i--, 1);}}if(!timers.length){jQuery.fx.stop();}fxNow = undefined;};jQuery.fx.timer = function(timer){jQuery.timers.push(timer);if(timer()){jQuery.fx.start();}else {jQuery.timers.pop();}};jQuery.fx.interval = 13;jQuery.fx.start = function(){if(!timerId){timerId = window.requestAnimationFrame?window.requestAnimationFrame(raf):setInterval(jQuery.fx.tick, jQuery.fx.interval);}};jQuery.fx.stop = function(){if(window.cancelAnimationFrame){window.cancelAnimationFrame(timerId);}else {clearInterval(timerId);}timerId = null;};jQuery.fx.speeds = {slow:600, fast:200, _default:400};jQuery.fn.delay = function(time, type){time = jQuery.fx?jQuery.fx.speeds[time] || time:time;type = type || "fx";return this.queue(type, function(next, hooks){var timeout=setTimeout(next, time);hooks.stop = function(){clearTimeout(timeout);};});};(function(){var input=document.createElement("input"), select=document.createElement("select"), opt=select.appendChild(document.createElement("option"));input.type = "checkbox";support.checkOn = input.value !== "";support.optSelected = opt.selected;select.disabled = true;support.optDisabled = !opt.disabled;input = document.createElement("input");input.value = "t";input.type = "radio";support.radioValue = input.value === "t";})();var nodeHook, boolHook, attrHandle=jQuery.expr.attrHandle;jQuery.fn.extend({attr:function attr(name, value){return access(this, jQuery.attr, name, value, arguments.length > 1);}, removeAttr:function removeAttr(name){return this.each(function(){jQuery.removeAttr(this, name);});}});jQuery.extend({attr:function attr(elem, name, value){var hooks, ret, nType=elem.nodeType;if(!elem || nType === 3 || nType === 8 || nType === 2){return;}if(typeof elem.getAttribute === "undefined"){return jQuery.prop(elem, name, value);}if(nType !== 1 || !jQuery.isXMLDoc(elem)){name = name.toLowerCase();hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name)?boolHook:nodeHook);}if(value !== undefined){if(value === null){jQuery.removeAttr(elem, name);}else if(hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined){return ret;}else {elem.setAttribute(name, value + "");return value;}}else if(hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null){return ret;}else {ret = jQuery.find.attr(elem, name);return ret == null?undefined:ret;}}, removeAttr:function removeAttr(elem, value){var name, propName, i=0, attrNames=value && value.match(rnotwhite);if(attrNames && elem.nodeType === 1){while(name = attrNames[i++]) {propName = jQuery.propFix[name] || name;if(jQuery.expr.match.bool.test(name)){elem[propName] = false;}elem.removeAttribute(name);}}}, attrHooks:{type:{set:function set(elem, value){if(!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")){var val=elem.value;elem.setAttribute("type", value);if(val){elem.value = val;}return value;}}}}});boolHook = {set:function set(elem, value, name){if(value === false){jQuery.removeAttr(elem, name);}else {elem.setAttribute(name, name);}return name;}};jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name){var getter=attrHandle[name] || jQuery.find.attr;attrHandle[name] = function(elem, name, isXML){var ret, handle;if(!isXML){handle = attrHandle[name];attrHandle[name] = ret;ret = getter(elem, name, isXML) != null?name.toLowerCase():null;attrHandle[name] = handle;}return ret;};});var rfocusable=/^(?:input|select|textarea|button)$/i;jQuery.fn.extend({prop:function prop(name, value){return access(this, jQuery.prop, name, value, arguments.length > 1);}, removeProp:function removeProp(name){return this.each(function(){delete this[jQuery.propFix[name] || name];});}});jQuery.extend({propFix:{"for":"htmlFor", "class":"className"}, prop:function prop(elem, name, value){var ret, hooks, notxml, nType=elem.nodeType;if(!elem || nType === 3 || nType === 8 || nType === 2){return;}notxml = nType !== 1 || !jQuery.isXMLDoc(elem);if(notxml){name = jQuery.propFix[name] || name;hooks = jQuery.propHooks[name];}if(value !== undefined){return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined?ret:elem[name] = value;}else {return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null?ret:elem[name];}}, propHooks:{tabIndex:{get:function get(elem){return elem.hasAttribute("tabindex") || rfocusable.test(elem.nodeName) || elem.href?elem.tabIndex:-1;}}}});if(!support.optSelected){jQuery.propHooks.selected = {get:function get(elem){var parent=elem.parentNode;if(parent && parent.parentNode){parent.parentNode.selectedIndex;}return null;}};}jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function(){jQuery.propFix[this.toLowerCase()] = this;});var rclass=/[\t\r\n\f]/g;jQuery.fn.extend({addClass:function addClass(value){var classes, elem, cur, clazz, j, finalValue, proceed=typeof value === "string" && value, i=0, len=this.length;if(jQuery.isFunction(value)){return this.each(function(j){jQuery(this).addClass(value.call(this, j, this.className));});}if(proceed){classes = (value || "").match(rnotwhite) || [];for(; i < len; i++) {elem = this[i];cur = elem.nodeType === 1 && (elem.className?(" " + elem.className + " ").replace(rclass, " "):" ");if(cur){j = 0;while(clazz = classes[j++]) {if(cur.indexOf(" " + clazz + " ") < 0){cur += clazz + " ";}}finalValue = jQuery.trim(cur);if(elem.className !== finalValue){elem.className = finalValue;}}}}return this;}, removeClass:function removeClass(value){var classes, elem, cur, clazz, j, finalValue, proceed=arguments.length === 0 || typeof value === "string" && value, i=0, len=this.length;if(jQuery.isFunction(value)){return this.each(function(j){jQuery(this).removeClass(value.call(this, j, this.className));});}if(proceed){classes = (value || "").match(rnotwhite) || [];for(; i < len; i++) {elem = this[i];cur = elem.nodeType === 1 && (elem.className?(" " + elem.className + " ").replace(rclass, " "):"");if(cur){j = 0;while(clazz = classes[j++]) {while(cur.indexOf(" " + clazz + " ") > -1) {cur = cur.replace(" " + clazz + " ", " ");}}finalValue = value?jQuery.trim(cur):"";if(elem.className !== finalValue){elem.className = finalValue;}}}}return this;}, toggleClass:function toggleClass(value, stateVal){var type=typeof value;if(typeof stateVal === "boolean" && type === "string"){return stateVal?this.addClass(value):this.removeClass(value);}if(jQuery.isFunction(value)){return this.each(function(i){jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);});}return this.each(function(){if(type === "string"){var className, i=0, self=jQuery(this), classNames=value.match(rnotwhite) || [];while(className = classNames[i++]) {if(self.hasClass(className)){self.removeClass(className);}else {self.addClass(className);}}}else if(value === undefined || type === "boolean"){if(this.className){dataPriv.set(this, "__className__", this.className);}this.className = this.className || value === false?"":dataPriv.get(this, "__className__") || "";}});}, hasClass:function hasClass(selector){var className=" " + selector + " ", i=0, l=this.length;for(; i < l; i++) {if(this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) > -1){return true;}}return false;}});var rreturn=/\r/g;jQuery.fn.extend({val:function val(value){var hooks, ret, isFunction, elem=this[0];if(!arguments.length){if(elem){hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];if(hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined){return ret;}ret = elem.value;return typeof ret === "string"?ret.replace(rreturn, ""):ret == null?"":ret;}return;}isFunction = jQuery.isFunction(value);return this.each(function(i){var val;if(this.nodeType !== 1){return;}if(isFunction){val = value.call(this, i, jQuery(this).val());}else {val = value;}if(val == null){val = "";}else if(typeof val === "number"){val += "";}else if(jQuery.isArray(val)){val = jQuery.map(val, function(value){return value == null?"":value + "";});}hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];if(!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined){this.value = val;}});}});jQuery.extend({valHooks:{option:{get:function get(elem){return jQuery.trim(elem.value);}}, select:{get:function get(elem){var value, option, options=elem.options, index=elem.selectedIndex, one=elem.type === "select-one" || index < 0, values=one?null:[], max=one?index + 1:options.length, i=index < 0?max:one?index:0;for(; i < max; i++) {option = options[i];if((option.selected || i === index) && (support.optDisabled?!option.disabled:option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))){value = jQuery(option).val();if(one){return value;}values.push(value);}}return values;}, set:function set(elem, value){var optionSet, option, options=elem.options, values=jQuery.makeArray(value), i=options.length;while(i--) {option = options[i];if(option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1){optionSet = true;}}if(!optionSet){elem.selectedIndex = -1;}return values;}}}});jQuery.each(["radio", "checkbox"], function(){jQuery.valHooks[this] = {set:function set(elem, value){if(jQuery.isArray(value)){return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;}}};if(!support.checkOn){jQuery.valHooks[this].get = function(elem){return elem.getAttribute("value") === null?"on":elem.value;};}});jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function(i, name){jQuery.fn[name] = function(data, fn){return arguments.length > 0?this.on(name, null, data, fn):this.trigger(name);};});jQuery.fn.extend({hover:function hover(fnOver, fnOut){return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);}, bind:function bind(types, data, fn){return this.on(types, null, data, fn);}, unbind:function unbind(types, fn){return this.off(types, null, fn);}, delegate:function delegate(selector, types, data, fn){return this.on(types, selector, data, fn);}, undelegate:function undelegate(selector, types, fn){return arguments.length === 1?this.off(selector, "**"):this.off(types, selector || "**", fn);}});var location=window.location;var nonce=jQuery.now();var rquery=/\?/;jQuery.parseJSON = function(data){return JSON.parse(data + "");};jQuery.parseXML = function(data){var xml;if(!data || typeof data !== "string"){return null;}try{xml = new window.DOMParser().parseFromString(data, "text/xml");}catch(e) {xml = undefined;}if(!xml || xml.getElementsByTagName("parsererror").length){jQuery.error("Invalid XML: " + data);}return xml;};var rhash=/#.*$/, rts=/([?&])_=[^&]*/, rheaders=/^(.*?):[ \t]*([^\r\n]*)$/mg, rlocalProtocol=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent=/^(?:GET|HEAD)$/, rprotocol=/^\/\//, prefilters={}, transports={}, allTypes="*/".concat("*"), originAnchor=document.createElement("a");originAnchor.href = location.href;function addToPrefiltersOrTransports(structure){return function(dataTypeExpression, func){if(typeof dataTypeExpression !== "string"){func = dataTypeExpression;dataTypeExpression = "*";}var dataType, i=0, dataTypes=dataTypeExpression.toLowerCase().match(rnotwhite) || [];if(jQuery.isFunction(func)){while(dataType = dataTypes[i++]) {if(dataType[0] === "+"){dataType = dataType.slice(1) || "*";(structure[dataType] = structure[dataType] || []).unshift(func);}else {(structure[dataType] = structure[dataType] || []).push(func);}}}};}function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR){var inspected={}, seekingTransport=structure === transports;function inspect(dataType){var selected;inspected[dataType] = true;jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory){var dataTypeOrTransport=prefilterOrFactory(options, originalOptions, jqXHR);if(typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]){options.dataTypes.unshift(dataTypeOrTransport);inspect(dataTypeOrTransport);return false;}else if(seekingTransport){return !(selected = dataTypeOrTransport);}});return selected;}return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");}function ajaxExtend(target, src){var key, deep, flatOptions=jQuery.ajaxSettings.flatOptions || {};for(key in src) {if(src[key] !== undefined){(flatOptions[key]?target:deep || (deep = {}))[key] = src[key];}}if(deep){jQuery.extend(true, target, deep);}return target;}function ajaxHandleResponses(s, jqXHR, responses){var ct, type, finalDataType, firstDataType, contents=s.contents, dataTypes=s.dataTypes;while(dataTypes[0] === "*") {dataTypes.shift();if(ct === undefined){ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");}}if(ct){for(type in contents) {if(contents[type] && contents[type].test(ct)){dataTypes.unshift(type);break;}}}if(dataTypes[0] in responses){finalDataType = dataTypes[0];}else {for(type in responses) {if(!dataTypes[0] || s.converters[type + " " + dataTypes[0]]){finalDataType = type;break;}if(!firstDataType){firstDataType = type;}}finalDataType = finalDataType || firstDataType;}if(finalDataType){if(finalDataType !== dataTypes[0]){dataTypes.unshift(finalDataType);}return responses[finalDataType];}}function ajaxConvert(s, response, jqXHR, isSuccess){var conv2, current, conv, tmp, prev, converters={}, dataTypes=s.dataTypes.slice();if(dataTypes[1]){for(conv in s.converters) {converters[conv.toLowerCase()] = s.converters[conv];}}current = dataTypes.shift();while(current) {if(s.responseFields[current]){jqXHR[s.responseFields[current]] = response;}if(!prev && isSuccess && s.dataFilter){response = s.dataFilter(response, s.dataType);}prev = current;current = dataTypes.shift();if(current){if(current === "*"){current = prev;}else if(prev !== "*" && prev !== current){conv = converters[prev + " " + current] || converters["* " + current];if(!conv){for(conv2 in converters) {tmp = conv2.split(" ");if(tmp[1] === current){conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];if(conv){if(conv === true){conv = converters[conv2];}else if(converters[conv2] !== true){current = tmp[0];dataTypes.unshift(tmp[1]);}break;}}}}if(conv !== true){if(conv && s.throws){response = conv(response);}else {try{response = conv(response);}catch(e) {return {state:"parsererror", error:conv?e:"No conversion from " + prev + " to " + current};}}}}}}return {state:"success", data:response};}jQuery.extend({active:0, lastModified:{}, etag:{}, ajaxSettings:{url:location.href, type:"GET", isLocal:rlocalProtocol.test(location.protocol), global:true, processData:true, async:true, contentType:"application/x-www-form-urlencoded; charset=UTF-8", accepts:{"*":allTypes, text:"text/plain", html:"text/html", xml:"application/xml, text/xml", json:"application/json, text/javascript"}, contents:{xml:/xml/, html:/html/, json:/json/}, responseFields:{xml:"responseXML", text:"responseText", json:"responseJSON"}, converters:{"* text":String, "text html":true, "text json":jQuery.parseJSON, "text xml":jQuery.parseXML}, flatOptions:{url:true, context:true}}, ajaxSetup:function ajaxSetup(target, settings){return settings?ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings):ajaxExtend(jQuery.ajaxSettings, target);}, ajaxPrefilter:addToPrefiltersOrTransports(prefilters), ajaxTransport:addToPrefiltersOrTransports(transports), ajax:function ajax(url, options){if(typeof url === "object"){options = url;url = undefined;}options = options || {};var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, urlAnchor, fireGlobals, i, s=jQuery.ajaxSetup({}, options), callbackContext=s.context || s, globalEventContext=s.context && (callbackContext.nodeType || callbackContext.jquery)?jQuery(callbackContext):jQuery.event, deferred=jQuery.Deferred(), completeDeferred=jQuery.Callbacks("once memory"), statusCode=s.statusCode || {}, requestHeaders={}, requestHeadersNames={}, state=0, strAbort="canceled", jqXHR={readyState:0, getResponseHeader:function getResponseHeader(key){var match;if(state === 2){if(!responseHeaders){responseHeaders = {};while(match = rheaders.exec(responseHeadersString)) {responseHeaders[match[1].toLowerCase()] = match[2];}}match = responseHeaders[key.toLowerCase()];}return match == null?null:match;}, getAllResponseHeaders:function getAllResponseHeaders(){return state === 2?responseHeadersString:null;}, setRequestHeader:function setRequestHeader(name, value){var lname=name.toLowerCase();if(!state){name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;requestHeaders[name] = value;}return this;}, overrideMimeType:function overrideMimeType(type){if(!state){s.mimeType = type;}return this;}, statusCode:(function(_statusCode){function statusCode(_x12){return _statusCode.apply(this, arguments);}statusCode.toString = function(){return _statusCode.toString();};return statusCode;})(function(map){var code;if(map){if(state < 2){for(code in map) {statusCode[code] = [statusCode[code], map[code]];}}else {jqXHR.always(map[jqXHR.status]);}}return this;}), abort:function abort(statusText){var finalText=statusText || strAbort;if(transport){transport.abort(finalText);}done(0, finalText);return this;}};deferred.promise(jqXHR).complete = completeDeferred.add;jqXHR.success = jqXHR.done;jqXHR.error = jqXHR.fail;s.url = ((url || s.url || location.href) + "").replace(rhash, "").replace(rprotocol, location.protocol + "//");s.type = options.method || options.type || s.method || s.type;s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];if(s.crossDomain == null){urlAnchor = document.createElement("a");try{urlAnchor.href = s.url;urlAnchor.href = urlAnchor.href;s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;}catch(e) {s.crossDomain = true;}}if(s.data && s.processData && typeof s.data !== "string"){s.data = jQuery.param(s.data, s.traditional);}inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);if(state === 2){return jqXHR;}fireGlobals = jQuery.event && s.global;if(fireGlobals && jQuery.active++ === 0){jQuery.event.trigger("ajaxStart");}s.type = s.type.toUpperCase();s.hasContent = !rnoContent.test(s.type);cacheURL = s.url;if(!s.hasContent){if(s.data){cacheURL = s.url += (rquery.test(cacheURL)?"&":"?") + s.data;delete s.data;}if(s.cache === false){s.url = rts.test(cacheURL)?cacheURL.replace(rts, "$1_=" + nonce++):cacheURL + (rquery.test(cacheURL)?"&":"?") + "_=" + nonce++;}}if(s.ifModified){if(jQuery.lastModified[cacheURL]){jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);}if(jQuery.etag[cacheURL]){jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);}}if(s.data && s.hasContent && s.contentType !== false || options.contentType){jqXHR.setRequestHeader("Content-Type", s.contentType);}jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]]?s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*"?", " + allTypes + "; q=0.01":""):s.accepts["*"]);for(i in s.headers) {jqXHR.setRequestHeader(i, s.headers[i]);}if(s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)){return jqXHR.abort();}strAbort = "abort";for(i in {success:1, error:1, complete:1}) {jqXHR[i](s[i]);}transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);if(!transport){done(-1, "No Transport");}else {jqXHR.readyState = 1;if(fireGlobals){globalEventContext.trigger("ajaxSend", [jqXHR, s]);}if(state === 2){return jqXHR;}if(s.async && s.timeout > 0){timeoutTimer = setTimeout(function(){jqXHR.abort("timeout");}, s.timeout);}try{state = 1;transport.send(requestHeaders, done);}catch(e) {if(state < 2){done(-1, e);}else {throw e;}}}function done(status, nativeStatusText, responses, headers){var isSuccess, success, error, response, modified, statusText=nativeStatusText;if(state === 2){return;}state = 2;if(timeoutTimer){clearTimeout(timeoutTimer);}transport = undefined;responseHeadersString = headers || "";jqXHR.readyState = status > 0?4:0;isSuccess = status >= 200 && status < 300 || status === 304;if(responses){response = ajaxHandleResponses(s, jqXHR, responses);}response = ajaxConvert(s, response, jqXHR, isSuccess);if(isSuccess){if(s.ifModified){modified = jqXHR.getResponseHeader("Last-Modified");if(modified){jQuery.lastModified[cacheURL] = modified;}modified = jqXHR.getResponseHeader("etag");if(modified){jQuery.etag[cacheURL] = modified;}}if(status === 204 || s.type === "HEAD"){statusText = "nocontent";}else if(status === 304){statusText = "notmodified";}else {statusText = response.state;success = response.data;error = response.error;isSuccess = !error;}}else {error = statusText;if(status || !statusText){statusText = "error";if(status < 0){status = 0;}}}jqXHR.status = status;jqXHR.statusText = (nativeStatusText || statusText) + "";if(isSuccess){deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);}else {deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);}jqXHR.statusCode(statusCode);statusCode = undefined;if(fireGlobals){globalEventContext.trigger(isSuccess?"ajaxSuccess":"ajaxError", [jqXHR, s, isSuccess?success:error]);}completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);if(fireGlobals){globalEventContext.trigger("ajaxComplete", [jqXHR, s]);if(! --jQuery.active){jQuery.event.trigger("ajaxStop");}}}return jqXHR;}, getJSON:function getJSON(url, data, callback){return jQuery.get(url, data, callback, "json");}, getScript:function getScript(url, callback){return jQuery.get(url, undefined, callback, "script");}});jQuery.each(["get", "post"], function(i, method){jQuery[method] = function(url, data, callback, type){if(jQuery.isFunction(data)){type = type || callback;callback = data;data = undefined;}return jQuery.ajax(jQuery.extend({url:url, type:method, dataType:type, data:data, success:callback}, jQuery.isPlainObject(url) && url));};});jQuery._evalUrl = function(url){return jQuery.ajax({url:url, type:"GET", dataType:"script", cache:true, async:false, global:false, throws:true});};jQuery.fn.extend({wrapAll:function wrapAll(html){var wrap;if(this[0]){if(jQuery.isFunction(html)){html = html.call(this[0]);}wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);if(this[0].parentNode){wrap.insertBefore(this[0]);}wrap.map(function(){var elem=this;while(elem.firstElementChild) {elem = elem.firstElementChild;}return elem;}).append(this);}return this;}, wrapInner:function wrapInner(html){if(jQuery.isFunction(html)){return this.each(function(i){jQuery(this).wrapInner(html.call(this, i));});}return this.each(function(){var self=jQuery(this), contents=self.contents();if(contents.length){contents.wrapAll(html);}else {self.append(html);}});}, wrap:function wrap(html){var isFunction=jQuery.isFunction(html);return this.each(function(i){jQuery(this).wrapAll(isFunction?html.call(this, i):html);});}, unwrap:function unwrap(){return this.parent().each(function(){if(!jQuery.nodeName(this, "body")){jQuery(this).replaceWith(this.childNodes);}}).end();}});jQuery.expr.filters.hidden = function(elem){return !elem.offsetWidth || !elem.offsetHeight;};jQuery.expr.filters.visible = function(elem){return !jQuery.expr.filters.hidden(elem);};var r20=/%20/g, rbracket=/\[\]$/, rCRLF=/\r?\n/g, rsubmitterTypes=/^(?:submit|button|image|reset|file)$/i, rsubmittable=/^(?:input|select|textarea|keygen)/i;function buildParams(prefix, obj, traditional, add){var name;if(jQuery.isArray(obj)){jQuery.each(obj, function(i, v){if(traditional || rbracket.test(prefix)){add(prefix, v);}else {buildParams(prefix + "[" + (typeof v === "object"?i:"") + "]", v, traditional, add);}});}else if(!traditional && jQuery.type(obj) === "object"){for(name in obj) {buildParams(prefix + "[" + name + "]", obj[name], traditional, add);}}else {add(prefix, obj);}}jQuery.param = function(a, traditional){var prefix, s=[], add=function add(key, value){value = jQuery.isFunction(value)?value():value == null?"":value;s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);};if(traditional === undefined){traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;}if(jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)){jQuery.each(a, function(){add(this.name, this.value);});}else {for(prefix in a) {buildParams(prefix, a[prefix], traditional, add);}}return s.join("&").replace(r20, "+");};jQuery.fn.extend({serialize:function serialize(){return jQuery.param(this.serializeArray());}, serializeArray:function serializeArray(){return this.map(function(){var elements=jQuery.prop(this, "elements");return elements?jQuery.makeArray(elements):this;}).filter(function(){var type=this.type;return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));}).map(function(i, elem){var val=jQuery(this).val();return val == null?null:jQuery.isArray(val)?jQuery.map(val, function(val){return {name:elem.name, value:val.replace(rCRLF, "\r\n")};}):{name:elem.name, value:val.replace(rCRLF, "\r\n")};}).get();}});jQuery.ajaxSettings.xhr = function(){try{return new window.XMLHttpRequest();}catch(e) {}};var xhrId=0, xhrCallbacks={}, xhrSuccessStatus={0:200, 1223:204}, xhrSupported=jQuery.ajaxSettings.xhr();if(window.attachEvent){window.attachEvent("onunload", function(){for(var key in xhrCallbacks) {xhrCallbacks[key]();}});}support.cors = !!xhrSupported && "withCredentials" in xhrSupported;support.ajax = xhrSupported = !!xhrSupported;jQuery.ajaxTransport(function(options){var callback;if(support.cors || xhrSupported && !options.crossDomain){return {send:function send(headers, complete){var i, xhr=options.xhr(), id=++xhrId;xhr.open(options.type, options.url, options.async, options.username, options.password);if(options.xhrFields){for(i in options.xhrFields) {xhr[i] = options.xhrFields[i];}}if(options.mimeType && xhr.overrideMimeType){xhr.overrideMimeType(options.mimeType);}if(!options.crossDomain && !headers["X-Requested-With"]){headers["X-Requested-With"] = "XMLHttpRequest";}for(i in headers) {xhr.setRequestHeader(i, headers[i]);}callback = function(type){return function(){if(callback){delete xhrCallbacks[id];callback = xhr.onload = xhr.onerror = null;if(type === "abort"){xhr.abort();}else if(type === "error"){complete(xhr.status, xhr.statusText);}else {complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, typeof xhr.responseText === "string"?{text:xhr.responseText}:undefined, xhr.getAllResponseHeaders());}}};};xhr.onload = callback();xhr.onerror = callback("error");callback = xhrCallbacks[id] = callback("abort");try{xhr.send(options.hasContent && options.data || null);}catch(e) {if(callback){throw e;}}}, abort:function abort(){if(callback){callback();}}};}});jQuery.ajaxSetup({accepts:{script:"text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"}, contents:{script:/(?:java|ecma)script/}, converters:{"text script":function textScript(text){jQuery.globalEval(text);return text;}}});jQuery.ajaxPrefilter("script", function(s){if(s.cache === undefined){s.cache = false;}if(s.crossDomain){s.type = "GET";}});jQuery.ajaxTransport("script", function(s){if(s.crossDomain){var script, callback;return {send:function send(_, complete){script = jQuery("<script>").prop({async:true, charset:s.scriptCharset, src:s.url}).on("load error", callback = function(evt){script.remove();callback = null;if(evt){complete(evt.type === "error"?404:200, evt.type);}});document.head.appendChild(script[0]);}, abort:function abort(){if(callback){callback();}}};}});var oldCallbacks=[], rjsonp=/(=)\?(?=&|$)|\?\?/;jQuery.ajaxSetup({jsonp:"callback", jsonpCallback:function jsonpCallback(){var callback=oldCallbacks.pop() || jQuery.expando + "_" + nonce++;this[callback] = true;return callback;}});jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR){var callbackName, overwritten, responseContainer, jsonProp=s.jsonp !== false && (rjsonp.test(s.url)?"url":typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");if(jsonProp || s.dataTypes[0] === "jsonp"){callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback)?s.jsonpCallback():s.jsonpCallback;if(jsonProp){s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);}else if(s.jsonp !== false){s.url += (rquery.test(s.url)?"&":"?") + s.jsonp + "=" + callbackName;}s.converters["script json"] = function(){if(!responseContainer){jQuery.error(callbackName + " was not called");}return responseContainer[0];};s.dataTypes[0] = "json";overwritten = window[callbackName];window[callbackName] = function(){responseContainer = arguments;};jqXHR.always(function(){window[callbackName] = overwritten;if(s[callbackName]){s.jsonpCallback = originalSettings.jsonpCallback;oldCallbacks.push(callbackName);}if(responseContainer && jQuery.isFunction(overwritten)){overwritten(responseContainer[0]);}responseContainer = overwritten = undefined;});return "script";}});support.createHTMLDocument = (function(){var doc=document.implementation.createHTMLDocument("");if(!doc.body){return false;}doc.body.innerHTML = "<form></form><form></form>";return doc.body.childNodes.length === 2;})();jQuery.parseHTML = function(data, context, keepScripts){if(typeof data !== "string"){return [];}if(typeof context === "boolean"){keepScripts = context;context = false;}context = context || (support.createHTMLDocument?document.implementation.createHTMLDocument(""):document);var parsed=rsingleTag.exec(data), scripts=!keepScripts && [];if(parsed){return [context.createElement(parsed[1])];}parsed = jQuery.buildFragment([data], context, scripts);if(scripts && scripts.length){jQuery(scripts).remove();}return jQuery.merge([], parsed.childNodes);};var _load=jQuery.fn.load;jQuery.fn.load = function(url, params, callback){if(typeof url !== "string" && _load){return _load.apply(this, arguments);}var selector, type, response, self=this, off=url.indexOf(" ");if(off > -1){selector = jQuery.trim(url.slice(off));url = url.slice(0, off);}if(jQuery.isFunction(params)){callback = params;params = undefined;}else if(params && typeof params === "object"){type = "POST";}if(self.length > 0){jQuery.ajax({url:url, type:type, dataType:"html", data:params}).done(function(responseText){response = arguments;self.html(selector?jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector):responseText);}).complete(callback && function(jqXHR, status){self.each(callback, response || [jqXHR.responseText, status, jqXHR]);});}return this;};jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(i, type){jQuery.fn[type] = function(fn){return this.on(type, fn);};});jQuery.expr.filters.animated = function(elem){return jQuery.grep(jQuery.timers, function(fn){return elem === fn.elem;}).length;};function getWindow(elem){return jQuery.isWindow(elem)?elem:elem.nodeType === 9 && elem.defaultView;}jQuery.offset = {setOffset:function setOffset(elem, options, i){var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position=jQuery.css(elem, "position"), curElem=jQuery(elem), props={};if(position === "static"){elem.style.position = "relative";}curOffset = curElem.offset();curCSSTop = jQuery.css(elem, "top");curCSSLeft = jQuery.css(elem, "left");calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;if(calculatePosition){curPosition = curElem.position();curTop = curPosition.top;curLeft = curPosition.left;}else {curTop = parseFloat(curCSSTop) || 0;curLeft = parseFloat(curCSSLeft) || 0;}if(jQuery.isFunction(options)){options = options.call(elem, i, jQuery.extend({}, curOffset));}if(options.top != null){props.top = options.top - curOffset.top + curTop;}if(options.left != null){props.left = options.left - curOffset.left + curLeft;}if("using" in options){options.using.call(elem, props);}else {curElem.css(props);}}};jQuery.fn.extend({offset:function offset(options){if(arguments.length){return options === undefined?this:this.each(function(i){jQuery.offset.setOffset(this, options, i);});}var docElem, win, elem=this[0], box={top:0, left:0}, doc=elem && elem.ownerDocument;if(!doc){return;}docElem = doc.documentElement;if(!jQuery.contains(docElem, elem)){return box;}box = elem.getBoundingClientRect();win = getWindow(doc);return {top:box.top + win.pageYOffset - docElem.clientTop, left:box.left + win.pageXOffset - docElem.clientLeft};}, position:function position(){if(!this[0]){return;}var offsetParent, offset, elem=this[0], parentOffset={top:0, left:0};if(jQuery.css(elem, "position") === "fixed"){offset = elem.getBoundingClientRect();}else {offsetParent = this.offsetParent();offset = this.offset();if(!jQuery.nodeName(offsetParent[0], "html")){parentOffset = offsetParent.offset();}parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);}return {top:offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true), left:offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)};}, offsetParent:function offsetParent(){return this.map(function(){var offsetParent=this.offsetParent;while(offsetParent && jQuery.css(offsetParent, "position") === "static") {offsetParent = offsetParent.offsetParent;}return offsetParent || documentElement;});}});jQuery.each({scrollLeft:"pageXOffset", scrollTop:"pageYOffset"}, function(method, prop){var top="pageYOffset" === prop;jQuery.fn[method] = function(val){return access(this, function(elem, method, val){var win=getWindow(elem);if(val === undefined){return win?win[prop]:elem[method];}if(win){win.scrollTo(!top?val:win.pageXOffset, top?val:win.pageYOffset);}else {elem[method] = val;}}, method, val, arguments.length, null);};});jQuery.each(["top", "left"], function(i, prop){jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, computed){if(computed){computed = curCSS(elem, prop);return rnumnonpx.test(computed)?jQuery(elem).position()[prop] + "px":computed;}});});jQuery.each({Height:"height", Width:"width"}, function(name, type){jQuery.each({padding:"inner" + name, content:type, "":"outer" + name}, function(defaultExtra, funcName){jQuery.fn[funcName] = function(margin, value){var chainable=arguments.length && (defaultExtra || typeof margin !== "boolean"), extra=defaultExtra || (margin === true || value === true?"margin":"border");return access(this, function(elem, type, value){var doc;if(jQuery.isWindow(elem)){return elem.document.documentElement["client" + name];}if(elem.nodeType === 9){doc = elem.documentElement;return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);}return value === undefined?jQuery.css(elem, type, extra):jQuery.style(elem, type, value, extra);}, type, chainable?margin:undefined, chainable, null);};});});if(typeof define === "function" && define.amd){define("jquery", [], function(){return jQuery;});}var _jQuery=window.jQuery, _$=window.$;jQuery.noConflict = function(deep){if(window.$ === jQuery){window.$ = _$;}if(deep && window.jQuery === jQuery){window.jQuery = _jQuery;}return jQuery;};if(!noGlobal){window.jQuery = window.$ = jQuery;}return jQuery;});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9haG1ldC8uYXRvbS9wYWNrYWdlcy90YWJzLXRvLXNwYWNlcy9zYW1wbGUvanF1ZXJ5LWdpdDIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBY0EsQUFBQyxDQUFBLFNBQVUsTUFBTSxFQUFFLE9BQU8sQ0FBRyxDQUUzQixHQUFLLE9BQU8sTUFBTSxLQUFLLFFBQVEsSUFBSSxPQUFPLE1BQU0sQ0FBQyxPQUFPLEtBQUssUUFBUSxDQUFHLENBUXRFLE1BQU0sQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FDOUIsT0FBTyxDQUFFLE1BQU0sRUFBRSxJQUFJLENBQUUsQ0FDdkIsU0FBVSxDQUFDLENBQUcsQ0FDWixHQUFLLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBRyxDQUNqQixNQUFNLElBQUksS0FBSyxDQUFFLDBDQUEwQyxDQUFFLENBQUMsQ0FDL0QsQUFDRCxPQUFPLE9BQU8sQ0FBRSxDQUFDLENBQUUsQ0FBQyxDQUNyQixDQUFDLENBQ0wsS0FBTSxDQUNMLE9BQU8sQ0FBRSxNQUFNLENBQUUsQ0FBQyxDQUNuQixDQUdGLENBQUEsQ0FBQyxPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUcsTUFBTSxDQUFHLElBQUksRUFBRSxTQUFVLE1BQU0sRUFBRSxRQUFRLENBQUcsQ0FPOUUsSUFBSSxHQUFHLENBQUcsRUFBRSxDQUFDLEFBRWIsSUFBSSxRQUFRLENBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxBQUUvQixJQUFJLEtBQUssQ0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEFBRXRCLElBQUksTUFBTSxDQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQUFFeEIsSUFBSSxJQUFJLENBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxBQUVwQixJQUFJLE9BQU8sQ0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEFBRTFCLElBQUksVUFBVSxDQUFHLEVBQUUsQ0FBQyxBQUVwQixJQUFJLFFBQVEsQ0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLEFBRW5DLElB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QyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUEsQUFBQyxDQUFHLENBQUMsSUFBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUEsQUFBRSxDQUFBLEFBQUUsQ0FBQyxBQUMxRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRyxBQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQSxBQUFFLENBQUMsQ0FHL0QsS0FBTSxHQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBRyxDQUNyQixNQUFNLENBQUMsS0FBSyxDQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBRSxDQUFDLENBQzFCLEFBRUQsT0FBTyxLQUFLLENBQUMsQ0FDZCxFQUVELE9BQVUsZ0JBQVUsS0FBSyxDQUFHLENBQzFCLElBQUksTUFBTSxFQUNSLFFBQVEsQ0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFFbkMsR0FBSyxTQUFTLE1BQVMsQ0FBQyxJQUFJLENBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFFLENBQUcsQ0FDekMsT0FBTyxJQUFJLENBQUMsQ0FDYixBQUdELEdBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFHLENBQ2QsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBR3ZDLEtBQU0sR0FBSyxRQUFRLElBQUksT0FBTyxDQUFDLElBQUksQ0FBRSxRQUFRLENBQUUsS0FFN0MsTUFBTSxHQUFHLFFBQVEsQ0FBRSxRQUFRLEVBQUUsSUFBSSxDQUFFLENBQUEsQUFBQyxLQUVwQyxNQUFNLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBRSxHQUFHLEVB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QUMsQUFHckMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQUFDaEIsTUFBUSxDQUFDLEVBQUUsRUFBRyxDQUNaLEdBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBSSxDQUN0QixVQUFVLENBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFFLEdBQUcsRUFBRSxTQUFTLENBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFFLEdBQUcsSUFBSSxDQUFBLEFBQUMsQ0FBQyxDQUM5RCxDQUNGLENBQ0YsQUFFRCxHQUFLLElBQUksQ0FBRyxDQUNWLEdBQUssVUFBVSxJQUFJLFNBQVMsQ0FBRyxDQUM3QixHQUFLLFVBQVUsQ0FBRyxDQUVoQixJQUFJLEdBQUcsRUFBRSxDQUFDLEFBQ1YsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQUFDdEIsTUFBUSxDQUFDLEVBQUUsRUFBRyxDQUNaLEdBQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBSSxDQUU1QixJQUFJLENBQUMsSUFBSSxDQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUcsQ0FBQyxDQUNwQyxDQUNGLEFBQ0QsVUFBVSxDQUFFLElBQUksRUFBRyxVQUFVLEdBQUcsRUFBRSxFQUFHLElBQUksRUFBRSxHQUFHLENBQUUsQ0FBQyxDQUNsRCxBQUdELENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLEFBQ3RCLE1BQVEsQ0FBQyxFQUFFLEVBQUcsQ0FDWixHQUFLLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQSxJQUN4QixDQUFDLElBQUksR0FBRyxVQUFVLENBQUcsT0FBTyxDQUFFLElBQUksRUFBRSxJQUFJLENBQUUsQ0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUEsR0FBSSxDQUFDLENBQUMsQ0FBRyxDQUUvRCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFBLEFBQUMsQ0FBQyxDQUN0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LENBQUUsSUFBSSxDQUFFLENBQUcsQ0FJNUIsR0FBSyxNQUFNLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBRSxJQUFJLENBQUUsSUFBSSxDQUFFLENBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUUsSUFBSSxDQUFFLENBQUcsQ0FHN0UsR0FBRyxHQUFHLElBQUksQ0FBRSxNQUFNLENBQUUsQ0FBQyxBQUVyQixHQUFLLEdBQUcsQ0FBRyxDQUNULElBQUksQ0FBRSxNQUFNLENBQUUsR0FBRyxJQUFJLENBQUMsQ0FDdkIsQUFHRCxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsQUFDOUIsSUFBSSxDQUFFLElBQUksQ0FBRSxFQUFFLENBQUMsQUFDZixNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsQUFFbkMsR0FBSyxHQUFHLENBQUcsQ0FDVCxJQUFJLENBQUUsTUFBTSxDQUFFLEdBQUcsR0FBRyxDQUFDLENBQ3RCLENBQ0YsQ0FDRixDQUNGLEFBRUQsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQ3JCLEVBRUQsUUFBUSxDQUFFLGtCQUFVLEtBQUssQ0FBRyxDQUcxQixLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUUsS0FBSyxDQUFFLENBQUMsQUFFbEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUMvQixZQUFZLENBQUcsRUFBRSxFQUNqQixJQUFJLENBQUcsS0FBSyxDQUFDLElBQUksQ0FBRSxTQUFTLENBQUUsRUFDOUIsUUFBUSxDQUFHLENBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBRSxJQUFJLEVBQUUsUUFBUSxDQUFFLElBQUksRUFBRSxDQUFBLENBQUksS0FBSyxDQUFDLElBQUksQ0FBRSxJQUFJLEVBQUUsRUFDdkUsT0FBTyxDQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFFLEtBQUssQ0FBQyxJQUFJLENBQUUsSUFBSSxFQUFFLENBQUMsQUFHckQsSUFB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QUMsQUFDZixNQUFRLEtBQUssR0FBRyxNQUFNLEVBQUcsS0FBSyxFQUFFLEVBQUcsQ0FDakMsU0FBUyxDQUFDLE1BQU0sQ0FBRSxLQUFLLENBQUUsQ0FBQyxHQUFHLENBQUUsQ0FBQyxDQUFFLENBQUMsQ0FDcEMsQUFHRCxHQUFLLE9BQU8sQ0FBRyxDQUNiLFFBQVEsQ0FBQyxXQUFXLENBQUUsSUFBSSxFQUFFLENBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBRSxDQUFFLENBQUMsQ0FDdEQsS0FBTSxDQUNMLFFBQVEsQ0FBQyxVQUFVLENBQUUsSUFBSSxFQUFFLENBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBRSxDQUFFLENBQUMsQ0FDckQsQUFDRCxPQUFPLElBQUksQ0FBQyxDQUNiLENBQ0YsQ0FBQyxFQUNGLEtBQUssQ0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEFBRTFCLFVBQVUsQ0FBRSxLQUFLLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUUsQ0FBQyxBQUVsRCxNQUFRLEtBQUssR0FBRyxNQUFNLEVBQUcsS0FBSyxFQUFFLEVBQUcsQ0FDakMsTUFBTSxHQUFHLG1CQUFtQixDQUFFLEtBQUssQ0FBRSxDQUFDLElBQUksQ0FBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFFLENBQUMsQUFDckYsR0FBSyxNQUFNLENBQUcsQ0FDWixPQUFPLE1BQU0sQ0FBQyxDQUNmLENBQ0YsQUFFRCxNQUFNLENBQUMsR0FBRyxDQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsU0FBUyxDQUFFLENBQUMsQUFFNUMsR0FBSyxNQUFNLENBQUMsVUFBVSxDQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFFLENBQUcsQ0FDL0MsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFFLElBQUksRUFBRSxTQUFTLENBQUUsQ0FBQyxDQUM5QyxBQUVELE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUNiLE1BQU0sQ0FBQyxNQUFNLENBQUUsSUFBSSxFQUFF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T0FBTyxDQUFFLElBQUksRUFBRSxJQUFJLENBQUUsQ0FBQyxDQUM5QixDQUNGLENBQUMsQ0FBQyxDQUNKLEVBQ0QsTUFBTSxDQUFFLGdCQUFVLElBQUksQ0FBRyxDQUN2QixHQUFLLElBQUksS0FBSyxLQUFLLENBQUcsQ0FDcEIsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLENBQUMsQ0FDckIsQUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVyxDQUMxQixJQUFJLEtBQUssRUFDUCxJQUFJLENBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBRSxJQUFJLENBQUUsRUFDM0IsS0FBSyxDQUFHLElBQUksQ0FBRSxJQUFJLEdBQUcsT0FBTyxDQUFFLEVBQzlCLEtBQUssQ0FBRyxJQUFJLENBQUUsSUFBSSxHQUFHLFlBQVksQ0FBRSxFQUNuQyxNQUFNLENBQUcsTUFBTSxDQUFDLE1BQU0sRUFDdEIsTUFBTSxDQUFHLEtBQUssQ0FBRyxLQUFLLENBQUMsTUFBTSxDQUFHLENBQUMsQ0FBQyxBQUdwQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxBQUduQixNQUFNLENBQUMsS0FBSyxDQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFFLENBQUMsQUFFL0IsR0FBSyxLQUFLLElBQUksS0FBSyxDQUFDLElBQUksQ0FBRyxDQUN6QixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBRSxJQUFJLEVBQUUsSUFBSSxDQUFFLENBQUMsQ0FDL0IsQUFHRCxJQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFJLENBQ3RDLEdBQUssTUFBTSxDQUFFLEtBQUssQ0FBRSxDQUFDLElBQUksS0FBSyxJQUFJLElBQUksTUFBTSxDQUFFLEtBQUssQ0FBRSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUcsQ0FDckUsTUFBTSxDQUFFLEtBQUssQ0FBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUUsSUFBSSxDQUFFLENBQUMsQUFDbEMsTUFBTSxDQUFDLE1BQU0sQ0FBRSxLQUFLLEVB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Q0FBQyxRQUFRLENBQUUsS0FBSyxDQUFFLENBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBRSxLQUFLLENBQUUsQ0FBQyxDQUN0RSxBQUVELEdBQUssTUFBTSxDQUFDLFVBQVUsQ0FBRSxLQUFLLENBQUUsQ0FBRyxDQUNoQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBVSxDQUFDLENBQUcsQ0FDN0IsTUFBTSxDQUFFLElBQUksQ0FBRSxDQUFDLFdBQVcsQ0FDeEIsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLEVBQUUsUUFBUSxDQUN4RCxDQUFDLENBQ0gsQ0FBQyxDQUFDLENBQ0osQUFFRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVyxDQUMxQixHQUFLLElBQUksS0FBSyxRQUFRLENBQUcsQ0FFdkIsSUFBSSxTQUFTLEVBQ1gsQ0FBQyxDQUFHLENBQUMsRUFDTCxJQUFJLENBQUcsTUFBTSxDQUFFLElBQUksQ0FBRSxFQUNyQixVQUFVLENBQUcsS0FBSyxDQUFDLEtBQUssQ0FBRSxTQUFTLENBQUUsSUFBSSxFQUFFLENBQUMsQUFFOUMsTUFBUyxTQUFTLEdBQUcsVUFBVSxDQUFFLENBQUMsRUFBRSxDQUFFLEVBQUksQ0FFeEMsR0FBSyxJQUFJLENBQUMsUUFBUSxDQUFFLFNBQVMsQ0FBRSxDQUFHLENBQ2hDLElBQUksQ0FBQyxXQUFXLENBQUUsU0FBUyxDQUFFLENBQUMsQ0FDL0IsS0FBTSxDQUNMLElBQUksQ0FBQyxRQUFRLENBQUUsU0FBUyxDQUFFLENBQUMsQ0FDNUIsQ0FDRixDQUdGLEtBQU0sR0FBSyxLQUFLLEtBQUssU0FBUyxJQUFJLElBQUksS0FBSyxTQUFTLENBQUcsQ0FDdEQsR0FBSyxJQUFJLENBQUMsU0FBUyxDQUFHLENBRXBCLFFBQVEsQ0FBQyxHQUFHLENBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFFLENBQUMsQ0FDdkQsQUFNRCxJQUFJLENBQUMsU0FBUyxHQUFH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RSxDQUcvQixNQUFNLENBQUMsS0FBSyxDQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBRSxDQUFDLENBQzVDLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBRyxNQUFNLENBQUcsU0FBUyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUUsQ0FBQyxDQUM1RCxDQUFDLENBQ0gsQ0FBQyxDQUFDLENBQ0osQ0FBQyxDQUFDLEFBa0JILEdBQUssT0FBTyxNQUFNLEtBQUssVUFBVSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUcsQ0FDaEQsTUFBTSxDQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsVUFBVyxDQUMvQixPQUFPLE1BQU0sQ0FBQyxDQUNmLENBQUMsQ0FBQyxDQUNKLEFBSUQsSUFFRSxPQUFPLENBQUcsTUFBTSxDQUFDLE1BQU0sRUFHdkIsRUFBRSxDQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQUFFaEIsTUFBTSxDQUFDLFVBQVUsR0FBRyxTQUFVLElBQUksQ0FBRyxDQUNuQyxHQUFLLE1BQU0sQ0FBQyxDQUFDLEtBQUssTUFBTSxDQUFHLENBQ3pCLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQ2YsQUFFRCxHQUFLLElBQUksSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBRyxDQUN0QyxNQUFNLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUN6QixBQUVELE9BQU8sTUFBTSxDQUFDLENBQ2YsQ0FBQyxBQUtGLEdBQUssQ0FBQyxRQUFRLENBQUcsQ0FDZixNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQ25DLEFBRUQsT0FBTyxNQUFNLENBQUMsQ0FDYixDQUFDLENBQUUiLCJmaWxlIjoiL1VzZXJzL2FobWV0Ly5hdG9tL3BhY2thZ2VzL3RhYnMtdG8tc3BhY2VzL3NhbXBsZS9qcXVlcnktZ2l0Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My4wLjAtcHJlIGE1ZTFjOWI0NGM5NzFmZDcwNDZkOWE5NWJkMDgxMGU1MDg0MGI2NjNcbiAqIGh0dHA6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cDovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNS0wMS0yNVQwMDowOVpcbiAqL1xuXG4oZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuICAgIC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2BcbiAgICAvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuICAgIC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG4gICAgLy8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG4gICAgLy8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cbiAgICAvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG4gICAgLy8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG4gICAgICBmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG4gICAgICBmdW5jdGlvbiggdyApIHtcbiAgICAgICAgaWYgKCAhdy5kb2N1bWVudCApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhY3RvcnkoIHcgKTtcbiAgICAgIH07XG4gIH0gZWxzZSB7XG4gICAgZmFjdG9yeSggZ2xvYmFsICk7XG4gIH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0odHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDE4K1xuLy8gQ2FuJ3QgYmUgaW4gc3RyaWN0IG1vZGUsIHNldmVyYWwgbGlicyBpbmNsdWRpbmcgQVNQLk5FVCB0cmFjZVxuLy8gdGhlIHN0YWNrIHZpYSBhcmd1bWVudHMuY2FsbGVyLmNhbGxlZSBhbmQgRmlyZWZveCBkaWVzIGlmXG4vLyB5b3UgdHJ5IHRvIHRyYWNlIHRocm91Z2ggXCJ1c2Ugc3RyaWN0XCIgY2FsbCBjaGFpbnMuICgjMTMzMzUpXG4vL1xudmFyIGFyciA9IFtdO1xuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG5cblxudmFyXG4gIHZlcnNpb24gPSBcIjMuMC4wLXByZSBhNWUxYzliNDRjOTcxZmQ3MDQ2ZDlhOTViZDA4MTBlNTA4NDBiNjYzXCIsXG5cbiAgLy8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcbiAgalF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuICAgIC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuICAgIC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG4gICAgcmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcbiAgfSxcblxuICAvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMVxuICAvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1BcbiAgcnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csXG5cbiAgLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG4gIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG4gIHJkYXNoQWxwaGEgPSAvLShbXFxkYS16XSkvZ2ksXG5cbiAgLy8gVXNlZCBieSBqUXVlcnkuY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuICBmY2FtZWxDYXNlID0gZnVuY3Rpb24oIGFsbCwgbGV0dGVyICkge1xuICAgIHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbiAgfTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcbiAgLy8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuICBqcXVlcnk6IHZlcnNpb24sXG5cbiAgY29uc3RydWN0b3I6IGpRdWVyeSxcblxuICAvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcbiAgbGVuZ3RoOiAwLFxuXG4gIHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG4gIH0sXG5cbiAgLy8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuICAvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuICBnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG4gICAgcmV0dXJuIG51bSAhPSBudWxsID9cblxuICAgICAgLy8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuICAgICAgKCBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdICkgOlxuXG4gICAgICAvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG4gICAgICBzbGljZS5jYWxsKCB0aGlzICk7XG4gIH0sXG5cbiAgLy8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuICAvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcbiAgcHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cbiAgICAvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuICAgIHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuICAgIC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG4gICAgcmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG4gICAgLy8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcbiAgICByZXR1cm4gcmV0O1xuICB9LFxuXG4gIC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG4gIC8vIChZb3UgY2FuIHNlZWQgdGhlIGFyZ3VtZW50cyB3aXRoIGFuIGFycmF5IG9mIGFyZ3MsIGJ1dCB0aGlzIGlzXG4gIC8vIG9ubHkgdXNlZCBpbnRlcm5hbGx5LilcbiAgZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrLCBhcmdzICkge1xuICAgIHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2ssIGFyZ3MgKTtcbiAgfSxcblxuICBtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcbiAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAodGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuICAgIH0pKTtcbiAgfSxcblxuICBzbGljZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcbiAgfSxcblxuICBmaXJzdDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZXEoIDAgKTtcbiAgfSxcblxuICBsYXN0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5lcSggLTEgKTtcbiAgfSxcblxuICBlcTogZnVuY3Rpb24oIGkgKSB7XG4gICAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuICAgICAgaiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcbiAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzW2pdIF0gOiBbXSApO1xuICB9LFxuXG4gIGVuZDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKG51bGwpO1xuICB9LFxuXG4gIC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgLy8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG4gIHB1c2g6IHB1c2gsXG4gIHNvcnQ6IGFyci5zb3J0LFxuICBzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG4gIHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcbiAgICB0YXJnZXQgPSBhcmd1bWVudHNbMF0gfHwge30sXG4gICAgaSA9IDEsXG4gICAgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICBkZWVwID0gZmFsc2U7XG5cbiAgLy8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuICBpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuICAgIGRlZXAgPSB0YXJnZXQ7XG5cbiAgICAvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG4gICAgdGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG4gICAgaSsrO1xuICB9XG5cbiAgLy8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG4gIGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24odGFyZ2V0KSApIHtcbiAgICB0YXJnZXQgPSB7fTtcbiAgfVxuXG4gIC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuICBpZiAoIGkgPT09IGxlbmd0aCApIHtcbiAgICB0YXJnZXQgPSB0aGlzO1xuICAgIGktLTtcbiAgfVxuXG4gIGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuICAgIC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcbiAgICBpZiAoIChvcHRpb25zID0gYXJndW1lbnRzWyBpIF0pICE9IG51bGwgKSB7XG4gICAgICAvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG4gICAgICBmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG4gICAgICAgIHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuICAgICAgICBjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG4gICAgICAgIC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3BcbiAgICAgICAgaWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcbiAgICAgICAgaWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdChjb3B5KSB8fFxuICAgICAgICAgIChjb3B5SXNBcnJheSA9IGpRdWVyeS5pc0FycmF5KGNvcHkpKSApICkge1xuXG4gICAgICAgICAgaWYgKCBjb3B5SXNBcnJheSApIHtcbiAgICAgICAgICAgIGNvcHlJc0FycmF5ID0gZmFsc2U7XG4gICAgICAgICAgICBjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNBcnJheShzcmMpID8gc3JjIDogW107XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3Qoc3JjKSA/IHNyYyA6IHt9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuICAgICAgICAgIHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuICAgICAgICAvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG4gICAgICAgIH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICB0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCh7XG4gIC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuICBleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG4gIC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG4gIGlzUmVhZHk6IHRydWUsXG5cbiAgZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcbiAgfSxcblxuICBub29wOiBmdW5jdGlvbigpIHt9LFxuXG4gIGlzRnVuY3Rpb246IGZ1bmN0aW9uKCBvYmogKSB7XG4gICAgcmV0dXJuIGpRdWVyeS50eXBlKG9iaikgPT09IFwiZnVuY3Rpb25cIjtcbiAgfSxcblxuICBpc0FycmF5OiBBcnJheS5pc0FycmF5LFxuXG4gIGlzV2luZG93OiBmdW5jdGlvbiggb2JqICkge1xuICAgIHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG4gIH0sXG5cbiAgaXNOdW1lcmljOiBmdW5jdGlvbiggb2JqICkge1xuICAgIC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChudWxsfHRydWV8ZmFsc2V8XCJcIilcbiAgICAvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG4gICAgLy8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG4gICAgLy8gYWRkaW5nIDEgY29ycmVjdHMgbG9zcyBvZiBwcmVjaXNpb24gZnJvbSBwYXJzZUZsb2F0ICgjMTUxMDApXG4gICAgcmV0dXJuICFqUXVlcnkuaXNBcnJheSggb2JqICkgJiYgKG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICsgMSkgPj0gMDtcbiAgfSxcblxuICBpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuICAgIC8vIE5vdCBwbGFpbiBvYmplY3RzOlxuICAgIC8vIC0gQW55IG9iamVjdCBvciB2YWx1ZSB3aG9zZSBpbnRlcm5hbCBbW0NsYXNzXV0gcHJvcGVydHkgaXMgbm90IFwiW29iamVjdCBPYmplY3RdXCJcbiAgICAvLyAtIERPTSBub2Rlc1xuICAgIC8vIC0gd2luZG93XG4gICAgaWYgKCBqUXVlcnkudHlwZSggb2JqICkgIT09IFwib2JqZWN0XCIgfHwgb2JqLm5vZGVUeXBlIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCBvYmouY29uc3RydWN0b3IgJiZcbiAgICAgICAgIWhhc093bi5jYWxsKCBvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCBcImlzUHJvdG90eXBlT2ZcIiApICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBmdW5jdGlvbiBoYXNuJ3QgcmV0dXJuZWQgYWxyZWFkeSwgd2UncmUgY29uZmlkZW50IHRoYXRcbiAgICAvLyB8b2JqfCBpcyBhIHBsYWluIG9iamVjdCwgY3JlYXRlZCBieSB7fSBvciBjb25zdHJ1Y3RlZCB3aXRoIG5ldyBPYmplY3RcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcblxuICBpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuICAgIHZhciBuYW1lO1xuICAgIGZvciAoIG5hbWUgaW4gb2JqICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcblxuICB0eXBlOiBmdW5jdGlvbiggb2JqICkge1xuICAgIGlmICggb2JqID09IG51bGwgKSB7XG4gICAgICByZXR1cm4gb2JqICsgXCJcIjtcbiAgICB9XG4gICAgLy8gU3VwcG9ydDogQW5kcm9pZDw0LjAgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcbiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuICAgICAgY2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbChvYmopIF0gfHwgXCJvYmplY3RcIiA6XG4gICAgICB0eXBlb2Ygb2JqO1xuICB9LFxuXG4gIC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG4gIGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlICkge1xuICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cbiAgICBzY3JpcHQudGV4dCA9IGNvZGU7XG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG4gIH0sXG5cbiAgLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuICAvLyBTdXBwb3J0OiBJRTktMTErXG4gIC8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcbiAgY2FtZWxDYXNlOiBmdW5jdGlvbiggc3RyaW5nICkge1xuICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xuICB9LFxuXG4gIG5vZGVOYW1lOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcbiAgICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgfSxcblxuICAvLyBhcmdzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG4gIGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrLCBhcmdzICkge1xuICAgIHZhciBpID0gMCxcbiAgICAgIGxlbmd0aCA9IG9iai5sZW5ndGgsXG4gICAgICBpc0FycmF5ID0gaXNBcnJheWxpa2UoIG9iaiApO1xuXG4gICAgaWYgKCBhcmdzICkge1xuICAgICAgaWYgKCBpc0FycmF5ICkge1xuICAgICAgICBmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcbiAgICAgICAgICBpZiAoIGNhbGxiYWNrLmFwcGx5KCBvYmpbIGkgXSwgYXJncyApID09PSBmYWxzZSApIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICggaSBpbiBvYmogKSB7XG4gICAgICAgICAgaWYgKCBjYWxsYmFjay5hcHBseSggb2JqWyBpIF0sIGFyZ3MgKSA9PT0gZmFsc2UgKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIC8vIEEgc3BlY2lhbCwgZmFzdCwgY2FzZSBmb3IgdGhlIG1vc3QgY29tbW9uIHVzZSBvZiBlYWNoXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICggaXNBcnJheSApIHtcbiAgICAgICAgZm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgaWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoIGkgaW4gb2JqICkge1xuICAgICAgICAgIGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbiAgfSxcblxuICAvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMVxuICB0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcbiAgICByZXR1cm4gdGV4dCA9PSBudWxsID9cbiAgICAgIFwiXCIgOlxuICAgICAgKCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG4gIH0sXG5cbiAgLy8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuICBtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG4gICAgdmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cbiAgICBpZiAoIGFyciAhPSBudWxsICkge1xuICAgICAgaWYgKCBpc0FycmF5bGlrZSggT2JqZWN0KGFycikgKSApIHtcbiAgICAgICAgalF1ZXJ5Lm1lcmdlKCByZXQsXG4gICAgICAgICAgdHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG4gICAgICAgICAgWyBhcnIgXSA6IGFyclxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHVzaC5jYWxsKCByZXQsIGFyciApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgaW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcbiAgICByZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG4gIH0sXG5cbiAgLy8gU3VwcG9ydDogQW5kcm9pZDw0LjEsIFBoYW50b21KUzwyXG4gIC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcbiAgbWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuICAgIHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcbiAgICAgIGogPSAwLFxuICAgICAgaSA9IGZpcnN0Lmxlbmd0aDtcblxuICAgIGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuICAgICAgZmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG4gICAgfVxuXG4gICAgZmlyc3QubGVuZ3RoID0gaTtcblxuICAgIHJldHVybiBmaXJzdDtcbiAgfSxcblxuICBncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG4gICAgdmFyIGNhbGxiYWNrSW52ZXJzZSxcbiAgICAgIG1hdGNoZXMgPSBbXSxcbiAgICAgIGkgPSAwLFxuICAgICAgbGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuICAgICAgY2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG4gICAgLy8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuICAgIC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG4gICAgZm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG4gICAgICBjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcbiAgICAgIGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcbiAgICAgICAgbWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoZXM7XG4gIH0sXG5cbiAgLy8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG4gIG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuICAgIHZhciB2YWx1ZSxcbiAgICAgIGkgPSAwLFxuICAgICAgbGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuICAgICAgaXNBcnJheSA9IGlzQXJyYXlsaWtlKCBlbGVtcyApLFxuICAgICAgcmV0ID0gW107XG5cbiAgICAvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuICAgIGlmICggaXNBcnJheSApIHtcbiAgICAgIGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuICAgICAgICB2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuICAgICAgICBpZiAoIHZhbHVlICE9IG51bGwgKSB7XG4gICAgICAgICAgcmV0LnB1c2goIHZhbHVlICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoIGkgaW4gZWxlbXMgKSB7XG4gICAgICAgIHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG4gICAgICAgIGlmICggdmFsdWUgIT0gbnVsbCApIHtcbiAgICAgICAgICByZXQucHVzaCggdmFsdWUgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcbiAgICByZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG4gIH0sXG5cbiAgLy8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG4gIGd1aWQ6IDEsXG5cbiAgLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4gIC8vIGFyZ3VtZW50cy5cbiAgcHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcbiAgICB2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuICAgIGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG4gICAgICB0bXAgPSBmblsgY29udGV4dCBdO1xuICAgICAgY29udGV4dCA9IGZuO1xuICAgICAgZm4gPSB0bXA7XG4gICAgfVxuXG4gICAgLy8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcbiAgICAvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuICAgIGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBTaW11bGF0ZWQgYmluZFxuICAgIGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcbiAgICBwcm94eSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG4gICAgfTtcblxuICAgIC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuICAgIHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG4gICAgcmV0dXJuIHByb3h5O1xuICB9LFxuXG4gIG5vdzogRGF0ZS5ub3csXG5cbiAgLy8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG4gIC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG4gIHN1cHBvcnQ6IHN1cHBvcnRcbn0pO1xuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvclwiLnNwbGl0KFwiIFwiKSxcbmZ1bmN0aW9uKGksIG5hbWUpIHtcbiAgY2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59KTtcblxuZnVuY3Rpb24gaXNBcnJheWxpa2UoIG9iaiApIHtcbiAgdmFyIGxlbmd0aCA9IG9iai5sZW5ndGgsXG4gICAgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblxuICBpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICggb2JqLm5vZGVUeXBlID09PSAxICYmIGxlbmd0aCApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG4gICAgdHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4xLjFcbiAqIGh0dHA6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IDIwMDgsIDIwMTQgalF1ZXJ5IEZvdW5kYXRpb24sIEluYy4gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNC0xMi0xNVxuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG4gIHN1cHBvcnQsXG4gIEV4cHIsXG4gIGdldFRleHQsXG4gIGlzWE1MLFxuICB0b2tlbml6ZSxcbiAgY29tcGlsZSxcbiAgc2VsZWN0LFxuICBvdXRlcm1vc3RDb250ZXh0LFxuICBzb3J0SW5wdXQsXG4gIGhhc0R1cGxpY2F0ZSxcblxuICAvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG4gIHNldERvY3VtZW50LFxuICBkb2N1bWVudCxcbiAgZG9jRWxlbSxcbiAgZG9jdW1lbnRJc0hUTUwsXG4gIHJidWdneVFTQSxcbiAgcmJ1Z2d5TWF0Y2hlcyxcbiAgbWF0Y2hlcyxcbiAgY29udGFpbnMsXG5cbiAgLy8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuICBleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuICBwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG4gIGRpcnJ1bnMgPSAwLFxuICBkb25lID0gMCxcbiAgY2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG4gIHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuICBjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcbiAgc29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG4gICAgaWYgKCBhID09PSBiICkge1xuICAgICAgaGFzRHVwbGljYXRlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sXG5cbiAgLy8gR2VuZXJhbC1wdXJwb3NlIGNvbnN0YW50c1xuICBNQVhfTkVHQVRJVkUgPSAxIDw8IDMxLFxuXG4gIC8vIEluc3RhbmNlIG1ldGhvZHNcbiAgaGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcbiAgYXJyID0gW10sXG4gIHBvcCA9IGFyci5wb3AsXG4gIHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG4gIHB1c2ggPSBhcnIucHVzaCxcbiAgc2xpY2UgPSBhcnIuc2xpY2UsXG4gIC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuICAvLyBodHRwOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcbiAgaW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuICAgIHZhciBpID0gMCxcbiAgICAgIGxlbiA9IGxpc3QubGVuZ3RoO1xuICAgIGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuICAgICAgaWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9LFxuXG4gIGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG4gIC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuICB3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG4gIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuICBpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXFxceDAwLVxcXFx4YTBdKStcIixcblxuICAvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcbiAgYXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcbiAgICAvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuICAgIFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG4gICAgLy8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcbiAgICBcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG4gICAgXCIqXFxcXF1cIixcblxuICBwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcbiAgICAvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuICAgIC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuICAgIFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuICAgIC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuICAgIFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcbiAgICAvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG4gICAgXCIuKlwiICtcbiAgICBcIilcXFxcKXwpXCIsXG5cbiAgLy8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuICByd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcbiAgcnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG4gIHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuICByY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblxuICByYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxuXG4gIHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG4gIHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuICBtYXRjaEV4cHIgPSB7XG4gICAgXCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG4gICAgXCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuICAgIFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcbiAgICBcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG4gICAgXCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG4gICAgXCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcbiAgICAgIFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG4gICAgICBcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcbiAgICBcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcbiAgICAvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcbiAgICAvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG4gICAgXCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcbiAgICAgIHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuICB9LFxuXG4gIHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuICByaGVhZGVyID0gL15oXFxkJC9pLFxuXG4gIHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG4gIC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuICBycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cbiAgcnNpYmxpbmcgPSAvWyt+XS8sXG4gIHJlc2NhcGUgPSAvJ3xcXFxcL2csXG5cbiAgLy8gQ1NTIGVzY2FwZXMgaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuICBydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuICBmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG4gICAgdmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcbiAgICAvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuICAgIC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcbiAgICAvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcbiAgICByZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG4gICAgICBlc2NhcGVkIDpcbiAgICAgIGhpZ2ggPCAwID9cbiAgICAgICAgLy8gQk1QIGNvZGVwb2ludFxuICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcbiAgICAgICAgLy8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG4gICAgICAgIFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuICB9LFxuXG4gIC8vIFVzZWQgZm9yIGlmcmFtZXNcbiAgLy8gU2VlIHNldERvY3VtZW50KClcbiAgLy8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG4gIC8vIGVycm9yIGluIElFXG4gIHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcbiAgICBzZXREb2N1bWVudCgpO1xuICB9O1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcbiAgcHVzaC5hcHBseShcbiAgICAoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG4gICAgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcbiAgKTtcbiAgLy8gU3VwcG9ydDogQW5kcm9pZDw0LjBcbiAgLy8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuICBhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG4gIHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuICAgIC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG4gICAgZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuICAgICAgcHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG4gICAgfSA6XG5cbiAgICAvLyBTdXBwb3J0OiBJRTw5XG4gICAgLy8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuICAgIGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcbiAgICAgIHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcbiAgICAgICAgaSA9IDA7XG4gICAgICAvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcbiAgICAgIHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cbiAgICAgIHRhcmdldC5sZW5ndGggPSBqIC0gMTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG4gIHZhciBtYXRjaCwgZWxlbSwgbSwgbm9kZVR5cGUsXG4gICAgLy8gUVNBIHZhcnNcbiAgICBpLCBncm91cHMsIG9sZCwgbmlkLCBuZXdDb250ZXh0LCBuZXdTZWxlY3RvcjtcblxuICBpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuICAgIHNldERvY3VtZW50KCBjb250ZXh0ICk7XG4gIH1cblxuICBjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcbiAgcmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cbiAgaWYgKCAhc2VsZWN0b3IgfHwgdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG5cbiAgaWYgKCAobm9kZVR5cGUgPSBjb250ZXh0Lm5vZGVUeXBlKSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgaWYgKCBkb2N1bWVudElzSFRNTCAmJiAhc2VlZCApIHtcblxuICAgIC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgd2hlbiBwb3NzaWJsZSAoZS5nLiwgbm90IHVuZGVyIERvY3VtZW50RnJhZ21lbnQpXG4gICAgaWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcbiAgICAgIC8vIFNwZWVkLXVwOiBTaXp6bGUoXCIjSURcIilcbiAgICAgIGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG4gICAgICAgIGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG4gICAgICAgICAgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKTtcbiAgICAgICAgICAvLyBDaGVjayBwYXJlbnROb2RlIHRvIGNhdGNoIHdoZW4gQmxhY2tiZXJyeSA0LjYgcmV0dXJuc1xuICAgICAgICAgIC8vIG5vZGVzIHRoYXQgYXJlIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgKGpRdWVyeSAjNjk2MylcbiAgICAgICAgICBpZiAoIGVsZW0gJiYgZWxlbS5wYXJlbnROb2RlICkge1xuICAgICAgICAgICAgLy8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIElFLCBPcGVyYSwgYW5kIFdlYmtpdCByZXR1cm4gaXRlbXNcbiAgICAgICAgICAgIC8vIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuICAgICAgICAgICAgaWYgKCBlbGVtLmlkID09PSBtICkge1xuICAgICAgICAgICAgICByZXN1bHRzLnB1c2goIGVsZW0gKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBDb250ZXh0IGlzIG5vdCBhIGRvY3VtZW50XG4gICAgICAgICAgaWYgKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgJiYgKGVsZW0gPSBjb250ZXh0Lm93bmVyRG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcbiAgICAgICAgICAgIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiYgZWxlbS5pZCA9PT0gbSApIHtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaCggZWxlbSApO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIC8vIFNwZWVkLXVwOiBTaXp6bGUoXCJUQUdcIilcbiAgICAgIH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuICAgICAgICBwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuXG4gICAgICAvLyBTcGVlZC11cDogU2l6emxlKFwiLkNMQVNTXCIpXG4gICAgICB9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG4gICAgICAgIHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFFTQSBwYXRoXG4gICAgaWYgKCBzdXBwb3J0LnFzYSAmJiAoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkge1xuICAgICAgbmlkID0gb2xkID0gZXhwYW5kbztcbiAgICAgIG5ld0NvbnRleHQgPSBjb250ZXh0O1xuICAgICAgbmV3U2VsZWN0b3IgPSBub2RlVHlwZSAhPT0gMSAmJiBzZWxlY3RvcjtcblxuICAgICAgLy8gcVNBIHdvcmtzIHN0cmFuZ2VseSBvbiBFbGVtZW50LXJvb3RlZCBxdWVyaWVzXG4gICAgICAvLyBXZSBjYW4gd29yayBhcm91bmQgdGhpcyBieSBzcGVjaWZ5aW5nIGFuIGV4dHJhIElEIG9uIHRoZSByb290XG4gICAgICAvLyBhbmQgd29ya2luZyB1cCBmcm9tIHRoZXJlIChUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhlIHRlY2huaXF1ZSlcbiAgICAgIC8vIElFIDggZG9lc24ndCB3b3JrIG9uIG9iamVjdCBlbGVtZW50c1xuICAgICAgaWYgKCBub2RlVHlwZSA9PT0gMSAmJiBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XG4gICAgICAgIGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXG4gICAgICAgIGlmICggKG9sZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKFwiaWRcIikpICkge1xuICAgICAgICAgIG5pZCA9IG9sZC5yZXBsYWNlKCByZXNjYXBlLCBcIlxcXFwkJlwiICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgbmlkICk7XG4gICAgICAgIH1cbiAgICAgICAgbmlkID0gXCJbaWQ9J1wiICsgbmlkICsgXCInXSBcIjtcblxuICAgICAgICBpID0gZ3JvdXBzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBpLS0gKSB7XG4gICAgICAgICAgZ3JvdXBzW2ldID0gbmlkICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG4gICAgICAgIH1cbiAgICAgICAgbmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHQ7XG4gICAgICAgIG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oXCIsXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIG5ld1NlbGVjdG9yICkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHB1c2guYXBwbHkoIHJlc3VsdHMsXG4gICAgICAgICAgICBuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICB9IGNhdGNoKHFzYUVycm9yKSB7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgaWYgKCAhb2xkICkge1xuICAgICAgICAgICAgY29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBBbGwgb3RoZXJzXG4gIHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge0Z1bmN0aW9uKHN0cmluZywgT2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcbiAgdmFyIGtleXMgPSBbXTtcblxuICBmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcbiAgICAvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuICAgIGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcbiAgICAgIC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuICAgICAgZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcbiAgICB9XG4gICAgcmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcbiAgfVxuICByZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG4gIGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuICByZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBkaXYgYW5kIGV4cGVjdHMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICB0cnkge1xuICAgIHJldHVybiAhIWZuKCBkaXYgKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcbiAgICBpZiAoIGRpdi5wYXJlbnROb2RlICkge1xuICAgICAgZGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGRpdiApO1xuICAgIH1cbiAgICAvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuICAgIGRpdiA9IG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcbiAgdmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcbiAgICBpID0gYXR0cnMubGVuZ3RoO1xuXG4gIHdoaWxlICggaS0tICkge1xuICAgIEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuICB9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG4gIHZhciBjdXIgPSBiICYmIGEsXG4gICAgZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcbiAgICAgICggfmIuc291cmNlSW5kZXggfHwgTUFYX05FR0FUSVZFICkgLVxuICAgICAgKCB+YS5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKTtcblxuICAvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcbiAgaWYgKCBkaWZmICkge1xuICAgIHJldHVybiBkaWZmO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcbiAgaWYgKCBjdXIgKSB7XG4gICAgd2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcbiAgICAgIGlmICggY3VyID09PSBiICkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG4gIHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICB2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcbiAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgIHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcbiAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcbiAgcmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG4gICAgYXJndW1lbnQgPSArYXJndW1lbnQ7XG4gICAgcmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcbiAgICAgIHZhciBqLFxuICAgICAgICBtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuICAgICAgICBpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuICAgICAgLy8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG4gICAgICB3aGlsZSAoIGktLSApIHtcbiAgICAgICAgaWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcbiAgICAgICAgICBzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcbiAgcmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICAvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XG4gIC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxuICB2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcbiAgcmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuICB2YXIgaGFzQ29tcGFyZSwgcGFyZW50LFxuICAgIGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuICAvLyBJZiBubyBkb2N1bWVudCBhbmQgZG9jdW1lbnRFbGVtZW50IGlzIGF2YWlsYWJsZSwgcmV0dXJuXG4gIGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50O1xuICB9XG5cbiAgLy8gU2V0IG91ciBkb2N1bWVudFxuICBkb2N1bWVudCA9IGRvYztcbiAgZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gIHBhcmVudCA9IGRvYy5kZWZhdWx0VmlldztcblxuICAvLyBTdXBwb3J0OiBJRT44XG4gIC8vIElmIGlmcmFtZSBkb2N1bWVudCBpcyBhc3NpZ25lZCB0byBcImRvY3VtZW50XCIgdmFyaWFibGUgYW5kIGlmIGlmcmFtZSBoYXMgYmVlbiByZWxvYWRlZCxcbiAgLy8gSUUgd2lsbCB0aHJvdyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBhY2Nlc3NpbmcgXCJkb2N1bWVudFwiIHZhcmlhYmxlLCBzZWUgalF1ZXJ5ICMxMzkzNlxuICAvLyBJRTYtOCBkbyBub3Qgc3VwcG9ydCB0aGUgZGVmYXVsdFZpZXcgcHJvcGVydHkgc28gcGFyZW50IHdpbGwgYmUgdW5kZWZpbmVkXG4gIGlmICggcGFyZW50ICYmIHBhcmVudCAhPT0gcGFyZW50LnRvcCApIHtcbiAgICAvLyBJRTExIGRvZXMgbm90IGhhdmUgYXR0YWNoRXZlbnQsIHNvIGFsbCBtdXN0IHN1ZmZlclxuICAgIGlmICggcGFyZW50LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG4gICAgICBwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcbiAgICB9IGVsc2UgaWYgKCBwYXJlbnQuYXR0YWNoRXZlbnQgKSB7XG4gICAgICBwYXJlbnQuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuICAgIH1cbiAgfVxuXG4gIC8qIFN1cHBvcnQgdGVzdHNcbiAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuICBkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jICk7XG5cbiAgLyogQXR0cmlidXRlc1xuICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbiAgLy8gU3VwcG9ydDogSUU8OFxuICAvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcbiAgLy8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG4gIHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuICAgIGRpdi5jbGFzc05hbWUgPSBcImlcIjtcbiAgICByZXR1cm4gIWRpdi5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG4gIH0pO1xuXG4gIC8qIGdldEVsZW1lbnQocylCeSpcbiAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4gIC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcbiAgc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuICAgIGRpdi5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcbiAgICByZXR1cm4gIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuICB9KTtcblxuICAvLyBTdXBwb3J0OiBJRTw5XG4gIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuICAvLyBTdXBwb3J0OiBJRTwxMFxuICAvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcbiAgLy8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbWF0aWNhbGx5LXNldCBuYW1lcyxcbiAgLy8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG4gIHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuICAgIGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGRpdiApLmlkID0gZXhwYW5kbztcbiAgICByZXR1cm4gIWRvYy5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jLmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuICB9KTtcblxuICAvLyBJRCBmaW5kIGFuZCBmaWx0ZXJcbiAgaWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG4gICAgRXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG4gICAgICBpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuICAgICAgICB2YXIgbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG4gICAgICAgIC8vIENoZWNrIHBhcmVudE5vZGUgdG8gY2F0Y2ggd2hlbiBCbGFja2JlcnJ5IDQuNiByZXR1cm5zXG4gICAgICAgIC8vIG5vZGVzIHRoYXQgYXJlIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgIzY5NjNcbiAgICAgICAgcmV0dXJuIG0gJiYgbS5wYXJlbnROb2RlID8gWyBtIF0gOiBbXTtcbiAgICAgIH1cbiAgICB9O1xuICAgIEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG4gICAgICB2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgcmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcbiAgICAgIH07XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdXBwb3J0OiBJRTYvN1xuICAgIC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcbiAgICBkZWxldGUgRXhwci5maW5kW1wiSURcIl07XG5cbiAgICBFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcbiAgICAgIHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgICB2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG4gICAgICAgIHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gIC8vIFRhZ1xuICBFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cbiAgICBmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuICAgICAgaWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG4gICAgICAvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cbiAgICAgIH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuICAgICAgICByZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcbiAgICAgIH1cbiAgICB9IDpcblxuICAgIGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG4gICAgICB2YXIgZWxlbSxcbiAgICAgICAgdG1wID0gW10sXG4gICAgICAgIGkgPSAwLFxuICAgICAgICAvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG4gICAgICAgIHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuICAgICAgLy8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuICAgICAgaWYgKCB0YWcgPT09IFwiKlwiICkge1xuICAgICAgICB3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcbiAgICAgICAgICBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG4gICAgICAgICAgICB0bXAucHVzaCggZWxlbSApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0bXA7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9O1xuXG4gIC8vIENsYXNzXG4gIEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG4gICAgaWYgKCBkb2N1bWVudElzSFRNTCApIHtcbiAgICAgIHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuICAgIH1cbiAgfTtcblxuICAvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuICAvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cbiAgLy8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcbiAgcmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG4gIC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG4gIC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuICAvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG4gIC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG4gIC8vIFNlZSBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuICByYnVnZ3lRU0EgPSBbXTtcblxuICBpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jLnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG4gICAgLy8gQnVpbGQgUVNBIHJlZ2V4XG4gICAgLy8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuICAgIGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuICAgICAgLy8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuICAgICAgLy8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG4gICAgICAvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcbiAgICAgIC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG4gICAgICAvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuICAgICAgZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG4gICAgICAgIFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxmXScgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuICAgICAgICBcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cbiAgICAgIC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcbiAgICAgIC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cbiAgICAgIC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuICAgICAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cbiAgICAgIGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG4gICAgICAgIHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG4gICAgICB9XG5cbiAgICAgIC8vIFN1cHBvcnQ6IElFOFxuICAgICAgLy8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuICAgICAgaWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcbiAgICAgICAgcmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcbiAgICAgIH1cblxuICAgICAgLy8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuMissIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS43K1xuICAgICAgaWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG4gICAgICAgIHJidWdneVFTQS5wdXNoKFwifj1cIik7XG4gICAgICB9XG5cbiAgICAgIC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG4gICAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuICAgICAgLy8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcbiAgICAgIGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuICAgICAgICByYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xuICAgICAgfVxuXG4gICAgICAvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuICAgICAgLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuICAgICAgLy8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2liaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG4gICAgICBpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcbiAgICAgICAgcmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuICAgICAgLy8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG4gICAgICAvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcbiAgICAgIHZhciBpbnB1dCA9IGRvYy5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG4gICAgICBkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuICAgICAgLy8gU3VwcG9ydDogSUU4XG4gICAgICAvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcbiAgICAgIGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG4gICAgICAgIHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcbiAgICAgIH1cblxuICAgICAgLy8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcbiAgICAgIC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG4gICAgICBpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCApIHtcbiAgICAgICAgcmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuICAgICAgfVxuXG4gICAgICAvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuICAgICAgZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuICAgICAgcmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG4gICAgZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcbiAgICBkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuICAgIGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuICAgIGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG4gICAgYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG4gICAgICAvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3JcbiAgICAgIC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG4gICAgICBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBkaXYsIFwiZGl2XCIgKTtcblxuICAgICAgLy8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuICAgICAgLy8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuICAgICAgbWF0Y2hlcy5jYWxsKCBkaXYsIFwiW3MhPScnXTp4XCIgKTtcbiAgICAgIHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG4gICAgfSk7XG4gIH1cblxuICByYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuICByYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG4gIC8qIENvbnRhaW5zXG4gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbiAgaGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG4gIC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuICAvLyBQdXJwb3NlZnVsbHkgZG9lcyBub3QgaW1wbGVtZW50IGluY2x1c2l2ZSBkZXNjZW5kZW50XG4gIC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG4gIGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG4gICAgZnVuY3Rpb24oIGEsIGIgKSB7XG4gICAgICB2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuICAgICAgICBidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcbiAgICAgIHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuICAgICAgICBhZG93bi5jb250YWlucyA/XG4gICAgICAgICAgYWRvd24uY29udGFpbnMoIGJ1cCApIDpcbiAgICAgICAgICBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcbiAgICAgICkpO1xuICAgIH0gOlxuICAgIGZ1bmN0aW9uKCBhLCBiICkge1xuICAgICAgaWYgKCBiICkge1xuICAgICAgICB3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcbiAgICAgICAgICBpZiAoIGIgPT09IGEgKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gIC8qIFNvcnRpbmdcbiAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4gIC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcbiAgc29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG4gIGZ1bmN0aW9uKCBhLCBiICkge1xuXG4gICAgLy8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcbiAgICBpZiAoIGEgPT09IGIgKSB7XG4gICAgICBoYXNEdXBsaWNhdGUgPSB0cnVlO1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLy8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuICAgIHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcbiAgICBpZiAoIGNvbXBhcmUgKSB7XG4gICAgICByZXR1cm4gY29tcGFyZTtcbiAgICB9XG5cbiAgICAvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG4gICAgY29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cbiAgICAgIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cbiAgICAgIC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuICAgICAgMTtcblxuICAgIC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuICAgIGlmICggY29tcGFyZSAmIDEgfHxcbiAgICAgICghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuICAgICAgLy8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG4gICAgICBpZiAoIGEgPT09IGRvYyB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICBpZiAoIGIgPT09IGRvYyB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cblxuICAgICAgLy8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcbiAgICAgIHJldHVybiBzb3J0SW5wdXQgP1xuICAgICAgICAoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG4gICAgICAgIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuICB9IDpcbiAgZnVuY3Rpb24oIGEsIGIgKSB7XG4gICAgLy8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuICAgIGlmICggYSA9PT0gYiApIHtcbiAgICAgIGhhc0R1cGxpY2F0ZSA9IHRydWU7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICB2YXIgY3VyLFxuICAgICAgaSA9IDAsXG4gICAgICBhdXAgPSBhLnBhcmVudE5vZGUsXG4gICAgICBidXAgPSBiLnBhcmVudE5vZGUsXG4gICAgICBhcCA9IFsgYSBdLFxuICAgICAgYnAgPSBbIGIgXTtcblxuICAgIC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG4gICAgaWYgKCAhYXVwIHx8ICFidXAgKSB7XG4gICAgICByZXR1cm4gYSA9PT0gZG9jID8gLTEgOlxuICAgICAgICBiID09PSBkb2MgPyAxIDpcbiAgICAgICAgYXVwID8gLTEgOlxuICAgICAgICBidXAgPyAxIDpcbiAgICAgICAgc29ydElucHV0ID9cbiAgICAgICAgKCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuICAgICAgICAwO1xuXG4gICAgLy8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcbiAgICB9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcbiAgICAgIHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuICAgIGN1ciA9IGE7XG4gICAgd2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuICAgICAgYXAudW5zaGlmdCggY3VyICk7XG4gICAgfVxuICAgIGN1ciA9IGI7XG4gICAgd2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuICAgICAgYnAudW5zaGlmdCggY3VyICk7XG4gICAgfVxuXG4gICAgLy8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcbiAgICB3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4gaSA/XG4gICAgICAvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3JcbiAgICAgIHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG4gICAgICAvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3RcbiAgICAgIGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG4gICAgICBicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG4gICAgICAwO1xuICB9O1xuXG4gIHJldHVybiBkb2M7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcbiAgcmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcbiAgLy8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG4gIGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcbiAgICBzZXREb2N1bWVudCggZWxlbSApO1xuICB9XG5cbiAgLy8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkXG4gIGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsIFwiPSckMSddXCIgKTtcblxuICBpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG4gICAgKCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuICAgICggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuICAgIHRyeSB7XG4gICAgICB2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cbiAgICAgIC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcbiAgICAgIGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcbiAgICAgICAgICAvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuICAgICAgICAgIC8vIGZyYWdtZW50IGluIElFIDlcbiAgICAgICAgICBlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cblxuICByZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG4gIC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuICBpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG4gICAgc2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcbiAgfVxuICByZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG4gIC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuICBpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG4gICAgc2V0RG9jdW1lbnQoIGVsZW0gKTtcbiAgfVxuXG4gIHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG4gICAgLy8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG4gICAgdmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuICAgICAgZm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcbiAgICAgIHVuZGVmaW5lZDtcblxuICByZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuICAgIHZhbCA6XG4gICAgc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG4gICAgICBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcbiAgICAgICh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuICAgICAgICB2YWwudmFsdWUgOlxuICAgICAgICBudWxsO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcbiAgdGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG4gIHZhciBlbGVtLFxuICAgIGR1cGxpY2F0ZXMgPSBbXSxcbiAgICBqID0gMCxcbiAgICBpID0gMDtcblxuICAvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG4gIGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG4gIHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuICByZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG4gIGlmICggaGFzRHVwbGljYXRlICkge1xuICAgIHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuICAgICAgaWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG4gICAgICAgIGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUgKCBqLS0gKSB7XG4gICAgICByZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG4gICAgfVxuICB9XG5cbiAgLy8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG4gIHNvcnRJbnB1dCA9IG51bGw7XG5cbiAgcmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIHZhciBub2RlLFxuICAgIHJldCA9IFwiXCIsXG4gICAgaSA9IDAsXG4gICAgbm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG4gIGlmICggIW5vZGVUeXBlICkge1xuICAgIC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG4gICAgd2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG4gICAgICAvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuICAgICAgcmV0ICs9IGdldFRleHQoIG5vZGUgKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcbiAgICAvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG4gICAgLy8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1MylcbiAgICBpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuICAgICAgcmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuICAgICAgZm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG4gICAgICAgIHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcbiAgICByZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG4gIH1cbiAgLy8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG4gIC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuICBjYWNoZUxlbmd0aDogNTAsXG5cbiAgY3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cbiAgbWF0Y2g6IG1hdGNoRXhwcixcblxuICBhdHRySGFuZGxlOiB7fSxcblxuICBmaW5kOiB7fSxcblxuICByZWxhdGl2ZToge1xuICAgIFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG4gICAgXCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuICAgIFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcbiAgICBcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuICB9LFxuXG4gIHByZUZpbHRlcjoge1xuICAgIFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG4gICAgICBtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cbiAgICAgIC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG4gICAgICBtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cbiAgICAgIGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcbiAgICAgICAgbWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuICAgIH0sXG5cbiAgICBcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcbiAgICAgIC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuICAgICAgICAxIHR5cGUgKG9ubHl8bnRofC4uLilcbiAgICAgICAgMiB3aGF0IChjaGlsZHxvZi10eXBlKVxuICAgICAgICAzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuICAgICAgICA0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcbiAgICAgICAgNSBzaWduIG9mIHhuLWNvbXBvbmVudFxuICAgICAgICA2IHggb2YgeG4tY29tcG9uZW50XG4gICAgICAgIDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuICAgICAgICA4IHkgb2YgeS1jb21wb25lbnRcbiAgICAgICovXG4gICAgICBtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcbiAgICAgICAgLy8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcbiAgICAgICAgaWYgKCAhbWF0Y2hbM10gKSB7XG4gICAgICAgICAgU2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG4gICAgICAgIC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcbiAgICAgICAgbWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcbiAgICAgICAgbWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG4gICAgICAvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcbiAgICAgIH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuICAgICAgICBTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9LFxuXG4gICAgXCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuICAgICAgdmFyIGV4Y2VzcyxcbiAgICAgICAgdW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cbiAgICAgIGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG4gICAgICBpZiAoIG1hdGNoWzNdICkge1xuICAgICAgICBtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cbiAgICAgIC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG4gICAgICB9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcbiAgICAgICAgLy8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcbiAgICAgICAgKGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuICAgICAgICAvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcbiAgICAgICAgKGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cbiAgICAgICAgLy8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcbiAgICAgICAgbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG4gICAgICAgIG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcbiAgICAgIHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuICAgIH1cbiAgfSxcblxuICBmaWx0ZXI6IHtcblxuICAgIFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuICAgICAgdmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG4gICAgICByZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuICAgICAgICBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG4gICAgICB2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cbiAgICAgIHJldHVybiBwYXR0ZXJuIHx8XG4gICAgICAgIChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcbiAgICAgICAgY2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgICByZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgXCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG4gICAgICAgIGlmICggcmVzdWx0ID09IG51bGwgKSB7XG4gICAgICAgICAgcmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCAhb3BlcmF0b3IgKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQgKz0gXCJcIjtcblxuICAgICAgICByZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG4gICAgICAgICAgb3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuICAgICAgICAgIG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG4gICAgICAgICAgb3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuICAgICAgICAgIG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuICAgICAgICAgIG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuICAgICAgICAgIG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcbiAgICAgICAgICBmYWxzZTtcbiAgICAgIH07XG4gICAgfSxcblxuICAgIFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcbiAgICAgIHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG4gICAgICAgIGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcbiAgICAgICAgb2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cbiAgICAgIHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuICAgICAgICAvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG4gICAgICAgIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgICAgIHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcbiAgICAgICAgfSA6XG5cbiAgICAgICAgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcbiAgICAgICAgICB2YXIgY2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIGRpZmYsIG5vZGVJbmRleCwgc3RhcnQsXG4gICAgICAgICAgICBkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuICAgICAgICAgICAgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuICAgICAgICAgICAgbmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICB1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZTtcblxuICAgICAgICAgIGlmICggcGFyZW50ICkge1xuXG4gICAgICAgICAgICAvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG4gICAgICAgICAgICBpZiAoIHNpbXBsZSApIHtcbiAgICAgICAgICAgICAgd2hpbGUgKCBkaXIgKSB7XG4gICAgICAgICAgICAgICAgbm9kZSA9IGVsZW07XG4gICAgICAgICAgICAgICAgd2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcbiAgICAgICAgICAgICAgICAgIGlmICggb2ZUeXBlID8gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDogbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcbiAgICAgICAgICAgICAgICBzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cbiAgICAgICAgICAgIC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG4gICAgICAgICAgICBpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG4gICAgICAgICAgICAgIC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuICAgICAgICAgICAgICBvdXRlckNhY2hlID0gcGFyZW50WyBleHBhbmRvIF0gfHwgKHBhcmVudFsgZXhwYW5kbyBdID0ge30pO1xuICAgICAgICAgICAgICBjYWNoZSA9IG91dGVyQ2FjaGVbIHR5cGUgXSB8fCBbXTtcbiAgICAgICAgICAgICAgbm9kZUluZGV4ID0gY2FjaGVbMF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbMV07XG4gICAgICAgICAgICAgIGRpZmYgPSBjYWNoZVswXSA9PT0gZGlycnVucyAmJiBjYWNoZVsyXTtcbiAgICAgICAgICAgICAgbm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cbiAgICAgICAgICAgICAgd2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuICAgICAgICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG4gICAgICAgICAgICAgICAgKGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuICAgICAgICAgICAgICAgIGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcbiAgICAgICAgICAgICAgICAgIG91dGVyQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB1c2VDYWNoZSAmJiAoY2FjaGUgPSAoZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSkpWyB0eXBlIF0pICYmIGNhY2hlWzBdID09PSBkaXJydW5zICkge1xuICAgICAgICAgICAgICBkaWZmID0gY2FjaGVbMV07XG5cbiAgICAgICAgICAgIC8vIHhtbCA6bnRoLWNoaWxkKC4uLikgb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcbiAgICAgICAgICAgICAgd2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcbiAgICAgICAgICAgICAgICAoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuICAgICAgICAgICAgICAgIGlmICggKCBvZlR5cGUgPyBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOiBub2RlLm5vZGVUeXBlID09PSAxICkgJiYgKytkaWZmICkge1xuICAgICAgICAgICAgICAgICAgLy8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgaWYgKCB1c2VDYWNoZSApIHtcbiAgICAgICAgICAgICAgICAgICAgKG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pKVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGlmICggbm9kZSA9PT0gZWxlbSApIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG4gICAgICAgICAgICBkaWZmIC09IGxhc3Q7XG4gICAgICAgICAgICByZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuICAgICAgLy8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG4gICAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG4gICAgICAvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuICAgICAgLy8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuICAgICAgdmFyIGFyZ3MsXG4gICAgICAgIGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcbiAgICAgICAgICBTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG4gICAgICAvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG4gICAgICAvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuICAgICAgLy8ganVzdCBhcyBTaXp6bGUgZG9lc1xuICAgICAgaWYgKCBmblsgZXhwYW5kbyBdICkge1xuICAgICAgICByZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG4gICAgICB9XG5cbiAgICAgIC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuICAgICAgaWYgKCBmbi5sZW5ndGggPiAxICkge1xuICAgICAgICBhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcbiAgICAgICAgcmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG4gICAgICAgICAgbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuICAgICAgICAgICAgdmFyIGlkeCxcbiAgICAgICAgICAgICAgbWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuICAgICAgICAgICAgICBpID0gbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoIGktLSApIHtcbiAgICAgICAgICAgICAgaWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xuICAgICAgICAgICAgICBzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pIDpcbiAgICAgICAgICBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgICAgIHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuICAgICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbjtcbiAgICB9XG4gIH0sXG5cbiAgcHNldWRvczoge1xuICAgIC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuICAgIFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG4gICAgICAvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuICAgICAgLy8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcbiAgICAgIC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuICAgICAgdmFyIGlucHV0ID0gW10sXG4gICAgICAgIHJlc3VsdHMgPSBbXSxcbiAgICAgICAgbWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG4gICAgICByZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cbiAgICAgICAgbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XG4gICAgICAgICAgdmFyIGVsZW0sXG4gICAgICAgICAgICB1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG4gICAgICAgICAgICBpID0gc2VlZC5sZW5ndGg7XG5cbiAgICAgICAgICAvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG4gICAgICAgICAgd2hpbGUgKCBpLS0gKSB7XG4gICAgICAgICAgICBpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcbiAgICAgICAgICAgICAgc2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSkgOlxuICAgICAgICBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuICAgICAgICAgIGlucHV0WzBdID0gZWxlbTtcbiAgICAgICAgICBtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG4gICAgICAgICAgLy8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcbiAgICAgICAgICBpbnB1dFswXSA9IG51bGw7XG4gICAgICAgICAgcmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuICAgICAgICB9O1xuICAgIH0pLFxuXG4gICAgXCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgcmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuICAgICAgfTtcbiAgICB9KSxcblxuICAgIFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xuICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgcmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcbiAgICAgIH07XG4gICAgfSksXG5cbiAgICAvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3JcbiAgICAvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuICAgIC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG4gICAgLy8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cbiAgICAvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cbiAgICAvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG4gICAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuICAgIFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuICAgICAgLy8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuICAgICAgaWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuICAgICAgICBTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG4gICAgICB9XG4gICAgICBsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICAgIHZhciBlbGVtTGFuZztcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuICAgICAgICAgICAgZWxlbS5sYW5nIDpcbiAgICAgICAgICAgIGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblxuICAgICAgICAgICAgZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG4gICAgfSksXG5cbiAgICAvLyBNaXNjZWxsYW5lb3VzXG4gICAgXCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICB2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcbiAgICAgIHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcbiAgICB9LFxuXG4gICAgXCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgcmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG4gICAgfSxcblxuICAgIFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICByZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuICAgIH0sXG5cbiAgICAvLyBCb29sZWFuIHByb3BlcnRpZXNcbiAgICBcImVuYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICByZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2U7XG4gICAgfSxcblxuICAgIFwiZGlzYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICByZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgXCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgLy8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG4gICAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuICAgICAgdmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcbiAgICB9LFxuXG4gICAgXCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgIC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcbiAgICAgIC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcbiAgICAgIGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuICAgICAgICBlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG4gICAgfSxcblxuICAgIC8vIENvbnRlbnRzXG4gICAgXCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG4gICAgICAvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG4gICAgICAvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuICAgICAgLy8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuICAgICAgZm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG4gICAgICAgIGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgXCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICByZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG4gICAgfSxcblxuICAgIC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcbiAgICBcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgIHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcbiAgICB9LFxuXG4gICAgXCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgIHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcbiAgICB9LFxuXG4gICAgXCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICB2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG4gICAgfSxcblxuICAgIFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgIHZhciBhdHRyO1xuICAgICAgcmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG4gICAgICAgIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuICAgICAgICAvLyBTdXBwb3J0OiBJRTw4XG4gICAgICAgIC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG4gICAgICAgICggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuICAgIH0sXG5cbiAgICAvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG4gICAgXCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFsgMCBdO1xuICAgIH0pLFxuXG4gICAgXCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuICAgICAgcmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuICAgIH0pLFxuXG4gICAgXCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG4gICAgICByZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG4gICAgfSksXG5cbiAgICBcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICBmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcbiAgICAgICAgbWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaEluZGV4ZXM7XG4gICAgfSksXG5cbiAgICBcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcbiAgICAgIHZhciBpID0gMTtcbiAgICAgIGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuICAgICAgICBtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoSW5kZXhlcztcbiAgICB9KSxcblxuICAgIFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuICAgICAgdmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuICAgICAgZm9yICggOyAtLWkgPj0gMDsgKSB7XG4gICAgICAgIG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2hJbmRleGVzO1xuICAgIH0pLFxuXG4gICAgXCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG4gICAgICB2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG4gICAgICBmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG4gICAgICAgIG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2hJbmRleGVzO1xuICAgIH0pXG4gIH1cbn07XG5cbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG4gIEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG4gIEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG4gIHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuICAgIHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG4gICAgY2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG4gIGlmICggY2FjaGVkICkge1xuICAgIHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG4gIH1cblxuICBzb0ZhciA9IHNlbGVjdG9yO1xuICBncm91cHMgPSBbXTtcbiAgcHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG4gIHdoaWxlICggc29GYXIgKSB7XG5cbiAgICAvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG4gICAgaWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XG4gICAgICBpZiAoIG1hdGNoICkge1xuICAgICAgICAvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuICAgICAgICBzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0ZhcjtcbiAgICAgIH1cbiAgICAgIGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XG4gICAgfVxuXG4gICAgbWF0Y2hlZCA9IGZhbHNlO1xuXG4gICAgLy8gQ29tYmluYXRvcnNcbiAgICBpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcbiAgICAgIG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuICAgICAgdG9rZW5zLnB1c2goe1xuICAgICAgICB2YWx1ZTogbWF0Y2hlZCxcbiAgICAgICAgLy8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG4gICAgICAgIHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG4gICAgICB9KTtcbiAgICAgIHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG4gICAgfVxuXG4gICAgLy8gRmlsdGVyc1xuICAgIGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG4gICAgICBpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG4gICAgICAgIChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuICAgICAgICBtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcbiAgICAgICAgdG9rZW5zLnB1c2goe1xuICAgICAgICAgIHZhbHVlOiBtYXRjaGVkLFxuICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgbWF0Y2hlczogbWF0Y2hcbiAgICAgICAgfSk7XG4gICAgICAgIHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCAhbWF0Y2hlZCApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuICAvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcbiAgLy8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG4gIHJldHVybiBwYXJzZU9ubHkgP1xuICAgIHNvRmFyLmxlbmd0aCA6XG4gICAgc29GYXIgP1xuICAgICAgU2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcbiAgICAgIC8vIENhY2hlIHRoZSB0b2tlbnNcbiAgICAgIHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuICB2YXIgaSA9IDAsXG4gICAgbGVuID0gdG9rZW5zLmxlbmd0aCxcbiAgICBzZWxlY3RvciA9IFwiXCI7XG4gIGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuICAgIHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcbiAgfVxuICByZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG4gIHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcbiAgICBjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBkaXIgPT09IFwicGFyZW50Tm9kZVwiLFxuICAgIGRvbmVOYW1lID0gZG9uZSsrO1xuXG4gIHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cbiAgICAvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcbiAgICBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuICAgICAgd2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcbiAgICAgICAgaWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSA6XG5cbiAgICAvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcbiAgICBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuICAgICAgdmFyIG9sZENhY2hlLCBvdXRlckNhY2hlLFxuICAgICAgICBuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuICAgICAgLy8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gZGlyIGNhY2hpbmdcbiAgICAgIGlmICggeG1sICkge1xuICAgICAgICB3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuICAgICAgICAgIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuICAgICAgICAgICAgaWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuICAgICAgICAgIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuICAgICAgICAgICAgb3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuICAgICAgICAgICAgaWYgKCAob2xkQ2FjaGUgPSBvdXRlckNhY2hlWyBkaXIgXSkgJiZcbiAgICAgICAgICAgICAgb2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuICAgICAgICAgICAgICAvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuICAgICAgICAgICAgICByZXR1cm4gKG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcbiAgICAgICAgICAgICAgb3V0ZXJDYWNoZVsgZGlyIF0gPSBuZXdDYWNoZTtcblxuICAgICAgICAgICAgICAvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcbiAgICAgICAgICAgICAgaWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcbiAgcmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuICAgIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG4gICAgICB2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggaS0tICkge1xuICAgICAgICBpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IDpcbiAgICBtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuICB2YXIgaSA9IDAsXG4gICAgbGVuID0gY29udGV4dHMubGVuZ3RoO1xuICBmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcbiAgICBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuICB9XG4gIHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuICB2YXIgZWxlbSxcbiAgICBuZXdVbm1hdGNoZWQgPSBbXSxcbiAgICBpID0gMCxcbiAgICBsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuICAgIG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG4gIGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuICAgIGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuICAgICAgaWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG4gICAgICAgIG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG4gICAgICAgIGlmICggbWFwcGVkICkge1xuICAgICAgICAgIG1hcC5wdXNoKCBpICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG4gIGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuICAgIHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG4gIH1cbiAgaWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG4gICAgcG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuICB9XG4gIHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcbiAgICB2YXIgdGVtcCwgaSwgZWxlbSxcbiAgICAgIHByZU1hcCA9IFtdLFxuICAgICAgcG9zdE1hcCA9IFtdLFxuICAgICAgcHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuICAgICAgLy8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcbiAgICAgIGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuICAgICAgLy8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG4gICAgICBtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cbiAgICAgICAgY29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuICAgICAgICBlbGVtcyxcblxuICAgICAgbWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuICAgICAgICBwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cbiAgICAgICAgICAvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3NhcnlcbiAgICAgICAgICBbXSA6XG5cbiAgICAgICAgICAvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcbiAgICAgICAgICByZXN1bHRzIDpcbiAgICAgICAgbWF0Y2hlckluO1xuXG4gICAgLy8gRmluZCBwcmltYXJ5IG1hdGNoZXNcbiAgICBpZiAoIG1hdGNoZXIgKSB7XG4gICAgICBtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuICAgIH1cblxuICAgIC8vIEFwcGx5IHBvc3RGaWx0ZXJcbiAgICBpZiAoIHBvc3RGaWx0ZXIgKSB7XG4gICAgICB0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcbiAgICAgIHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuICAgICAgLy8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuICAgICAgaSA9IHRlbXAubGVuZ3RoO1xuICAgICAgd2hpbGUgKCBpLS0gKSB7XG4gICAgICAgIGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcbiAgICAgICAgICBtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIHNlZWQgKSB7XG4gICAgICBpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuICAgICAgICBpZiAoIHBvc3RGaW5kZXIgKSB7XG4gICAgICAgICAgLy8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG4gICAgICAgICAgdGVtcCA9IFtdO1xuICAgICAgICAgIGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoIGktLSApIHtcbiAgICAgICAgICAgIGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcbiAgICAgICAgICAgICAgLy8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcbiAgICAgICAgICAgICAgdGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcbiAgICAgICAgaSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoIGktLSApIHtcbiAgICAgICAgICBpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcbiAgICAgICAgICAgICh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuICAgICAgICAgICAgc2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgLy8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG4gICAgfSBlbHNlIHtcbiAgICAgIG1hdGNoZXJPdXQgPSBjb25kZW5zZShcbiAgICAgICAgbWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG4gICAgICAgICAgbWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcbiAgICAgICAgICBtYXRjaGVyT3V0XG4gICAgICApO1xuICAgICAgaWYgKCBwb3N0RmluZGVyICkge1xuICAgICAgICBwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuICB2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuICAgIGxlbiA9IHRva2Vucy5sZW5ndGgsXG4gICAgbGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcbiAgICBpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuICAgIGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuICAgIC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG4gICAgbWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICByZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuICAgIH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcbiAgICBtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgIHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuICAgIH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcbiAgICBtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcbiAgICAgIHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuICAgICAgICAoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuICAgICAgICAgIG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuICAgICAgICAgIG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcbiAgICAgIC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuICAgICAgY2hlY2tDb250ZXh0ID0gbnVsbDtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfSBdO1xuXG4gIGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuICAgIGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcbiAgICAgIG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cbiAgICAgIC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG4gICAgICBpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcbiAgICAgICAgLy8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG4gICAgICAgIGogPSArK2k7XG4gICAgICAgIGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuICAgICAgICAgIGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0TWF0Y2hlcihcbiAgICAgICAgICBpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcbiAgICAgICAgICBpID4gMSAmJiB0b1NlbGVjdG9yKFxuICAgICAgICAgICAgLy8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcbiAgICAgICAgICAgIHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG4gICAgICAgICAgKS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG4gICAgICAgICAgbWF0Y2hlcixcbiAgICAgICAgICBpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcbiAgICAgICAgICBqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG4gICAgICAgICAgaiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgbWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuICB2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuICAgIGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuICAgIHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcbiAgICAgIHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuICAgICAgICBtYXRjaGVkQ291bnQgPSAwLFxuICAgICAgICBpID0gXCIwXCIsXG4gICAgICAgIHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG4gICAgICAgIHNldE1hdGNoZWQgPSBbXSxcbiAgICAgICAgY29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG4gICAgICAgIC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcbiAgICAgICAgZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcbiAgICAgICAgLy8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcbiAgICAgICAgZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG4gICAgICAgIGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuICAgICAgaWYgKCBvdXRlcm1vc3QgKSB7XG4gICAgICAgIG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ICE9PSBkb2N1bWVudCAmJiBjb250ZXh0O1xuICAgICAgfVxuXG4gICAgICAvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuICAgICAgLy8gS2VlcCBgaWAgYSBzdHJpbmcgaWYgdGhlcmUgYXJlIG5vIGVsZW1lbnRzIHNvIGBtYXRjaGVkQ291bnRgIHdpbGwgYmUgXCIwMFwiIGJlbG93XG4gICAgICAvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcbiAgICAgIC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuICAgICAgZm9yICggOyBpICE9PSBsZW4gJiYgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuICAgICAgICBpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuICAgICAgICAgIGogPSAwO1xuICAgICAgICAgIHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7XG4gICAgICAgICAgICBpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuICAgICAgICAgICAgICByZXN1bHRzLnB1c2goIGVsZW0gKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICggb3V0ZXJtb3N0ICkge1xuICAgICAgICAgICAgZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuICAgICAgICBpZiAoIGJ5U2V0ICkge1xuICAgICAgICAgIC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcbiAgICAgICAgICBpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG4gICAgICAgICAgICBtYXRjaGVkQ291bnQtLTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG4gICAgICAgICAgaWYgKCBzZWVkICkge1xuICAgICAgICAgICAgdW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG4gICAgICBtYXRjaGVkQ291bnQgKz0gaTtcbiAgICAgIGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuICAgICAgICBqID0gMDtcbiAgICAgICAgd2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuICAgICAgICAgIG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHNlZWQgKSB7XG4gICAgICAgICAgLy8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuICAgICAgICAgIGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcbiAgICAgICAgICAgIHdoaWxlICggaS0tICkge1xuICAgICAgICAgICAgICBpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuICAgICAgICAgICAgICAgIHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcbiAgICAgICAgICBzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcbiAgICAgICAgcHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG4gICAgICAgIC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuICAgICAgICBpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuICAgICAgICAgIFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG4gICAgICBpZiAoIG91dGVybW9zdCApIHtcbiAgICAgICAgZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG4gICAgICAgIG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5tYXRjaGVkO1xuICAgIH07XG5cbiAgcmV0dXJuIGJ5U2V0ID9cbiAgICBtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcbiAgICBzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG4gIHZhciBpLFxuICAgIHNldE1hdGNoZXJzID0gW10sXG4gICAgZWxlbWVudE1hdGNoZXJzID0gW10sXG4gICAgY2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG4gIGlmICggIWNhY2hlZCApIHtcbiAgICAvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcbiAgICBpZiAoICFtYXRjaCApIHtcbiAgICAgIG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG4gICAgfVxuICAgIGkgPSBtYXRjaC5sZW5ndGg7XG4gICAgd2hpbGUgKCBpLS0gKSB7XG4gICAgICBjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcbiAgICAgIGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG4gICAgICAgIHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuICAgIGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG4gICAgLy8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG4gICAgY2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gIH1cbiAgcmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcbiAgdmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG4gICAgY29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3RvcixcbiAgICBtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuICByZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuICAvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBubyBzZWVkIGFuZCBvbmx5IG9uZSBncm91cFxuICBpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuICAgIC8vIFRha2UgYSBzaG9ydGN1dCBhbmQgc2V0IHRoZSBjb250ZXh0IGlmIHRoZSByb290IHNlbGVjdG9yIGlzIGFuIElEXG4gICAgdG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuICAgIGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcbiAgICAgICAgc3VwcG9ydC5nZXRCeUlkICYmIGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiZcbiAgICAgICAgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcblxuICAgICAgY29udGV4dCA9ICggRXhwci5maW5kW1wiSURcIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdO1xuICAgICAgaWYgKCAhY29udGV4dCApIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG5cbiAgICAgIC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcbiAgICAgIH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuICAgICAgICBjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuICAgICAgfVxuXG4gICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcbiAgICB9XG5cbiAgICAvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG4gICAgaSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG4gICAgd2hpbGUgKCBpLS0gKSB7XG4gICAgICB0b2tlbiA9IHRva2Vuc1tpXTtcblxuICAgICAgLy8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuICAgICAgaWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcbiAgICAgICAgLy8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG4gICAgICAgIGlmICggKHNlZWQgPSBmaW5kKFxuICAgICAgICAgIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcbiAgICAgICAgICByc2libGluZy50ZXN0KCB0b2tlbnNbMF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG4gICAgICAgICkpICkge1xuXG4gICAgICAgICAgLy8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG4gICAgICAgICAgdG9rZW5zLnNwbGljZSggaSwgMSApO1xuICAgICAgICAgIHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG4gICAgICAgICAgaWYgKCAhc2VsZWN0b3IgKSB7XG4gICAgICAgICAgICBwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuICAvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG4gICggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcbiAgICBzZWVkLFxuICAgIGNvbnRleHQsXG4gICAgIWRvY3VtZW50SXNIVE1MLFxuICAgIHJlc3VsdHMsXG4gICAgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuICApO1xuICByZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYxICkge1xuICAvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcbiAgcmV0dXJuIGRpdjEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuICBkaXYuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG4gIHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcbiAgYWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuICAgIGlmICggIWlzWE1MICkge1xuICAgICAgcmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuICBkaXYuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuICBkaXYuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuICByZXR1cm4gZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuICBhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuICAgIGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuICAgICAgcmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuICAgIH1cbiAgfSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuICByZXR1cm4gZGl2LmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcbiAgYWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuICAgIHZhciB2YWw7XG4gICAgaWYgKCAhaXNYTUwgKSB7XG4gICAgICByZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcbiAgICAgICAgICAodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuICAgICAgICAgIHZhbC52YWx1ZSA6XG4gICAgICAgIG51bGw7XG4gICAgfVxuICB9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5qUXVlcnkuZXhwcltcIjpcIl0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcblxuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG52YXIgcnNpbmdsZVRhZyA9ICgvXjwoW1xcdy1dKylcXHMqXFwvPz4oPzo8XFwvXFwxPnwpJC8pO1xuXG5cblxudmFyIHJpc1NpbXBsZSA9IC9eLlteOiNcXFtcXC4sXSokLztcblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuICBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcbiAgICByZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcbiAgICAgIC8qIGpzaGludCAtVzAxOCAqL1xuICAgICAgcmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuICAgIH0pO1xuXG4gIH1cblxuICBpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcbiAgICByZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgIHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG4gICAgfSk7XG5cbiAgfVxuXG4gIGlmICggdHlwZW9mIHF1YWxpZmllciA9PT0gXCJzdHJpbmdcIiApIHtcbiAgICBpZiAoIHJpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHtcbiAgICAgIHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbiAgICB9XG5cbiAgICBxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XG4gIH1cblxuICByZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcbiAgICByZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuICB9KTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuICB2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cbiAgaWYgKCBub3QgKSB7XG4gICAgZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcbiAgfVxuXG4gIHJldHVybiBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSA/XG4gICAgalF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdIDpcbiAgICBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgcmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG4gICAgfSkpO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG4gIGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcbiAgICB2YXIgaSxcbiAgICAgIGxlbiA9IHRoaXMubGVuZ3RoLFxuICAgICAgcmV0ID0gW10sXG4gICAgICBzZWxmID0gdGhpcztcblxuICAgIGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuICAgICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuICAgICAgICAgIGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSkgKTtcbiAgICB9XG5cbiAgICBmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuICAgICAgalF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayggbGVuID4gMSA/IGpRdWVyeS51bmlxdWUoIHJldCApIDogcmV0ICk7XG4gIH0sXG4gIGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSkgKTtcbiAgfSxcbiAgbm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG4gICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3codGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUpICk7XG4gIH0sXG4gIGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG4gICAgcmV0dXJuICEhd2lubm93KFxuICAgICAgdGhpcyxcblxuICAgICAgLy8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuICAgICAgLy8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuICAgICAgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG4gICAgICAgIGpRdWVyeSggc2VsZWN0b3IgKSA6XG4gICAgICAgIHNlbGVjdG9yIHx8IFtdLFxuICAgICAgZmFsc2VcbiAgICApLmxlbmd0aDtcbiAgfVxufSk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG4gIC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG4gIC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcbiAgLy8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG4gIC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcbiAgcnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG4gIGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcbiAgICB2YXIgbWF0Y2gsIGVsZW07XG5cbiAgICAvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcbiAgICBpZiAoICFzZWxlY3RvciApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBIVE1MIHN0cmluZ3NcbiAgICBpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcbiAgICAgIGlmICggc2VsZWN0b3JbMF0gPT09IFwiPFwiICYmXG4gICAgICAgIHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG4gICAgICAgIHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG4gICAgICAgIC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG4gICAgICAgIG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcbiAgICAgIH1cblxuICAgICAgLy8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuICAgICAgaWYgKCBtYXRjaCAmJiAobWF0Y2hbMV0gfHwgIWNvbnRleHQpICkge1xuXG4gICAgICAgIC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuICAgICAgICBpZiAoIG1hdGNoWzFdICkge1xuICAgICAgICAgIGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFswXSA6IGNvbnRleHQ7XG5cbiAgICAgICAgICAvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcbiAgICAgICAgICAvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuICAgICAgICAgIGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcbiAgICAgICAgICAgIG1hdGNoWzFdLFxuICAgICAgICAgICAgY29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgICApICk7XG5cbiAgICAgICAgICAvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG4gICAgICAgICAgaWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWzFdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcbiAgICAgICAgICAgIGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG4gICAgICAgICAgICAgIC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcbiAgICAgICAgICAgICAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuICAgICAgICAgICAgICAgIHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuICAgICAgICAgICAgICAvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgLy8gSEFORExFOiAkKCNpZClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWzJdICk7XG5cbiAgICAgICAgICBpZiAoIGVsZW0gKSB7XG4gICAgICAgICAgICAvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuICAgICAgICAgICAgdGhpc1swXSA9IGVsZW07XG4gICAgICAgICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgIC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG4gICAgICB9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcbiAgICAgICAgcmV0dXJuICggY29udGV4dCB8fCByb290alF1ZXJ5ICkuZmluZCggc2VsZWN0b3IgKTtcblxuICAgICAgLy8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG4gICAgICAvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcbiAgICAgIH1cblxuICAgIC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuICAgIH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuICAgICAgdGhpc1swXSA9IHNlbGVjdG9yO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG4gICAgLy8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG4gICAgfSBlbHNlIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG4gICAgICByZXR1cm4gcm9vdGpRdWVyeS5yZWFkeSAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgcm9vdGpRdWVyeS5yZWFkeSggc2VsZWN0b3IgKSA6XG4gICAgICAgIC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcbiAgICAgICAgc2VsZWN0b3IoIGpRdWVyeSApO1xuICAgIH1cblxuICAgIHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuICB9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG4gIC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG4gIGd1YXJhbnRlZWRVbmlxdWUgPSB7XG4gICAgY2hpbGRyZW46IHRydWUsXG4gICAgY29udGVudHM6IHRydWUsXG4gICAgbmV4dDogdHJ1ZSxcbiAgICBwcmV2OiB0cnVlXG4gIH07XG5cbmpRdWVyeS5leHRlbmQoe1xuICBkaXI6IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuICAgIHZhciBtYXRjaGVkID0gW10sXG4gICAgICB0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cbiAgICB3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG4gICAgICBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG4gICAgICAgIGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbWF0Y2hlZC5wdXNoKCBlbGVtICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXRjaGVkO1xuICB9LFxuXG4gIHNpYmxpbmc6IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuICAgIHZhciBtYXRjaGVkID0gW107XG5cbiAgICBmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuICAgICAgaWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG4gICAgICAgIG1hdGNoZWQucHVzaCggbiApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYXRjaGVkO1xuICB9XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG4gIGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcbiAgICB2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG4gICAgICBsID0gdGFyZ2V0cy5sZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICBmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG4gICAgICAgIGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzW2ldICkgKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuICAgIHZhciBjdXIsXG4gICAgICBpID0gMCxcbiAgICAgIGwgPSB0aGlzLmxlbmd0aCxcbiAgICAgIG1hdGNoZWQgPSBbXSxcbiAgICAgIHBvcyA9IHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgfHwgdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiA/XG4gICAgICAgIGpRdWVyeSggc2VsZWN0b3JzLCBjb250ZXh0IHx8IHRoaXMuY29udGV4dCApIDpcbiAgICAgICAgMDtcblxuICAgIGZvciAoIDsgaSA8IGw7IGkrKyApIHtcbiAgICAgIGZvciAoIGN1ciA9IHRoaXNbaV07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuICAgICAgICAvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcbiAgICAgICAgaWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAocG9zID9cbiAgICAgICAgICBwb3MuaW5kZXgoY3VyKSA+IC0xIDpcblxuICAgICAgICAgIC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuICAgICAgICAgIGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuICAgICAgICAgICAgalF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKGN1ciwgc2VsZWN0b3JzKSkgKSB7XG5cbiAgICAgICAgICBtYXRjaGVkLnB1c2goIGN1ciApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlKCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG4gIH0sXG5cbiAgLy8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG4gIGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuICAgIC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG4gICAgaWYgKCAhZWxlbSApIHtcbiAgICAgIHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcbiAgICB9XG5cbiAgICAvLyBJbmRleCBpbiBzZWxlY3RvclxuICAgIGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG4gICAgICByZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG4gICAgfVxuXG4gICAgLy8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG4gICAgcmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuICAgICAgLy8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG4gICAgICBlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cbiAgICApO1xuICB9LFxuXG4gIGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayhcbiAgICAgIGpRdWVyeS51bmlxdWUoXG4gICAgICAgIGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcbiAgICAgIClcbiAgICApO1xuICB9LFxuXG4gIGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcbiAgICByZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuICAgICAgdGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlcihzZWxlY3RvcilcbiAgICApO1xuICB9XG59KTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG4gIHdoaWxlICggKGN1ciA9IGN1cltkaXJdKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuICByZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCh7XG4gIHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgdmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcbiAgICByZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuICB9LFxuICBwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICByZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcbiAgfSxcbiAgcGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG4gICAgcmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuICB9LFxuICBuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICByZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG4gIH0sXG4gIHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgIHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG4gIH0sXG4gIG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgIHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcbiAgfSxcbiAgcHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgcmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcbiAgfSxcbiAgbmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG4gICAgcmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcbiAgfSxcbiAgcHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG4gICAgcmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG4gIH0sXG4gIHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICByZXR1cm4galF1ZXJ5LnNpYmxpbmcoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuICB9LFxuICBjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgcmV0dXJuIGpRdWVyeS5zaWJsaW5nKCBlbGVtLmZpcnN0Q2hpbGQgKTtcbiAgfSxcbiAgY29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgIHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudCB8fCBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcbiAgfVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuICBqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG4gICAgdmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuICAgIGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuICAgICAgc2VsZWN0b3IgPSB1bnRpbDtcbiAgICB9XG5cbiAgICBpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcbiAgICAgIG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuICAgIH1cblxuICAgIGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuICAgICAgLy8gUmVtb3ZlIGR1cGxpY2F0ZXNcbiAgICAgIGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcbiAgICAgICAgalF1ZXJ5LnVuaXF1ZSggbWF0Y2hlZCApO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuICAgICAgaWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuICAgICAgICBtYXRjaGVkLnJldmVyc2UoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcbiAgfTtcbn0pO1xudmFyIHJub3R3aGl0ZSA9ICgvXFxTKy9nKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuICB2YXIgb2JqZWN0ID0ge307XG4gIGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG4gICAgb2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuICB9KTtcbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuICAvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG4gIC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcbiAgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cbiAgICBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuICAgIGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cbiAgdmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcbiAgICBmaXJpbmcsXG4gICAgLy8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcbiAgICBtZW1vcnksXG4gICAgLy8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcbiAgICBmaXJlZCxcbiAgICAvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG4gICAgbG9ja2VkLFxuICAgIC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG4gICAgbGlzdCA9IFtdLFxuICAgIC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG4gICAgcXVldWUgPSBbXSxcbiAgICAvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcbiAgICBmaXJpbmdJbmRleCA9IC0xLFxuICAgIC8vIEZpcmUgY2FsbGJhY2tzXG4gICAgZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcbiAgICAgIGxvY2tlZCA9IG9wdGlvbnMub25jZTtcblxuICAgICAgLy8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG4gICAgICAvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG4gICAgICBmaXJlZCA9IGZpcmluZyA9IHRydWU7XG4gICAgICBmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcbiAgICAgICAgbWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcbiAgICAgICAgd2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cbiAgICAgICAgICAvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuICAgICAgICAgIGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG4gICAgICAgICAgICBvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG4gICAgICAgICAgICAvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG4gICAgICAgICAgICBmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuICAgICAgICAgICAgbWVtb3J5ID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcbiAgICAgIGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuICAgICAgICBtZW1vcnkgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgZmlyaW5nID0gZmFsc2U7XG5cbiAgICAgIC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG4gICAgICBpZiAoIGxvY2tlZCApIHtcblxuICAgICAgICAvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG4gICAgICAgIGlmICggbWVtb3J5ICkge1xuICAgICAgICAgIGxpc3QgPSBbXTtcblxuICAgICAgICAvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGlzdCA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3RcbiAgICBzZWxmID0ge1xuXG4gICAgICAvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG4gICAgICBhZGQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIGxpc3QgKSB7XG5cbiAgICAgICAgICAvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuICAgICAgICAgIGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG4gICAgICAgICAgICBmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIChmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG4gICAgICAgICAgICBqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcbiAgICAgICAgICAgICAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYXJnICkgKSB7XG4gICAgICAgICAgICAgICAgaWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcbiAgICAgICAgICAgICAgICAgIGxpc3QucHVzaCggYXJnICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiBqUXVlcnkudHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG4gICAgICAgICAgICAgICAgLy8gSW5zcGVjdCByZWN1cnNpdmVseVxuICAgICAgICAgICAgICAgIGFkZCggYXJnICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pKCBhcmd1bWVudHMgKTtcblxuICAgICAgICAgIGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG4gICAgICAgICAgICBmaXJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcblxuICAgICAgLy8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgalF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcbiAgICAgICAgICB2YXIgaW5kZXg7XG4gICAgICAgICAgd2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG4gICAgICAgICAgICBsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuICAgICAgICAgICAgLy8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG4gICAgICAgICAgICBpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuICAgICAgICAgICAgICBmaXJpbmdJbmRleC0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcblxuICAgICAgLy8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cbiAgICAgIC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuICAgICAgaGFzOiBmdW5jdGlvbiggZm4gKSB7XG4gICAgICAgIHJldHVybiBmbiA/XG4gICAgICAgICAgalF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG4gICAgICAgICAgbGlzdC5sZW5ndGggPiAwO1xuICAgICAgfSxcblxuICAgICAgLy8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuICAgICAgZW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIGxpc3QgKSB7XG4gICAgICAgICAgbGlzdCA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcblxuICAgICAgLy8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuICAgICAgLy8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG4gICAgICAvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcbiAgICAgIGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuICAgICAgICBsaXN0ID0gbWVtb3J5ID0gXCJcIjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuICAgICAgZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gIWxpc3Q7XG4gICAgICB9LFxuXG4gICAgICAvLyBEaXNhYmxlIC5maXJlXG4gICAgICAvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuICAgICAgLy8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuICAgICAgbG9jazogZnVuY3Rpb24oKSB7XG4gICAgICAgIGxvY2tlZCA9IHF1ZXVlID0gW107XG4gICAgICAgIGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuICAgICAgICAgIGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcbiAgICAgIGxvY2tlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAhIWxvY2tlZDtcbiAgICAgIH0sXG5cbiAgICAgIC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcbiAgICAgIGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcbiAgICAgICAgaWYgKCAhbG9ja2VkICkge1xuICAgICAgICAgIGFyZ3MgPSBhcmdzIHx8IFtdO1xuICAgICAgICAgIGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG4gICAgICAgICAgcXVldWUucHVzaCggYXJncyApO1xuICAgICAgICAgIGlmICggIWZpcmluZyApIHtcbiAgICAgICAgICAgIGZpcmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuXG4gICAgICAvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuICAgICAgZmlyZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG5cbiAgICAgIC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuICAgICAgZmlyZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gISFmaXJlZDtcbiAgICAgIH1cbiAgICB9O1xuXG4gIHJldHVybiBzZWxmO1xufTtcblxuXG5qUXVlcnkuZXh0ZW5kKHtcblxuICBEZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG4gICAgdmFyIHR1cGxlcyA9IFtcbiAgICAgICAgLy8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGxpc3RlbmVyIGxpc3QsIGZpbmFsIHN0YXRlXG4gICAgICAgIFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksIFwicmVzb2x2ZWRcIiBdLFxuICAgICAgICBbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksIFwicmVqZWN0ZWRcIiBdLFxuICAgICAgICBbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyhcIm1lbW9yeVwiKSBdXG4gICAgICBdLFxuICAgICAgc3RhdGUgPSBcInBlbmRpbmdcIixcbiAgICAgIHByb21pc2UgPSB7XG4gICAgICAgIHN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgIH0sXG4gICAgICAgIGFsd2F5czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIHRoZW46IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcbiAgICAgICAgICB2YXIgZm5zID0gYXJndW1lbnRzO1xuICAgICAgICAgIHJldHVybiBqUXVlcnkuRGVmZXJyZWQoZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuICAgICAgICAgICAgalF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuICAgICAgICAgICAgICB2YXIgZm4gPSBqUXVlcnkuaXNGdW5jdGlvbiggZm5zWyBpIF0gKSAmJiBmbnNbIGkgXTtcbiAgICAgICAgICAgICAgLy8gZGVmZXJyZWRbIGRvbmUgfCBmYWlsIHwgcHJvZ3Jlc3MgXSBmb3IgZm9yd2FyZGluZyBhY3Rpb25zIHRvIG5ld0RlZmVyXG4gICAgICAgICAgICAgIGRlZmVycmVkWyB0dXBsZVsxXSBdKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgICAgICAgICAgICAgICBpZiAoIHJldHVybmVkICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm5lZC5wcm9taXNlKClcbiAgICAgICAgICAgICAgICAgICAgLmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuICAgICAgICAgICAgICAgICAgICAuZmFpbCggbmV3RGVmZXIucmVqZWN0IClcbiAgICAgICAgICAgICAgICAgICAgLnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgbmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuICAgICAgICAgICAgICAgICAgICB0aGlzID09PSBwcm9taXNlID8gbmV3RGVmZXIucHJvbWlzZSgpIDogdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgZm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm5zID0gbnVsbDtcbiAgICAgICAgICB9KS5wcm9taXNlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcbiAgICAgICAgLy8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuICAgICAgICBwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuICAgICAgICAgIHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlZmVycmVkID0ge307XG5cbiAgICAvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG4gICAgcHJvbWlzZS5waXBlID0gcHJvbWlzZS50aGVuO1xuXG4gICAgLy8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuICAgIGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcbiAgICAgIHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcbiAgICAgICAgc3RhdGVTdHJpbmcgPSB0dXBsZVsgMyBdO1xuXG4gICAgICAvLyBwcm9taXNlWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gPSBsaXN0LmFkZFxuICAgICAgcHJvbWlzZVsgdHVwbGVbMV0gXSA9IGxpc3QuYWRkO1xuXG4gICAgICAvLyBIYW5kbGUgc3RhdGVcbiAgICAgIGlmICggc3RhdGVTdHJpbmcgKSB7XG4gICAgICAgIGxpc3QuYWRkKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIC8vIHN0YXRlID0gWyByZXNvbHZlZCB8IHJlamVjdGVkIF1cbiAgICAgICAgICBzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXG4gICAgICAgIC8vIFsgcmVqZWN0X2xpc3QgfCByZXNvbHZlX2xpc3QgXS5kaXNhYmxlOyBwcm9ncmVzc19saXN0LmxvY2tcbiAgICAgICAgfSwgdHVwbGVzWyBpIF4gMSBdWyAyIF0uZGlzYWJsZSwgdHVwbGVzWyAyIF1bIDIgXS5sb2NrICk7XG4gICAgICB9XG5cbiAgICAgIC8vIGRlZmVycmVkWyByZXNvbHZlIHwgcmVqZWN0IHwgbm90aWZ5IF1cbiAgICAgIGRlZmVycmVkWyB0dXBsZVswXSBdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGRlZmVycmVkWyB0dXBsZVswXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gcHJvbWlzZSA6IHRoaXMsIGFyZ3VtZW50cyApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH07XG4gICAgICBkZWZlcnJlZFsgdHVwbGVbMF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcbiAgICB9KTtcblxuICAgIC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuICAgIHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuICAgIC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcbiAgICBpZiAoIGZ1bmMgKSB7XG4gICAgICBmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuICAgIH1cblxuICAgIC8vIEFsbCBkb25lIVxuICAgIHJldHVybiBkZWZlcnJlZDtcbiAgfSxcblxuICAvLyBEZWZlcnJlZCBoZWxwZXJcbiAgd2hlbjogZnVuY3Rpb24oIHN1Ym9yZGluYXRlIC8qICwgLi4uLCBzdWJvcmRpbmF0ZU4gKi8gKSB7XG4gICAgdmFyIGkgPSAwLFxuICAgICAgcmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuICAgICAgbGVuZ3RoID0gcmVzb2x2ZVZhbHVlcy5sZW5ndGgsXG5cbiAgICAgIC8vIHRoZSBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcbiAgICAgIHJlbWFpbmluZyA9IGxlbmd0aCAhPT0gMSB8fFxuICAgICAgICAoIHN1Ym9yZGluYXRlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBzdWJvcmRpbmF0ZS5wcm9taXNlICkgKSA/IGxlbmd0aCA6IDAsXG5cbiAgICAgIC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWQuXG4gICAgICAvLyBJZiByZXNvbHZlVmFsdWVzIGNvbnNpc3Qgb2Ygb25seSBhIHNpbmdsZSBEZWZlcnJlZCwganVzdCB1c2UgdGhhdC5cbiAgICAgIGRlZmVycmVkID0gcmVtYWluaW5nID09PSAxID8gc3Vib3JkaW5hdGUgOiBqUXVlcnkuRGVmZXJyZWQoKSxcblxuICAgICAgLy8gVXBkYXRlIGZ1bmN0aW9uIGZvciBib3RoIHJlc29sdmUgYW5kIHByb2dyZXNzIHZhbHVlc1xuICAgICAgdXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpLCBjb250ZXh0cywgdmFsdWVzICkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuICAgICAgICAgIGNvbnRleHRzWyBpIF0gPSB0aGlzO1xuICAgICAgICAgIHZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuICAgICAgICAgIGlmICggdmFsdWVzID09PSBwcm9ncmVzc1ZhbHVlcyApIHtcbiAgICAgICAgICAgIGRlZmVycmVkLm5vdGlmeVdpdGgoIGNvbnRleHRzLCB2YWx1ZXMgKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNvbnRleHRzLCB2YWx1ZXMgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9LFxuXG4gICAgICBwcm9ncmVzc1ZhbHVlcywgcHJvZ3Jlc3NDb250ZXh0cywgcmVzb2x2ZUNvbnRleHRzO1xuXG4gICAgLy8gQWRkIGxpc3RlbmVycyB0byBEZWZlcnJlZCBzdWJvcmRpbmF0ZXM7IHRyZWF0IG90aGVycyBhcyByZXNvbHZlZFxuICAgIGlmICggbGVuZ3RoID4gMSApIHtcbiAgICAgIHByb2dyZXNzVmFsdWVzID0gbmV3IEFycmF5KCBsZW5ndGggKTtcbiAgICAgIHByb2dyZXNzQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuICAgICAgcmVzb2x2ZUNvbnRleHRzID0gbmV3IEFycmF5KCBsZW5ndGggKTtcbiAgICAgIGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuICAgICAgICBpZiAoIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdLnByb21pc2UgKSApIHtcbiAgICAgICAgICByZXNvbHZlVmFsdWVzWyBpIF0ucHJvbWlzZSgpXG4gICAgICAgICAgICAucHJvZ3Jlc3MoIHVwZGF0ZUZ1bmMoIGksIHByb2dyZXNzQ29udGV4dHMsIHByb2dyZXNzVmFsdWVzICkgKVxuICAgICAgICAgICAgLmRvbmUoIHVwZGF0ZUZ1bmMoIGksIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApIClcbiAgICAgICAgICAgIC5mYWlsKCBkZWZlcnJlZC5yZWplY3QgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAtLXJlbWFpbmluZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIHdlJ3JlIG5vdCB3YWl0aW5nIG9uIGFueXRoaW5nLCByZXNvbHZlIHRoZSBtYXN0ZXJcbiAgICBpZiAoICFyZW1haW5pbmcgKSB7XG4gICAgICBkZWZlcnJlZC5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbiAgfVxufSk7XG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0O1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG4gIC8vIEFkZCB0aGUgY2FsbGJhY2tcbiAgalF1ZXJ5LnJlYWR5LnByb21pc2UoKS5kb25lKCBmbiApO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCh7XG4gIC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG4gIGlzUmVhZHk6IGZhbHNlLFxuXG4gIC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcbiAgLy8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcbiAgcmVhZHlXYWl0OiAxLFxuXG4gIC8vIEhvbGQgKG9yIHJlbGVhc2UpIHRoZSByZWFkeSBldmVudFxuICBob2xkUmVhZHk6IGZ1bmN0aW9uKCBob2xkICkge1xuICAgIGlmICggaG9sZCApIHtcbiAgICAgIGpRdWVyeS5yZWFkeVdhaXQrKztcbiAgICB9IGVsc2Uge1xuICAgICAgalF1ZXJ5LnJlYWR5KCB0cnVlICk7XG4gICAgfVxuICB9LFxuXG4gIC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcbiAgcmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG4gICAgLy8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuICAgIGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuICAgIGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuICAgIC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG4gICAgaWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuICAgIHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblxuICAgIC8vIFRyaWdnZXIgYW55IGJvdW5kIHJlYWR5IGV2ZW50c1xuICAgIGlmICggalF1ZXJ5LmZuLnRyaWdnZXJIYW5kbGVyICkge1xuICAgICAgalF1ZXJ5KCBkb2N1bWVudCApLnRyaWdnZXJIYW5kbGVyKCBcInJlYWR5XCIgKTtcbiAgICAgIGpRdWVyeSggZG9jdW1lbnQgKS5vZmYoIFwicmVhZHlcIiApO1xuICAgIH1cbiAgfVxufSk7XG5cbi8qKlxuICogVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbiAqL1xuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkLCBmYWxzZSApO1xuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcbiAgalF1ZXJ5LnJlYWR5KCk7XG59XG5cbmpRdWVyeS5yZWFkeS5wcm9taXNlID0gZnVuY3Rpb24oIG9iaiApIHtcbiAgaWYgKCAhcmVhZHlMaXN0ICkge1xuXG4gICAgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbiAgICAvLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuICAgIC8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuICAgIC8vIFdlIG9uY2UgdHJpZWQgdG8gdXNlIHJlYWR5U3RhdGUgXCJpbnRlcmFjdGl2ZVwiIGhlcmUsXG4gICAgLy8gYnV0IGl0IGNhdXNlZCBpc3N1ZXMgbGlrZSB0aGUgb25lXG4gICAgLy8gZGlzY292ZXJlZCBieSBDaHJpc1MgaGVyZTogaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIyODIjY29tbWVudDoxNVxuICAgIGlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiICkge1xuICAgICAgLy8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG4gICAgICBzZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxuICAgIH0gZWxzZSB7XG5cbiAgICAgIC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQsIGZhbHNlICk7XG5cbiAgICAgIC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlYWR5TGlzdC5wcm9taXNlKCBvYmogKTtcbn07XG5cbi8vIEtpY2sgb2ZmIHRoZSBET00gcmVhZHkgY2hlY2sgZXZlbiBpZiB0aGUgdXNlciBkb2VzIG5vdFxualF1ZXJ5LnJlYWR5LnByb21pc2UoKTtcblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBqUXVlcnkuYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuICB2YXIgaSA9IDAsXG4gICAgbGVuID0gZWxlbXMubGVuZ3RoLFxuICAgIGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuICAvLyBTZXRzIG1hbnkgdmFsdWVzXG4gIGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuICAgIGNoYWluYWJsZSA9IHRydWU7XG4gICAgZm9yICggaSBpbiBrZXkgKSB7XG4gICAgICBhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5W2ldLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG4gICAgfVxuXG4gIC8vIFNldHMgb25lIHZhbHVlXG4gIH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG4gICAgY2hhaW5hYmxlID0gdHJ1ZTtcblxuICAgIGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuICAgICAgcmF3ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoIGJ1bGsgKSB7XG4gICAgICAvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcbiAgICAgIGlmICggcmF3ICkge1xuICAgICAgICBmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcbiAgICAgICAgZm4gPSBudWxsO1xuXG4gICAgICAvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBidWxrID0gZm47XG4gICAgICAgIGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG4gICAgICAgICAgcmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCBmbiApIHtcbiAgICAgIGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuICAgICAgICBmbiggZWxlbXNbaV0sIGtleSwgcmF3ID8gdmFsdWUgOiB2YWx1ZS5jYWxsKCBlbGVtc1tpXSwgaSwgZm4oIGVsZW1zW2ldLCBrZXkgKSApICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNoYWluYWJsZSA/XG4gICAgZWxlbXMgOlxuXG4gICAgLy8gR2V0c1xuICAgIGJ1bGsgP1xuICAgICAgZm4uY2FsbCggZWxlbXMgKSA6XG4gICAgICBsZW4gPyBmbiggZWxlbXNbMF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGFuIG9iamVjdCBjYW4gaGF2ZSBkYXRhXG4gKi9cbmpRdWVyeS5hY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuICAvLyBBY2NlcHRzIG9ubHk6XG4gIC8vICAtIE5vZGVcbiAgLy8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuICAvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuICAvLyAgLSBPYmplY3RcbiAgLy8gICAgLSBBbnlcbiAgLyoganNoaW50IC1XMDE4ICovXG4gIHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcbiAgLy8gU3VwcG9ydDogQW5kcm9pZDw0LFxuICAvLyBPbGQgV2ViS2l0IGRvZXMgbm90IGhhdmUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zL2ZyZWV6ZSBtZXRob2QsXG4gIC8vIHJldHVybiBuZXcgZW1wdHkgb2JqZWN0IGluc3RlYWQgd2l0aCBubyBbW3NldF1dIGFjY2Vzc29yXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcy5jYWNoZSA9IHt9LCAwLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gIH0pO1xuXG4gIHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuRGF0YS5hY2NlcHRzID0galF1ZXJ5LmFjY2VwdERhdGE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuICBrZXk6IGZ1bmN0aW9uKCBvd25lciApIHtcbiAgICAvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2VycyxcbiAgICAvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuICAgIC8vIEFsd2F5cyByZXR1cm4gdGhlIGtleSBmb3IgYSBmcm96ZW4gb2JqZWN0LlxuICAgIGlmICggIURhdGEuYWNjZXB0cyggb3duZXIgKSApIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHZhciBkZXNjcmlwdG9yID0ge30sXG4gICAgICAvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGUga2V5XG4gICAgICB1bmxvY2sgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cbiAgICAvLyBJZiBub3QsIGNyZWF0ZSBvbmVcbiAgICBpZiAoICF1bmxvY2sgKSB7XG4gICAgICB1bmxvY2sgPSBEYXRhLnVpZCsrO1xuXG4gICAgICAvLyBTZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSwgbm9uLXdyaXRhYmxlIHByb3BlcnR5XG4gICAgICB0cnkge1xuICAgICAgICBkZXNjcmlwdG9yWyB0aGlzLmV4cGFuZG8gXSA9IHsgdmFsdWU6IHVubG9jayB9O1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyggb3duZXIsIGRlc2NyaXB0b3IgKTtcblxuICAgICAgLy8gU3VwcG9ydDogQW5kcm9pZDw0XG4gICAgICAvLyBGYWxsYmFjayB0byBhIGxlc3Mgc2VjdXJlIGRlZmluaXRpb25cbiAgICAgIH0gY2F0Y2ggKCBlICkge1xuICAgICAgICBkZXNjcmlwdG9yWyB0aGlzLmV4cGFuZG8gXSA9IHVubG9jaztcbiAgICAgICAgalF1ZXJ5LmV4dGVuZCggb3duZXIsIGRlc2NyaXB0b3IgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgdGhlIGNhY2hlIG9iamVjdFxuICAgIGlmICggIXRoaXMuY2FjaGVbIHVubG9jayBdICkge1xuICAgICAgdGhpcy5jYWNoZVsgdW5sb2NrIF0gPSB7fTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5sb2NrO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG4gICAgdmFyIHByb3AsXG4gICAgICAvLyBUaGVyZSBtYXkgYmUgYW4gdW5sb2NrIGFzc2lnbmVkIHRvIHRoaXMgbm9kZSxcbiAgICAgIC8vIGlmIHRoZXJlIGlzIG5vIGVudHJ5IGZvciB0aGlzIFwib3duZXJcIiwgY3JlYXRlIG9uZSBpbmxpbmVcbiAgICAgIC8vIGFuZCBzZXQgdGhlIHVubG9jayBhcyB0aG91Z2ggYW4gb3duZXIgZW50cnkgaGFkIGFsd2F5cyBleGlzdGVkXG4gICAgICB1bmxvY2sgPSB0aGlzLmtleSggb3duZXIgKSxcbiAgICAgIGNhY2hlID0gdGhpcy5jYWNoZVsgdW5sb2NrIF07XG5cbiAgICAvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG4gICAgaWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcbiAgICAgIGNhY2hlWyBkYXRhIF0gPSB2YWx1ZTtcblxuICAgIC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZyZXNoIGFzc2lnbm1lbnRzIGJ5IG9iamVjdCBhcmUgc2hhbGxvdyBjb3BpZWRcbiAgICAgIGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG4gICAgICAgIGpRdWVyeS5leHRlbmQoIHRoaXMuY2FjaGVbIHVubG9jayBdLCBkYXRhICk7XG4gICAgICAvLyBPdGhlcndpc2UsIGNvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG4gICAgICAgICAgY2FjaGVbIHByb3AgXSA9IGRhdGFbIHByb3AgXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2FjaGU7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG4gICAgLy8gRWl0aGVyIGEgdmFsaWQgY2FjaGUgaXMgZm91bmQsIG9yIHdpbGwgYmUgY3JlYXRlZC5cbiAgICAvLyBOZXcgY2FjaGVzIHdpbGwgYmUgY3JlYXRlZCBhbmQgdGhlIHVubG9jayByZXR1cm5lZCxcbiAgICAvLyBhbGxvd2luZyBkaXJlY3QgYWNjZXNzIHRvIHRoZSBuZXdseSBjcmVhdGVkXG4gICAgLy8gZW1wdHkgZGF0YSBvYmplY3QuIEEgdmFsaWQgb3duZXIgb2JqZWN0IG11c3QgYmUgcHJvdmlkZWQuXG4gICAgdmFyIGNhY2hlID0gdGhpcy5jYWNoZVsgdGhpcy5rZXkoIG93bmVyICkgXTtcblxuICAgIHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG4gICAgICBjYWNoZSA6IGNhY2hlWyBrZXkgXTtcbiAgfSxcbiAgYWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG4gICAgdmFyIHN0b3JlZDtcbiAgICAvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG4gICAgLy9cbiAgICAvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG4gICAgLy8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG4gICAgLy9cbiAgICAvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcbiAgICAvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG4gICAgLy9cbiAgICAvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG4gICAgLy8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuICAgIC8vXG4gICAgaWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAoKGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSApIHtcblxuICAgICAgc3RvcmVkID0gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblxuICAgICAgcmV0dXJuIHN0b3JlZCAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgc3RvcmVkIDogdGhpcy5nZXQoIG93bmVyLCBqUXVlcnkuY2FtZWxDYXNlKGtleSkgKTtcbiAgICB9XG5cbiAgICAvLyBbKl1XaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuICAgIC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuICAgIC8vXG4gICAgLy8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuICAgIC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG4gICAgLy9cbiAgICB0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuICAgIC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuICAgIC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG4gICAgdmFyIGksIG5hbWUsIGNhbWVsLFxuICAgICAgdW5sb2NrID0gdGhpcy5rZXkoIG93bmVyICksXG4gICAgICBjYWNoZSA9IHRoaXMuY2FjaGVbIHVubG9jayBdO1xuXG4gICAgaWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcbiAgICAgIHRoaXMuY2FjaGVbIHVubG9jayBdID0ge307XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcbiAgICAgIGlmICggalF1ZXJ5LmlzQXJyYXkoIGtleSApICkge1xuICAgICAgICAvLyBJZiBcIm5hbWVcIiBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG4gICAgICAgIC8vIFdoZW4gZGF0YSBpcyBpbml0aWFsbHkgY3JlYXRlZCwgdmlhIChcImtleVwiLCBcInZhbFwiKSBzaWduYXR1cmUsXG4gICAgICAgIC8vIGtleXMgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gY2FtZWxDYXNlLlxuICAgICAgICAvLyBTaW5jZSB0aGVyZSBpcyBubyB3YXkgdG8gdGVsbCBfaG93XyBhIGtleSB3YXMgYWRkZWQsIHJlbW92ZVxuICAgICAgICAvLyBib3RoIHBsYWluIGtleSBhbmQgY2FtZWxDYXNlIGtleS4gIzEyNzg2XG4gICAgICAgIC8vIFRoaXMgd2lsbCBvbmx5IHBlbmFsaXplIHRoZSBhcnJheSBhcmd1bWVudCBwYXRoLlxuICAgICAgICBuYW1lID0ga2V5LmNvbmNhdCgga2V5Lm1hcCggalF1ZXJ5LmNhbWVsQ2FzZSApICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYW1lbCA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xuICAgICAgICAvLyBUcnkgdGhlIHN0cmluZyBhcyBhIGtleSBiZWZvcmUgYW55IG1hbmlwdWxhdGlvblxuICAgICAgICBpZiAoIGtleSBpbiBjYWNoZSApIHtcbiAgICAgICAgICBuYW1lID0gWyBrZXksIGNhbWVsIF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuICAgICAgICAgIC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG4gICAgICAgICAgbmFtZSA9IGNhbWVsO1xuICAgICAgICAgIG5hbWUgPSBuYW1lIGluIGNhY2hlID9cbiAgICAgICAgICAgIFsgbmFtZSBdIDogKCBuYW1lLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXSApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGkgPSBuYW1lLmxlbmd0aDtcbiAgICAgIHdoaWxlICggaS0tICkge1xuICAgICAgICBkZWxldGUgY2FjaGVbIG5hbWVbIGkgXSBdO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgaGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuICAgIHJldHVybiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoXG4gICAgICB0aGlzLmNhY2hlWyBvd25lclsgdGhpcy5leHBhbmRvIF0gXSB8fCB7fVxuICAgICk7XG4gIH0sXG4gIGRpc2NhcmQ6IGZ1bmN0aW9uKCBvd25lciApIHtcbiAgICBpZiAoIG93bmVyWyB0aGlzLmV4cGFuZG8gXSApIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmNhY2hlWyBvd25lclsgdGhpcy5leHBhbmRvIF0gXTtcbiAgICB9XG4gIH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuICBybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG4gIHZhciBuYW1lO1xuXG4gIC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcbiAgLy8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG4gIGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG4gICAgbmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcbiAgICBkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuICAgIGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gZGF0YSA9PT0gXCJ0cnVlXCIgPyB0cnVlIDpcbiAgICAgICAgICBkYXRhID09PSBcImZhbHNlXCIgPyBmYWxzZSA6XG4gICAgICAgICAgZGF0YSA9PT0gXCJudWxsXCIgPyBudWxsIDpcbiAgICAgICAgICAvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuICAgICAgICAgICtkYXRhICsgXCJcIiA9PT0gZGF0YSA/ICtkYXRhIDpcbiAgICAgICAgICByYnJhY2UudGVzdCggZGF0YSApID8galF1ZXJ5LnBhcnNlSlNPTiggZGF0YSApIDpcbiAgICAgICAgICBkYXRhO1xuICAgICAgfSBjYXRjaCAoIGUgKSB7fVxuXG4gICAgICAvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcbiAgICAgIGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKHtcbiAgaGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgcmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG4gIH0sXG5cbiAgZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG4gICAgcmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuICB9LFxuXG4gIHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuICAgIGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuICB9LFxuXG4gIC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG4gIC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuICBfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG4gICAgcmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuICB9LFxuXG4gIF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcbiAgICBkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcbiAgfVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuICBkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcbiAgICB2YXIgaSwgbmFtZSwgZGF0YSxcbiAgICAgIGVsZW0gPSB0aGlzWyAwIF0sXG4gICAgICBhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG4gICAgLy8gR2V0cyBhbGwgdmFsdWVzXG4gICAgaWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcbiAgICAgIGlmICggdGhpcy5sZW5ndGggKSB7XG4gICAgICAgIGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuICAgICAgICBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuICAgICAgICAgIGkgPSBhdHRycy5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKCBpLS0gKSB7XG5cbiAgICAgICAgICAgIC8vIFN1cHBvcnQ6IElFMTErXG4gICAgICAgICAgICAvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcbiAgICAgICAgICAgIGlmICggYXR0cnNbIGkgXSApIHtcbiAgICAgICAgICAgICAgbmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcbiAgICAgICAgICAgICAgaWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuICAgICAgICAgICAgICAgIG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lLnNsaWNlKDUpICk7XG4gICAgICAgICAgICAgICAgZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG4gICAgaWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcbiAgICAgIHZhciBkYXRhLCBjYW1lbEtleTtcblxuICAgICAgLy8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcbiAgICAgIC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG4gICAgICAvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuICAgICAgLy8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuICAgICAgLy8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cbiAgICAgIGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuICAgICAgICAvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG4gICAgICAgIC8vIHdpdGggdGhlIGtleSBhcy1pc1xuICAgICAgICBkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcbiAgICAgICAgaWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH1cblxuICAgICAgICBjYW1lbEtleSA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xuICAgICAgICAvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG4gICAgICAgIC8vIHdpdGggdGhlIGtleSBjYW1lbGl6ZWRcbiAgICAgICAgZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwgY2FtZWxLZXkgKTtcbiAgICAgICAgaWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuICAgICAgICAvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG4gICAgICAgIGRhdGEgPSBkYXRhQXR0ciggZWxlbSwgY2FtZWxLZXksIHVuZGVmaW5lZCApO1xuICAgICAgICBpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXQgdGhlIGRhdGEuLi5cbiAgICAgIGNhbWVsS2V5ID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XG4gICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIEZpcnN0LCBhdHRlbXB0IHRvIHN0b3JlIGEgY29weSBvciByZWZlcmVuY2Ugb2YgYW55XG4gICAgICAgIC8vIGRhdGEgdGhhdCBtaWdodCd2ZSBiZWVuIHN0b3JlIHdpdGggYSBjYW1lbENhc2VkIGtleS5cbiAgICAgICAgdmFyIGRhdGEgPSBkYXRhVXNlci5nZXQoIHRoaXMsIGNhbWVsS2V5ICk7XG5cbiAgICAgICAgLy8gRm9yIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGUgaW50ZXJvcCwgd2UgaGF2ZSB0b1xuICAgICAgICAvLyBzdG9yZSBwcm9wZXJ0eSBuYW1lcyB3aXRoIGRhc2hlcyBpbiBhIGNhbWVsQ2FzZSBmb3JtLlxuICAgICAgICAvLyBUaGlzIG1pZ2h0IG5vdCBhcHBseSB0byBhbGwgcHJvcGVydGllcy4uLipcbiAgICAgICAgZGF0YVVzZXIuc2V0KCB0aGlzLCBjYW1lbEtleSwgdmFsdWUgKTtcblxuICAgICAgICAvLyAqLi4uIEluIHRoZSBjYXNlIG9mIHByb3BlcnRpZXMgdGhhdCBtaWdodCBfYWN0dWFsbHlfXG4gICAgICAgIC8vIGhhdmUgZGFzaGVzLCB3ZSBuZWVkIHRvIGFsc28gc3RvcmUgYSBjb3B5IG9mIHRoYXRcbiAgICAgICAgLy8gdW5jaGFuZ2VkIHByb3BlcnR5LlxuICAgICAgICBpZiAoIGtleS5pbmRleE9mKFwiLVwiKSA+IC0xICYmIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICBkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG4gIH0sXG5cbiAgcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcbiAgICB9KTtcbiAgfVxufSk7XG5cblxualF1ZXJ5LmV4dGVuZCh7XG4gIHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcbiAgICB2YXIgcXVldWU7XG5cbiAgICBpZiAoIGVsZW0gKSB7XG4gICAgICB0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuICAgICAgcXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuICAgICAgLy8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuICAgICAgaWYgKCBkYXRhICkge1xuICAgICAgICBpZiAoICFxdWV1ZSB8fCBqUXVlcnkuaXNBcnJheSggZGF0YSApICkge1xuICAgICAgICAgIHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KGRhdGEpICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcXVldWUucHVzaCggZGF0YSApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcXVldWUgfHwgW107XG4gICAgfVxuICB9LFxuXG4gIGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuICAgIHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuICAgIHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuICAgICAgc3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG4gICAgICBmbiA9IHF1ZXVlLnNoaWZ0KCksXG4gICAgICBob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuICAgICAgbmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuICAgICAgfTtcblxuICAgIC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcbiAgICBpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcbiAgICAgIGZuID0gcXVldWUuc2hpZnQoKTtcbiAgICAgIHN0YXJ0TGVuZ3RoLS07XG4gICAgfVxuXG4gICAgaWYgKCBmbiApIHtcblxuICAgICAgLy8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuICAgICAgLy8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuICAgICAgaWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG4gICAgICAgIHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG4gICAgICB9XG5cbiAgICAgIC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cbiAgICAgIGRlbGV0ZSBob29rcy5zdG9wO1xuICAgICAgZm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcbiAgICB9XG5cbiAgICBpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcbiAgICAgIGhvb2tzLmVtcHR5LmZpcmUoKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcbiAgX3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuICAgIHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG4gICAgcmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcbiAgICAgIGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikuYWRkKGZ1bmN0aW9uKCkge1xuICAgICAgICBkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcbiAgICAgIH0pXG4gICAgfSk7XG4gIH1cbn0pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcbiAgcXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuICAgIHZhciBzZXR0ZXIgPSAyO1xuXG4gICAgaWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcbiAgICAgIGRhdGEgPSB0eXBlO1xuICAgICAgdHlwZSA9IFwiZnhcIjtcbiAgICAgIHNldHRlci0tO1xuICAgIH1cblxuICAgIGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcbiAgICAgIHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbMF0sIHR5cGUgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cbiAgICAgIHRoaXMgOlxuICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuICAgICAgICAvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuICAgICAgICBqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuICAgICAgICBpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVswXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG4gICAgICAgICAgalF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH0sXG4gIGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICBqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuICAgIH0pO1xuICB9LFxuICBjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcbiAgICByZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG4gIH0sXG4gIC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcbiAgLy8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG4gIHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG4gICAgdmFyIHRtcCxcbiAgICAgIGNvdW50ID0gMSxcbiAgICAgIGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG4gICAgICBlbGVtZW50cyA9IHRoaXMsXG4gICAgICBpID0gdGhpcy5sZW5ndGgsXG4gICAgICByZXNvbHZlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICggISggLS1jb3VudCApICkge1xuICAgICAgICAgIGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICBpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuICAgICAgb2JqID0gdHlwZTtcbiAgICAgIHR5cGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuICAgIHdoaWxlICggaS0tICkge1xuICAgICAgdG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcbiAgICAgIGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcbiAgICAgICAgY291bnQrKztcbiAgICAgICAgdG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXNvbHZlKCk7XG4gICAgcmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuICB9XG59KTtcbnZhciBwbnVtID0gKC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvKS5zb3VyY2U7XG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGlzSGlkZGVuID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuICAgIC8vIGlzSGlkZGVuIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG4gICAgLy8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG4gICAgZWxlbSA9IGVsIHx8IGVsZW07XG4gICAgcmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiIHx8XG4gICAgICAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcbiAgfTtcblxudmFyIHJjaGVja2FibGVUeXBlID0gKC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pKTtcblxuXG5cbihmdW5jdGlvbigpIHtcbiAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuICAgIGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcbiAgICBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG4gIC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wLTQuM1xuICAvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuICAvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG4gIC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuICBpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcbiAgaW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcbiAgaW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuICBkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cbiAgLy8gU3VwcG9ydDogQW5kcm9pZDw0LjJcbiAgLy8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG4gIHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuICAvLyBTdXBwb3J0OiBJRTw9MTErXG4gIC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG4gIGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcbiAgc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59KSgpO1xuXG5cbnN1cHBvcnQuZm9jdXNpbkJ1YmJsZXMgPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXJcbiAgcmtleUV2ZW50ID0gL15rZXkvLFxuICBybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcbiAgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG4gIHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuICB0cnkge1xuICAgIHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICB9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cbiAgZ2xvYmFsOiB7fSxcblxuICBhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cbiAgICB2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG4gICAgICBldmVudHMsIHQsIGhhbmRsZU9iaixcbiAgICAgIHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcbiAgICAgIGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cbiAgICAvLyBEb24ndCBhdHRhY2ggZXZlbnRzIHRvIG5vRGF0YSBvciB0ZXh0L2NvbW1lbnQgbm9kZXMgKGJ1dCBhbGxvdyBwbGFpbiBvYmplY3RzKVxuICAgIGlmICggIWVsZW1EYXRhICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuICAgIGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuICAgICAgaGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuICAgICAgaGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG4gICAgICBzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuICAgIH1cblxuICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuICAgIGlmICggIWhhbmRsZXIuZ3VpZCApIHtcbiAgICAgIGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG4gICAgfVxuXG4gICAgLy8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuICAgIGlmICggIShldmVudHMgPSBlbGVtRGF0YS5ldmVudHMpICkge1xuICAgICAgZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG4gICAgfVxuICAgIGlmICggIShldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSkgKSB7XG4gICAgICBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuICAgICAgICAvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuICAgICAgICAvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG4gICAgICAgIHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG4gICAgICAgICAgalF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuICAgIHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuICAgIHQgPSB0eXBlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCB0LS0gKSB7XG4gICAgICB0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1t0XSApIHx8IFtdO1xuICAgICAgdHlwZSA9IG9yaWdUeXBlID0gdG1wWzFdO1xuICAgICAgbmFtZXNwYWNlcyA9ICggdG1wWzJdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cbiAgICAgIC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuICAgICAgaWYgKCAhdHlwZSApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuICAgICAgc3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cbiAgICAgIC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuICAgICAgdHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG4gICAgICAvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG4gICAgICBzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuICAgICAgLy8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcbiAgICAgIGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoe1xuICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICBvcmlnVHlwZTogb3JpZ1R5cGUsXG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGhhbmRsZXI6IGhhbmRsZXIsXG4gICAgICAgIGd1aWQ6IGhhbmRsZXIuZ3VpZCxcbiAgICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yLFxuICAgICAgICBuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuICAgICAgICBuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbihcIi5cIilcbiAgICAgIH0sIGhhbmRsZU9iakluICk7XG5cbiAgICAgIC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG4gICAgICBpZiAoICEoaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSkgKSB7XG4gICAgICAgIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcbiAgICAgICAgaGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cbiAgICAgICAgLy8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG4gICAgICAgIGlmICggIXNwZWNpYWwuc2V0dXAgfHxcbiAgICAgICAgICBzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG4gICAgICAgICAgaWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG4gICAgICAgICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlLCBmYWxzZSApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIHNwZWNpYWwuYWRkICkge1xuICAgICAgICBzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuICAgICAgICBpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuICAgICAgICAgIGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcbiAgICAgIGlmICggc2VsZWN0b3IgKSB7XG4gICAgICAgIGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuICAgICAgfVxuXG4gICAgICAvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG4gICAgICBqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuICAgIH1cblxuICB9LFxuXG4gIC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuICByZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG4gICAgdmFyIGosIG9yaWdDb3VudCwgdG1wLFxuICAgICAgZXZlbnRzLCB0LCBoYW5kbGVPYmosXG4gICAgICBzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG4gICAgICBlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuICAgIGlmICggIWVsZW1EYXRhIHx8ICEoZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzKSApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG4gICAgdHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XG4gICAgdCA9IHR5cGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoIHQtLSApIHtcbiAgICAgIHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzW3RdICkgfHwgW107XG4gICAgICB0eXBlID0gb3JpZ1R5cGUgPSB0bXBbMV07XG4gICAgICBuYW1lc3BhY2VzID0gKCB0bXBbMl0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuICAgICAgLy8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG4gICAgICBpZiAoICF0eXBlICkge1xuICAgICAgICBmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcbiAgICAgICAgICBqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgc3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG4gICAgICB0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG4gICAgICBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuICAgICAgdG1wID0gdG1wWzJdICYmIG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKSArIFwiKFxcXFwufCQpXCIgKTtcblxuICAgICAgLy8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuICAgICAgb3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggai0tICkge1xuICAgICAgICBoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG4gICAgICAgIGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcbiAgICAgICAgICAoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuICAgICAgICAgICggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcbiAgICAgICAgICAoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG4gICAgICAgICAgICBzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuICAgICAgICAgIGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG4gICAgICAgICAgaWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG4gICAgICAgICAgICBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG4gICAgICAgICAgICBzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuICAgICAgLy8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG4gICAgICBpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuICAgICAgICBpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG4gICAgICAgICAgc3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cbiAgICAgICAgICBqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG4gICAgaWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG4gICAgICBkZWxldGUgZWxlbURhdGEuaGFuZGxlO1xuICAgICAgZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImV2ZW50c1wiICk7XG4gICAgfVxuICB9LFxuXG4gIHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG4gICAgdmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCxcbiAgICAgIGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuICAgICAgdHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcbiAgICAgIG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdChcIi5cIikgOiBbXTtcblxuICAgIGN1ciA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG4gICAgLy8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcbiAgICBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcbiAgICBpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCB0eXBlLmluZGV4T2YoXCIuXCIpID4gLTEgKSB7XG4gICAgICAvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG4gICAgICBuYW1lc3BhY2VzID0gdHlwZS5zcGxpdChcIi5cIik7XG4gICAgICB0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuICAgICAgbmFtZXNwYWNlcy5zb3J0KCk7XG4gICAgfVxuICAgIG9udHlwZSA9IHR5cGUuaW5kZXhPZihcIjpcIikgPCAwICYmIFwib25cIiArIHR5cGU7XG5cbiAgICAvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcbiAgICBldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cbiAgICAgIGV2ZW50IDpcbiAgICAgIG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG4gICAgLy8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuICAgIGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuICAgIGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbihcIi5cIik7XG4gICAgZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG4gICAgICBuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikgKyBcIihcXFxcLnwkKVwiICkgOlxuICAgICAgbnVsbDtcblxuICAgIC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuICAgIGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAoICFldmVudC50YXJnZXQgKSB7XG4gICAgICBldmVudC50YXJnZXQgPSBlbGVtO1xuICAgIH1cblxuICAgIC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3RcbiAgICBkYXRhID0gZGF0YSA9PSBudWxsID9cbiAgICAgIFsgZXZlbnQgXSA6XG4gICAgICBqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuICAgIC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcbiAgICBzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcbiAgICBpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcbiAgICAvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuICAgIGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cbiAgICAgIGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuICAgICAgaWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcbiAgICAgICAgY3VyID0gY3VyLnBhcmVudE5vZGU7XG4gICAgICB9XG4gICAgICBmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG4gICAgICAgIGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcbiAgICAgICAgdG1wID0gY3VyO1xuICAgICAgfVxuXG4gICAgICAvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcbiAgICAgIGlmICggdG1wID09PSAoZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50KSApIHtcbiAgICAgICAgZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcbiAgICBpID0gMDtcbiAgICB3aGlsZSAoIChjdXIgPSBldmVudFBhdGhbaSsrXSkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cbiAgICAgIGV2ZW50LnR5cGUgPSBpID4gMSA/XG4gICAgICAgIGJ1YmJsZVR5cGUgOlxuICAgICAgICBzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cbiAgICAgIC8vIGpRdWVyeSBoYW5kbGVyXG4gICAgICBoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmXG4gICAgICAgIGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG4gICAgICBpZiAoIGhhbmRsZSApIHtcbiAgICAgICAgaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcbiAgICAgIH1cblxuICAgICAgLy8gTmF0aXZlIGhhbmRsZXJcbiAgICAgIGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuICAgICAgaWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGpRdWVyeS5hY2NlcHREYXRhKCBjdXIgKSApIHtcbiAgICAgICAgZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcbiAgICAgICAgaWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZXZlbnQudHlwZSA9IHR5cGU7XG5cbiAgICAvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG4gICAgaWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuICAgICAgaWYgKCAoIXNwZWNpYWwuX2RlZmF1bHQgfHwgc3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlKSAmJlxuICAgICAgICBqUXVlcnkuYWNjZXB0RGF0YSggZWxlbSApICkge1xuXG4gICAgICAgIC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBuYW1lIGFzIHRoZSBldmVudC5cbiAgICAgICAgLy8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuICAgICAgICBpZiAoIG9udHlwZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG4gICAgICAgICAgLy8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuICAgICAgICAgIHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG4gICAgICAgICAgaWYgKCB0bXAgKSB7XG4gICAgICAgICAgICBlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcbiAgICAgICAgICBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcbiAgICAgICAgICBlbGVtWyB0eXBlIF0oKTtcbiAgICAgICAgICBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKCB0bXAgKSB7XG4gICAgICAgICAgICBlbGVtWyBvbnR5cGUgXSA9IHRtcDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZXZlbnQucmVzdWx0O1xuICB9LFxuXG4gIGRpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cbiAgICAvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3RcbiAgICBldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICk7XG5cbiAgICB2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosXG4gICAgICBoYW5kbGVyUXVldWUgPSBbXSxcbiAgICAgIGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcbiAgICAgIGhhbmRsZXJzID0gKCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gfHwgW10sXG4gICAgICBzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuICAgIC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG4gICAgYXJnc1swXSA9IGV2ZW50O1xuICAgIGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuICAgIC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcbiAgICBpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBEZXRlcm1pbmUgaGFuZGxlcnNcbiAgICBoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cbiAgICAvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuICAgIGkgPSAwO1xuICAgIHdoaWxlICggKG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcbiAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cbiAgICAgIGogPSAwO1xuICAgICAgd2hpbGUgKCAoaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0pICYmXG4gICAgICAgICFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG4gICAgICAgIC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2UocylcbiAgICAgICAgLy8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG4gICAgICAgIGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cbiAgICAgICAgICBldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG4gICAgICAgICAgZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG4gICAgICAgICAgcmV0ID0gKCAoalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9KS5oYW5kbGUgfHxcbiAgICAgICAgICAgIGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG4gICAgICAgICAgaWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgIGlmICggKGV2ZW50LnJlc3VsdCA9IHJldCkgPT09IGZhbHNlICkge1xuICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG4gICAgaWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcbiAgICAgIHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV2ZW50LnJlc3VsdDtcbiAgfSxcblxuICBoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcbiAgICB2YXIgaSwgbWF0Y2hlcywgc2VsLCBoYW5kbGVPYmosXG4gICAgICBoYW5kbGVyUXVldWUgPSBbXSxcbiAgICAgIGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuICAgICAgY3VyID0gZXZlbnQudGFyZ2V0O1xuXG4gICAgLy8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuICAgIC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICgjMTMxODApXG4gICAgLy8gQXZvaWQgbm9uLWxlZnQtY2xpY2sgYnViYmxpbmcgaW4gRmlyZWZveCAoIzM4NjEpXG4gICAgaWYgKCBkZWxlZ2F0ZUNvdW50ICYmIGN1ci5ub2RlVHlwZSAmJiAoIWV2ZW50LmJ1dHRvbiB8fCBldmVudC50eXBlICE9PSBcImNsaWNrXCIpICkge1xuXG4gICAgICBmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuICAgICAgICAvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcbiAgICAgICAgaWYgKCBjdXIuZGlzYWJsZWQgIT09IHRydWUgfHwgZXZlbnQudHlwZSAhPT0gXCJjbGlja1wiICkge1xuICAgICAgICAgIG1hdGNoZXMgPSBbXTtcbiAgICAgICAgICBmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcbiAgICAgICAgICAgIGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cbiAgICAgICAgICAgIC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG4gICAgICAgICAgICBzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuICAgICAgICAgICAgaWYgKCBtYXRjaGVzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgICAgICBtYXRjaGVzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuICAgICAgICAgICAgICAgIGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuICAgICAgICAgICAgICAgIGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIG1hdGNoZXNbIHNlbCBdICkge1xuICAgICAgICAgICAgICBtYXRjaGVzLnB1c2goIGhhbmRsZU9iaiApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIG1hdGNoZXMubGVuZ3RoICkge1xuICAgICAgICAgICAgaGFuZGxlclF1ZXVlLnB1c2goeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVzIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcbiAgICBpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG4gICAgICBoYW5kbGVyUXVldWUucHVzaCh7IGVsZW06IHRoaXMsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBoYW5kbGVyUXVldWU7XG4gIH0sXG5cbiAgLy8gSW5jbHVkZXMgc29tZSBldmVudCBwcm9wcyBzaGFyZWQgYnkgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnRcbiAgcHJvcHM6ICggXCJhbHRLZXkgYnViYmxlcyBjYW5jZWxhYmxlIGN0cmxLZXkgY3VycmVudFRhcmdldCBkZXRhaWwgZXZlbnRQaGFzZSBcIiArXG4gICAgXCJtZXRhS2V5IHJlbGF0ZWRUYXJnZXQgc2hpZnRLZXkgdGFyZ2V0IHRpbWVTdGFtcCB2aWV3IHdoaWNoXCIgKS5zcGxpdChcIiBcIiksXG5cbiAgZml4SG9va3M6IHt9LFxuXG4gIGtleUhvb2tzOiB7XG4gICAgcHJvcHM6IFwiY2hhciBjaGFyQ29kZSBrZXkga2V5Q29kZVwiLnNwbGl0KFwiIFwiKSxcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7XG5cbiAgICAgIC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuICAgICAgaWYgKCBldmVudC53aGljaCA9PSBudWxsICkge1xuICAgICAgICBldmVudC53aGljaCA9IG9yaWdpbmFsLmNoYXJDb2RlICE9IG51bGwgPyBvcmlnaW5hbC5jaGFyQ29kZSA6IG9yaWdpbmFsLmtleUNvZGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBldmVudDtcbiAgICB9XG4gIH0sXG5cbiAgbW91c2VIb29rczoge1xuICAgIHByb3BzOiAoIFwiYnV0dG9uIGJ1dHRvbnMgY2xpZW50WCBjbGllbnRZIG9mZnNldFggb2Zmc2V0WSBwYWdlWCBwYWdlWSBcIiArXG4gICAgICBcInNjcmVlblggc2NyZWVuWSB0b0VsZW1lbnRcIiApLnNwbGl0KFwiIFwiKSxcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7XG4gICAgICB2YXIgZXZlbnREb2MsIGRvYywgYm9keSxcbiAgICAgICAgYnV0dG9uID0gb3JpZ2luYWwuYnV0dG9uO1xuXG4gICAgICAvLyBDYWxjdWxhdGUgcGFnZVgvWSBpZiBtaXNzaW5nIGFuZCBjbGllbnRYL1kgYXZhaWxhYmxlXG4gICAgICBpZiAoIGV2ZW50LnBhZ2VYID09IG51bGwgJiYgb3JpZ2luYWwuY2xpZW50WCAhPSBudWxsICkge1xuICAgICAgICBldmVudERvYyA9IGV2ZW50LnRhcmdldC5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50O1xuICAgICAgICBkb2MgPSBldmVudERvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIGJvZHkgPSBldmVudERvYy5ib2R5O1xuXG4gICAgICAgIGV2ZW50LnBhZ2VYID0gb3JpZ2luYWwuY2xpZW50WCArXG4gICAgICAgICAgKCBkb2MgJiYgZG9jLnNjcm9sbExlZnQgfHwgYm9keSAmJiBib2R5LnNjcm9sbExlZnQgfHwgMCApIC1cbiAgICAgICAgICAoIGRvYyAmJiBkb2MuY2xpZW50TGVmdCB8fCBib2R5ICYmIGJvZHkuY2xpZW50TGVmdCB8fCAwICk7XG4gICAgICAgIGV2ZW50LnBhZ2VZID0gb3JpZ2luYWwuY2xpZW50WSArXG4gICAgICAgICAgKCBkb2MgJiYgZG9jLnNjcm9sbFRvcCAgfHwgYm9keSAmJiBib2R5LnNjcm9sbFRvcCAgfHwgMCApIC1cbiAgICAgICAgICAoIGRvYyAmJiBkb2MuY2xpZW50VG9wICB8fCBib2R5ICYmIGJvZHkuY2xpZW50VG9wICB8fCAwICk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcbiAgICAgIC8vIE5vdGU6IGJ1dHRvbiBpcyBub3Qgbm9ybWFsaXplZCwgc28gZG9uJ3QgdXNlIGl0XG4gICAgICBpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgZXZlbnQud2hpY2ggPSAoIGJ1dHRvbiAmIDEgPyAxIDogKCBidXR0b24gJiAyID8gMyA6ICggYnV0dG9uICYgNCA/IDIgOiAwICkgKSApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfVxuICB9LFxuXG4gIGZpeDogZnVuY3Rpb24oIGV2ZW50ICkge1xuICAgIGlmICggZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gKSB7XG4gICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGEgd3JpdGFibGUgY29weSBvZiB0aGUgZXZlbnQgb2JqZWN0IGFuZCBub3JtYWxpemUgc29tZSBwcm9wZXJ0aWVzXG4gICAgdmFyIGksIHByb3AsIGNvcHksXG4gICAgICB0eXBlID0gZXZlbnQudHlwZSxcbiAgICAgIG9yaWdpbmFsRXZlbnQgPSBldmVudCxcbiAgICAgIGZpeEhvb2sgPSB0aGlzLmZpeEhvb2tzWyB0eXBlIF07XG5cbiAgICBpZiAoICFmaXhIb29rICkge1xuICAgICAgdGhpcy5maXhIb29rc1sgdHlwZSBdID0gZml4SG9vayA9XG4gICAgICAgIHJtb3VzZUV2ZW50LnRlc3QoIHR5cGUgKSA/IHRoaXMubW91c2VIb29rcyA6XG4gICAgICAgIHJrZXlFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLmtleUhvb2tzIDpcbiAgICAgICAge307XG4gICAgfVxuICAgIGNvcHkgPSBmaXhIb29rLnByb3BzID8gdGhpcy5wcm9wcy5jb25jYXQoIGZpeEhvb2sucHJvcHMgKSA6IHRoaXMucHJvcHM7XG5cbiAgICBldmVudCA9IG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblxuICAgIGkgPSBjb3B5Lmxlbmd0aDtcbiAgICB3aGlsZSAoIGktLSApIHtcbiAgICAgIHByb3AgPSBjb3B5WyBpIF07XG4gICAgICBldmVudFsgcHJvcCBdID0gb3JpZ2luYWxFdmVudFsgcHJvcCBdO1xuICAgIH1cblxuICAgIC8vIFN1cHBvcnQ6IFNhZmFyaSA2LjArXG4gICAgLy8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0MylcbiAgICBpZiAoIGV2ZW50LnRhcmdldC5ub2RlVHlwZSA9PT0gMyApIHtcbiAgICAgIGV2ZW50LnRhcmdldCA9IGV2ZW50LnRhcmdldC5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIHJldHVybiBmaXhIb29rLmZpbHRlciA/IGZpeEhvb2suZmlsdGVyKCBldmVudCwgb3JpZ2luYWxFdmVudCApIDogZXZlbnQ7XG4gIH0sXG5cbiAgc3BlY2lhbDoge1xuICAgIGxvYWQ6IHtcbiAgICAgIC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcbiAgICAgIG5vQnViYmxlOiB0cnVlXG4gICAgfSxcbiAgICBmb2N1czoge1xuICAgICAgLy8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG4gICAgICB0cmlnZ2VyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XG4gICAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcbiAgICB9LFxuICAgIGJsdXI6IHtcbiAgICAgIHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuICAgICAgICAgIHRoaXMuYmx1cigpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXG4gICAgfSxcbiAgICBjbGljazoge1xuICAgICAgLy8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcbiAgICAgIHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICYmIHRoaXMuY2xpY2sgJiYgalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSApIHtcbiAgICAgICAgICB0aGlzLmNsaWNrKCk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3NcbiAgICAgIF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG4gICAgICAgIHJldHVybiBqUXVlcnkubm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYmVmb3JldW5sb2FkOiB7XG4gICAgICBwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuICAgICAgICAvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuICAgICAgICAvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG4gICAgICAgIGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcbiAgICAgICAgICBldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQsIGJ1YmJsZSApIHtcbiAgICAvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmUuXG4gICAgLy8gRmFrZSBvcmlnaW5hbEV2ZW50IHRvIGF2b2lkIGRvbm9yJ3Mgc3RvcFByb3BhZ2F0aW9uLCBidXQgaWYgdGhlXG4gICAgLy8gc2ltdWxhdGVkIGV2ZW50IHByZXZlbnRzIGRlZmF1bHQgdGhlbiB3ZSBkbyB0aGUgc2FtZSBvbiB0aGUgZG9ub3IuXG4gICAgdmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuICAgICAgbmV3IGpRdWVyeS5FdmVudCgpLFxuICAgICAgZXZlbnQsXG4gICAgICB7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIGlzU2ltdWxhdGVkOiB0cnVlLFxuICAgICAgICBvcmlnaW5hbEV2ZW50OiB7fVxuICAgICAgfVxuICAgICk7XG4gICAgaWYgKCBidWJibGUgKSB7XG4gICAgICBqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuICAgIH0gZWxzZSB7XG4gICAgICBqUXVlcnkuZXZlbnQuZGlzcGF0Y2guY2FsbCggZWxlbSwgZSApO1xuICAgIH1cbiAgICBpZiAoIGUuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcbiAgaWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG4gICAgZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUsIGZhbHNlICk7XG4gIH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuICAvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcbiAgaWYgKCAhKHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQpICkge1xuICAgIHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG4gIH1cblxuICAvLyBFdmVudCBvYmplY3RcbiAgaWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG4gICAgdGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuICAgIHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG4gICAgLy8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcbiAgICAvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cbiAgICB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG4gICAgICAgIHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgLy8gU3VwcG9ydDogQW5kcm9pZDw0LjBcbiAgICAgICAgc3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG4gICAgICByZXR1cm5UcnVlIDpcbiAgICAgIHJldHVybkZhbHNlO1xuXG4gIC8vIEV2ZW50IHR5cGVcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnR5cGUgPSBzcmM7XG4gIH1cblxuICAvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuICBpZiAoIHByb3BzICkge1xuICAgIGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG4gIH1cblxuICAvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuICB0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IGpRdWVyeS5ub3coKTtcblxuICAvLyBNYXJrIGl0IGFzIGZpeGVkXG4gIHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG4gIGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG4gIGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcbiAgaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXG4gIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuICAgIGlmICggZSAmJiBlLnByZXZlbnREZWZhdWx0ICkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSxcbiAgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG4gICAgaWYgKCBlICYmIGUuc3RvcFByb3BhZ2F0aW9uICkge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH0sXG4gIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cbiAgICB0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuICAgIGlmICggZSAmJiBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiApIHtcbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgfVxuXG4gICAgdGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxufTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vIFN1cHBvcnQ6IFNhZmFyaTw3LjBcbi8vIFNhZmFyaSBkb2Vzbid0IHN1cHBvcnQgbW91c2VlbnRlci9tb3VzZWxlYXZlIGF0IGFsbC5cbi8vIFN1cHBvcnQ6IENocm9tZSA0MCtcbi8vIE1vdXNlZW50ZXIgZG9lc24ndCBwZXJmb3JtIHdoaWxlIGxlZnQgbW91c2UgYnV0dG9uIGlzIHByZXNzZWRcbi8vIChhbmQgaW5pdGlhdGVkIG91dHNpZGUgdGhlIG9ic2VydmVkIGVsZW1lbnQpXG4vLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MzMzODY4XG5qUXVlcnkuZWFjaCh7XG4gIG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG4gIG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcbiAgcG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG4gIHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG4gIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG4gICAgZGVsZWdhdGVUeXBlOiBmaXgsXG4gICAgYmluZFR5cGU6IGZpeCxcblxuICAgIGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuICAgICAgdmFyIHJldCxcbiAgICAgICAgdGFyZ2V0ID0gdGhpcyxcbiAgICAgICAgcmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG4gICAgICAgIGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuICAgICAgLy8gRm9yIG1vdXNlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuICAgICAgLy8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcbiAgICAgIGlmICggIXJlbGF0ZWQgfHwgKHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSkgKSB7XG4gICAgICAgIGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG4gICAgICAgIHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgICAgICAgZXZlbnQudHlwZSA9IGZpeDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICB9O1xufSk7XG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3gsIENocm9tZSwgU2FmYXJpXG4vLyBDcmVhdGUgXCJidWJibGluZ1wiIGZvY3VzIGFuZCBibHVyIGV2ZW50c1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luQnViYmxlcyApIHtcbiAgalF1ZXJ5LmVhY2goeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG4gICAgLy8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcbiAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgICAgICAgalF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSwgdHJ1ZSApO1xuICAgICAgfTtcblxuICAgIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcbiAgICAgIHNldHVwOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuICAgICAgICAgIGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG4gICAgICAgIGlmICggIWF0dGFjaGVzICkge1xuICAgICAgICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG4gICAgICAgIH1cbiAgICAgICAgZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG4gICAgICB9LFxuICAgICAgdGVhcmRvd246IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG4gICAgICAgICAgYXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG4gICAgICAgIGlmICggIWF0dGFjaGVzICkge1xuICAgICAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG4gICAgICAgICAgZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH0pO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblxuICBvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIC8qSU5URVJOQUwqLyBvbmUgKSB7XG4gICAgdmFyIG9yaWdGbiwgdHlwZTtcblxuICAgIC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuICAgIGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuICAgICAgLy8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcbiAgICAgIGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuICAgICAgICAvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG4gICAgICAgIGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuICAgICAgICBzZWxlY3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG4gICAgICAgIHRoaXMub24oIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG4gICAgICAvLyAoIHR5cGVzLCBmbiApXG4gICAgICBmbiA9IHNlbGVjdG9yO1xuICAgICAgZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG4gICAgICBpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcbiAgICAgICAgLy8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcbiAgICAgICAgZm4gPSBkYXRhO1xuICAgICAgICBkYXRhID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gKCB0eXBlcywgZGF0YSwgZm4gKVxuICAgICAgICBmbiA9IGRhdGE7XG4gICAgICAgIGRhdGEgPSBzZWxlY3RvcjtcbiAgICAgICAgc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICggZm4gPT09IGZhbHNlICkge1xuICAgICAgZm4gPSByZXR1cm5GYWxzZTtcbiAgICB9IGVsc2UgaWYgKCAhZm4gKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZiAoIG9uZSA9PT0gMSApIHtcbiAgICAgIG9yaWdGbiA9IGZuO1xuICAgICAgZm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gICAgICAgIC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuICAgICAgICBqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG4gICAgICAgIHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuICAgICAgfTtcbiAgICAgIC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG4gICAgICBmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG4gICAgICBqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG4gICAgfSk7XG4gIH0sXG4gIG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG4gICAgcmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcbiAgfSxcbiAgb2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcbiAgICB2YXIgaGFuZGxlT2JqLCB0eXBlO1xuICAgIGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuICAgICAgLy8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuICAgICAgaGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuICAgICAgalF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcbiAgICAgICAgaGFuZGxlT2JqLm5hbWVzcGFjZSA/XG4gICAgICAgICAgaGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcbiAgICAgICAgICBoYW5kbGVPYmoub3JpZ1R5cGUsXG4gICAgICAgIGhhbmRsZU9iai5zZWxlY3RvcixcbiAgICAgICAgaGFuZGxlT2JqLmhhbmRsZXJcbiAgICAgICk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgaWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG4gICAgICAvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuICAgICAgZm9yICggdHlwZSBpbiB0eXBlcyApIHtcbiAgICAgICAgdGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgaWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG4gICAgICAvLyAoIHR5cGVzIFssIGZuXSApXG4gICAgICBmbiA9IHNlbGVjdG9yO1xuICAgICAgc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICggZm4gPT09IGZhbHNlICkge1xuICAgICAgZm4gPSByZXR1cm5GYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcbiAgICB9KTtcbiAgfSxcblxuICB0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcbiAgICB9KTtcbiAgfSxcbiAgdHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuICAgIHZhciBlbGVtID0gdGhpc1swXTtcbiAgICBpZiAoIGVsZW0gKSB7XG4gICAgICByZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5cbnZhclxuICByeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbXFx3Oi1dKylbXj5dKilcXC8+L2dpLFxuICBydGFnTmFtZSA9IC88KFtcXHc6LV0rKS8sXG4gIHJodG1sID0gLzx8JiM/XFx3KzsvLFxuICBybm9Jbm5lcmh0bWwgPSAvPCg/OnNjcmlwdHxzdHlsZXxsaW5rKS9pLFxuICAvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcbiAgcmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuICByc2NyaXB0VHlwZSA9IC9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2ksXG4gIHJzY3JpcHRUeXBlTWFza2VkID0gL150cnVlXFwvKC4qKS8sXG4gIHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZyxcblxuICAvLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxuICB3cmFwTWFwID0ge1xuXG4gICAgLy8gU3VwcG9ydDogSUU5XG4gICAgb3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cbiAgICB0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG4gICAgY29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcbiAgICB0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG4gICAgdGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG4gICAgX2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG4gIH07XG5cbi8vIFN1cHBvcnQ6IElFOVxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cbi8vIE1hbmlwdWxhdGluZyB0YWJsZXMgcmVxdWlyZXMgYSB0Ym9keVxuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuICByZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuICAgIGpRdWVyeS5ub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSA/XG5cbiAgICBlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidGJvZHlcIilbMF0gfHxcbiAgICAgIGVsZW0uYXBwZW5kQ2hpbGQoIGVsZW0ub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGJvZHlcIikgKSA6XG4gICAgZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcbiAgZWxlbS50eXBlID0gKGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSAhPT0gbnVsbCkgKyBcIi9cIiArIGVsZW0udHlwZTtcbiAgcmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuICB2YXIgbWF0Y2ggPSByc2NyaXB0VHlwZU1hc2tlZC5leGVjKCBlbGVtLnR5cGUgKTtcblxuICBpZiAoIG1hdGNoICkge1xuICAgIGVsZW0udHlwZSA9IG1hdGNoWyAxIF07XG4gIH0gZWxzZSB7XG4gICAgZWxlbS5yZW1vdmVBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xuICB9XG5cbiAgcmV0dXJuIGVsZW07XG59XG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuICB2YXIgaSA9IDAsXG4gICAgbCA9IGVsZW1zLmxlbmd0aDtcblxuICBmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG4gICAgZGF0YVByaXYuc2V0KFxuICAgICAgZWxlbXNbIGkgXSwgXCJnbG9iYWxFdmFsXCIsICFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG4gIHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG4gIGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuICBpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuICAgIHBkYXRhT2xkID0gZGF0YVByaXYuYWNjZXNzKCBzcmMgKTtcbiAgICBwZGF0YUN1ciA9IGRhdGFQcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcbiAgICBldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cbiAgICBpZiAoIGV2ZW50cyApIHtcbiAgICAgIGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG4gICAgICBwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuICAgICAgZm9yICggdHlwZSBpbiBldmVudHMgKSB7XG4gICAgICAgIGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuICAgICAgICAgIGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIDIuIENvcHkgdXNlciBkYXRhXG4gIGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG4gICAgdWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuICAgIHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cbiAgICBkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG4gIC8vIFN1cHBvcnQ6IElFOS0xMStcbiAgLy8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuICB2YXIgcmV0ID0gdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgP1xuICAgICAgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICkgOlxuICAgICAgdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiA/XG4gICAgICAgIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICkgOlxuICAgICAgW107XG5cbiAgcmV0dXJuIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBqUXVlcnkubm9kZU5hbWUoIGNvbnRleHQsIHRhZyApID9cbiAgICBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKSA6XG4gICAgcmV0O1xufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG4gIHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cbiAgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG4gICAgZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cbiAgLy8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcbiAgfSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuICAgIGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcbiAgfVxufVxuXG5qUXVlcnkuZXh0ZW5kKHtcbiAgY2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcbiAgICB2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcbiAgICAgIGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcbiAgICAgIGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cbiAgICAvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcbiAgICBpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG4gICAgICAgICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuICAgICAgLy8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcbiAgICAgIGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcbiAgICAgIHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cbiAgICAgIGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuICAgICAgICBmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG4gICAgaWYgKCBkYXRhQW5kRXZlbnRzICkge1xuICAgICAgaWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcbiAgICAgICAgc3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcbiAgICAgICAgZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuICAgICAgICBmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcbiAgICAgICAgICBjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuICAgIGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcbiAgICBpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuICAgICAgc2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG4gICAgcmV0dXJuIGNsb25lO1xuICB9LFxuXG4gIGJ1aWxkRnJhZ21lbnQ6IGZ1bmN0aW9uKCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uICkge1xuICAgIHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXG4gICAgICBmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuICAgICAgbm9kZXMgPSBbXSxcbiAgICAgIGkgPSAwLFxuICAgICAgbCA9IGVsZW1zLmxlbmd0aDtcblxuICAgIGZvciAoIDsgaSA8IGw7IGkrKyApIHtcbiAgICAgIGVsZW0gPSBlbGVtc1sgaSBdO1xuXG4gICAgICBpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuICAgICAgICAvLyBBZGQgbm9kZXMgZGlyZWN0bHlcbiAgICAgICAgaWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuICAgICAgICAgIC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBQaGFudG9tSlM8MlxuICAgICAgICAgIC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcbiAgICAgICAgICBqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cbiAgICAgICAgLy8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG4gICAgICAgIH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG4gICAgICAgICAgbm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cbiAgICAgICAgLy8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgKTtcblxuICAgICAgICAgIC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cbiAgICAgICAgICB0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICB3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcbiAgICAgICAgICB0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgZWxlbS5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKSArIHdyYXBbIDIgXTtcblxuICAgICAgICAgIC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuICAgICAgICAgIGogPSB3cmFwWyAwIF07XG4gICAgICAgICAgd2hpbGUgKCBqLS0gKSB7XG4gICAgICAgICAgICB0bXAgPSB0bXAubGFzdENoaWxkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBQaGFudG9tSlM8MlxuICAgICAgICAgIC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcbiAgICAgICAgICBqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG4gICAgICAgICAgLy8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcbiAgICAgICAgICB0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG4gICAgICAgICAgLy8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuICAgICAgICAgIHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG4gICAgZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG4gICAgaSA9IDA7XG4gICAgd2hpbGUgKCAoZWxlbSA9IG5vZGVzWyBpKysgXSkgKSB7XG5cbiAgICAgIC8vICM0MDg3IC0gSWYgb3JpZ2luIGFuZCBkZXN0aW5hdGlvbiBlbGVtZW50cyBhcmUgdGhlIHNhbWUsIGFuZCB0aGlzIGlzXG4gICAgICAvLyB0aGF0IGVsZW1lbnQsIGRvIG5vdCBkbyBhbnl0aGluZ1xuICAgICAgaWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb250YWlucyA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cbiAgICAgIC8vIEFwcGVuZCB0byBmcmFnbWVudFxuICAgICAgdG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cbiAgICAgIC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3RvcnlcbiAgICAgIGlmICggY29udGFpbnMgKSB7XG4gICAgICAgIHNldEdsb2JhbEV2YWwoIHRtcCApO1xuICAgICAgfVxuXG4gICAgICAvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG4gICAgICBpZiAoIHNjcmlwdHMgKSB7XG4gICAgICAgIGogPSAwO1xuICAgICAgICB3aGlsZSAoIChlbGVtID0gdG1wWyBqKysgXSkgKSB7XG4gICAgICAgICAgaWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuICAgICAgICAgICAgc2NyaXB0cy5wdXNoKCBlbGVtICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZyYWdtZW50O1xuICB9LFxuXG4gIGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuICAgIHZhciBkYXRhLCBlbGVtLCB0eXBlLCBrZXksXG4gICAgICBzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG4gICAgICBpID0gMDtcblxuICAgIGZvciAoIDsgKGVsZW0gPSBlbGVtc1sgaSBdKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG4gICAgICBpZiAoIGpRdWVyeS5hY2NlcHREYXRhKCBlbGVtICkgKSB7XG4gICAgICAgIGtleSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXTtcblxuICAgICAgICBpZiAoIGtleSAmJiAoZGF0YSA9IGRhdGFQcml2LmNhY2hlWyBrZXkgXSkgKSB7XG4gICAgICAgICAgaWYgKCBkYXRhLmV2ZW50cyApIHtcbiAgICAgICAgICAgIGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG4gICAgICAgICAgICAgIGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuICAgICAgICAgICAgICAgIGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgalF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICggZGF0YVByaXYuY2FjaGVbIGtleSBdICkge1xuICAgICAgICAgICAgLy8gRGlzY2FyZCBhbnkgcmVtYWluaW5nIGBwcml2YXRlYCBkYXRhXG4gICAgICAgICAgICBkZWxldGUgZGF0YVByaXYuY2FjaGVbIGtleSBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRGlzY2FyZCBhbnkgcmVtYWluaW5nIGB1c2VyYCBkYXRhXG4gICAgICBkZWxldGUgZGF0YVVzZXIuY2FjaGVbIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSBdO1xuICAgIH1cbiAgfVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuICB0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG4gICAgcmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuICAgICAgICBqUXVlcnkudGV4dCggdGhpcyApIDpcbiAgICAgICAgdGhpcy5lbXB0eSgpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG4gICAgICAgICAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuICB9LFxuXG4gIGFwcGVuZDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICBpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuICAgICAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBwcmVwZW5kOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgIGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG4gICAgICAgIHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgYmVmb3JlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgIGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuICAgICAgICB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgYWZ0ZXI6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgaWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG4gICAgICAgIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICByZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3Rvciwga2VlcERhdGEgLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG4gICAgdmFyIGVsZW0sXG4gICAgICBlbGVtcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIHRoaXMgKSA6IHRoaXMsXG4gICAgICBpID0gMDtcblxuICAgIGZvciAoIDsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuICAgICAgaWYgKCAha2VlcERhdGEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcbiAgICAgICAgalF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtICkgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG4gICAgICAgIGlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcbiAgICAgICAgICBzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuICAgICAgICB9XG4gICAgICAgIGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWxlbSApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIGVtcHR5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZWxlbSxcbiAgICAgIGkgPSAwO1xuXG4gICAgZm9yICggOyAoZWxlbSA9IHRoaXNbaV0pICE9IG51bGw7IGkrKyApIHtcbiAgICAgIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuICAgICAgICAvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuICAgICAgICBqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuICAgICAgICAvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuICAgICAgICBlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuICAgIGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG4gICAgZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcbiAgICB9KTtcbiAgfSxcblxuICBodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG4gICAgcmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuICAgICAgdmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG4gICAgICAgIGkgPSAwLFxuICAgICAgICBsID0gdGhpcy5sZW5ndGg7XG5cbiAgICAgIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuICAgICAgICByZXR1cm4gZWxlbS5pbm5lckhUTUw7XG4gICAgICB9XG5cbiAgICAgIC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcbiAgICAgIGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuICAgICAgICAhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoIDsgaSA8IGw7IGkrKyApIHtcbiAgICAgICAgICAgIGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuICAgICAgICAgICAgaWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuICAgICAgICAgICAgICBqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcbiAgICAgICAgICAgICAgZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlbGVtID0gMDtcblxuICAgICAgICAvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2RcbiAgICAgICAgfSBjYXRjaCAoIGUgKSB7fVxuICAgICAgfVxuXG4gICAgICBpZiAoIGVsZW0gKSB7XG4gICAgICAgIHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG4gICAgICB9XG4gICAgfSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcbiAgfSxcblxuICByZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZyA9IGFyZ3VtZW50c1sgMCBdO1xuXG4gICAgLy8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG4gICAgdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgIGFyZyA9IHRoaXMucGFyZW50Tm9kZTtcblxuICAgICAgalF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblxuICAgICAgaWYgKCBhcmcgKSB7XG4gICAgICAgIGFyZy5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEZvcmNlIHJlbW92YWwgaWYgdGhlcmUgd2FzIG5vIG5ldyBjb250ZW50IChlLmcuLCBmcm9tIGVtcHR5IGFyZ3VtZW50cylcbiAgICByZXR1cm4gYXJnICYmIChhcmcubGVuZ3RoIHx8IGFyZy5ub2RlVHlwZSkgPyB0aGlzIDogdGhpcy5yZW1vdmUoKTtcbiAgfSxcblxuICBkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcbiAgICByZXR1cm4gdGhpcy5yZW1vdmUoIHNlbGVjdG9yLCB0cnVlICk7XG4gIH0sXG5cbiAgZG9tTWFuaXA6IGZ1bmN0aW9uKCBhcmdzLCBjYWxsYmFjayApIHtcblxuICAgIC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcbiAgICBhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG4gICAgdmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuICAgICAgaSA9IDAsXG4gICAgICBsID0gdGhpcy5sZW5ndGgsXG4gICAgICBzZXQgPSB0aGlzLFxuICAgICAgaU5vQ2xvbmUgPSBsIC0gMSxcbiAgICAgIHZhbHVlID0gYXJnc1sgMCBdLFxuICAgICAgaXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG4gICAgLy8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG4gICAgaWYgKCBpc0Z1bmN0aW9uIHx8XG4gICAgICAgICggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgIXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpbmRleCApIHtcbiAgICAgICAgdmFyIHNlbGYgPSBzZXQuZXEoIGluZGV4ICk7XG4gICAgICAgIGlmICggaXNGdW5jdGlvbiApIHtcbiAgICAgICAgICBhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLmRvbU1hbmlwKCBhcmdzLCBjYWxsYmFjayApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCBsICkge1xuICAgICAgZnJhZ21lbnQgPSBqUXVlcnkuYnVpbGRGcmFnbWVudCggYXJncywgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCB0aGlzICk7XG4gICAgICBmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cbiAgICAgIGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG4gICAgICAgIGZyYWdtZW50ID0gZmlyc3Q7XG4gICAgICB9XG5cbiAgICAgIGlmICggZmlyc3QgKSB7XG4gICAgICAgIHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcbiAgICAgICAgaGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG4gICAgICAgIC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cbiAgICAgICAgLy8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG4gICAgICAgIC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG4gICAgICAgIGZvciAoIDsgaSA8IGw7IGkrKyApIHtcbiAgICAgICAgICBub2RlID0gZnJhZ21lbnQ7XG5cbiAgICAgICAgICBpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuICAgICAgICAgICAgbm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG4gICAgICAgICAgICAvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG4gICAgICAgICAgICBpZiAoIGhhc1NjcmlwdHMgKSB7XG4gICAgICAgICAgICAgIC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBQaGFudG9tSlM8MlxuICAgICAgICAgICAgICAvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG4gICAgICAgICAgICAgIGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjYWxsYmFjay5jYWxsKCB0aGlzWyBpIF0sIG5vZGUsIGkgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggaGFzU2NyaXB0cyApIHtcbiAgICAgICAgICBkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG4gICAgICAgICAgLy8gUmVlbmFibGUgc2NyaXB0c1xuICAgICAgICAgIGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuICAgICAgICAgIC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cbiAgICAgICAgICBmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcbiAgICAgICAgICAgIG5vZGUgPSBzY3JpcHRzWyBpIF07XG4gICAgICAgICAgICBpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcbiAgICAgICAgICAgICAgIWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuICAgICAgICAgICAgICBqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG4gICAgICAgICAgICAgIGlmICggbm9kZS5zcmMgKSB7XG4gICAgICAgICAgICAgICAgLy8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcbiAgICAgICAgICAgICAgICBpZiAoIGpRdWVyeS5fZXZhbFVybCApIHtcbiAgICAgICAgICAgICAgICAgIGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgalF1ZXJ5Lmdsb2JhbEV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICkgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59KTtcblxualF1ZXJ5LmVhY2goe1xuICBhcHBlbmRUbzogXCJhcHBlbmRcIixcbiAgcHJlcGVuZFRvOiBcInByZXBlbmRcIixcbiAgaW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuICBpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuICByZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcbiAgalF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG4gICAgdmFyIGVsZW1zLFxuICAgICAgcmV0ID0gW10sXG4gICAgICBpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG4gICAgICBsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG4gICAgICBpID0gMDtcblxuICAgIGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG4gICAgICBlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuICAgICAgalF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG4gICAgICAvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMSwgUGhhbnRvbUpTPDJcbiAgICAgIC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcbiAgICAgIHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuICB9O1xufSk7XG5cblxudmFyIGlmcmFtZSxcbiAgZWxlbWRpc3BsYXkgPSB7XG5cbiAgICAvLyBTdXBwb3J0OiBGaXJlZm94XG4gICAgLy8gV2UgaGF2ZSB0byBwcmUtZGVmaW5lIHRoZXNlIHZhbHVlcyBmb3IgRkYgKCMxMDIyNylcbiAgICBIVE1MOiBcImJsb2NrXCIsXG4gICAgQk9EWTogXCJibG9ja1wiXG4gIH07XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGFjdHVhbCBkaXNwbGF5IG9mIGEgZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgbm9kZU5hbWUgb2YgdGhlIGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBkb2MgRG9jdW1lbnQgb2JqZWN0XG4gKi9cbi8vIENhbGxlZCBvbmx5IGZyb20gd2l0aGluIGRlZmF1bHREaXNwbGF5XG5mdW5jdGlvbiBhY3R1YWxEaXNwbGF5KCBuYW1lLCBkb2MgKSB7XG4gIHZhciBlbGVtID0galF1ZXJ5KCBkb2MuY3JlYXRlRWxlbWVudCggbmFtZSApICkuYXBwZW5kVG8oIGRvYy5ib2R5ICksXG5cbiAgICBkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbVsgMCBdLCBcImRpc3BsYXlcIiApO1xuXG4gIC8vIFdlIGRvbid0IGhhdmUgYW55IGRhdGEgc3RvcmVkIG9uIHRoZSBlbGVtZW50LFxuICAvLyBzbyB1c2UgXCJkZXRhY2hcIiBtZXRob2QgYXMgZmFzdCB3YXkgdG8gZ2V0IHJpZCBvZiB0aGUgZWxlbWVudFxuICBlbGVtLmRldGFjaCgpO1xuXG4gIHJldHVybiBkaXNwbGF5O1xufVxuXG4vKipcbiAqIFRyeSB0byBkZXRlcm1pbmUgdGhlIGRlZmF1bHQgZGlzcGxheSB2YWx1ZSBvZiBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gbm9kZU5hbWVcbiAqL1xuZnVuY3Rpb24gZGVmYXVsdERpc3BsYXkoIG5vZGVOYW1lICkge1xuICB2YXIgZG9jID0gZG9jdW1lbnQsXG4gICAgZGlzcGxheSA9IGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdO1xuXG4gIGlmICggIWRpc3BsYXkgKSB7XG4gICAgZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcblxuICAgIC8vIElmIHRoZSBzaW1wbGUgd2F5IGZhaWxzLCByZWFkIGZyb20gaW5zaWRlIGFuIGlmcmFtZVxuICAgIGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgfHwgIWRpc3BsYXkgKSB7XG5cbiAgICAgIC8vIFVzZSB0aGUgYWxyZWFkeS1jcmVhdGVkIGlmcmFtZSBpZiBwb3NzaWJsZVxuICAgICAgaWZyYW1lID0gKGlmcmFtZSB8fCBqUXVlcnkoIFwiPGlmcmFtZSBmcmFtZWJvcmRlcj0nMCcgd2lkdGg9JzAnIGhlaWdodD0nMCcvPlwiICkpXG4gICAgICAgIC5hcHBlbmRUbyggZG9jLmRvY3VtZW50RWxlbWVudCApO1xuXG4gICAgICAvLyBBbHdheXMgd3JpdGUgYSBuZXcgSFRNTCBza2VsZXRvbiBzbyBXZWJraXQgYW5kIEZpcmVmb3ggZG9uJ3QgY2hva2Ugb24gcmV1c2VcbiAgICAgIGRvYyA9IGlmcmFtZVsgMCBdLmNvbnRlbnREb2N1bWVudDtcblxuICAgICAgLy8gU3VwcG9ydDogSUVcbiAgICAgIGRvYy53cml0ZSgpO1xuICAgICAgZG9jLmNsb3NlKCk7XG5cbiAgICAgIGRpc3BsYXkgPSBhY3R1YWxEaXNwbGF5KCBub2RlTmFtZSwgZG9jICk7XG4gICAgICBpZnJhbWUuZGV0YWNoKCk7XG4gICAgfVxuXG4gICAgLy8gU3RvcmUgdGhlIGNvcnJlY3QgZGVmYXVsdCBkaXNwbGF5XG4gICAgZWxlbWRpc3BsYXlbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuICB9XG5cbiAgcmV0dXJuIGRpc3BsYXk7XG59XG52YXIgcm1hcmdpbiA9ICgvXm1hcmdpbi8pO1xuXG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAvLyBTdXBwb3J0OiBJRTw9MTErLCBGaXJlZm94PD0zMCsgKCMxNTA5OCwgIzE0MTUwKVxuICAgIC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuICAgIC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuICAgIGlmICggZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3Lm9wZW5lciApIHtcbiAgICAgIHJldHVybiBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSwgbnVsbCApO1xuICAgIH1cblxuICAgIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSwgbnVsbCApO1xuICB9O1xuXG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcbiAgdmFyIHJldDtcblxuICBjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG4gIC8vIFN1cHBvcnQ6IElFOVxuICAvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG9ubHkgbmVlZGVkIGZvciAuY3NzKCdmaWx0ZXInKSAoIzEyNTM3KVxuICBpZiAoIGNvbXB1dGVkICkge1xuICAgIHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuICB9XG5cbiAgaWYgKCBjb21wdXRlZCApIHtcblxuICAgIGlmICggcmV0ID09PSBcIlwiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuICAgICAgcmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cbiAgICAvLyBTdXBwb3J0OiBJRTktMTErXG4gICAgLy8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cbiAgICByZXQgKyBcIlwiIDpcbiAgICByZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuICAvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuICByZXR1cm4ge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG4gICAgICAgIC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuICAgICAgICAvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG4gICAgICAgIGRlbGV0ZSB0aGlzLmdldDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cbiAgICAgIHJldHVybiAodGhpcy5nZXQgPSBob29rRm4pLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgICB9XG4gIH07XG59XG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuKGZ1bmN0aW9uKCkge1xuICB2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsXG4gICAgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuICAgIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuICBpZiAoICFkaXYuc3R5bGUgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gU3VwcG9ydDogSUU5LTExK1xuICAvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG4gIGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcbiAgZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcbiAgc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuICBjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjA7d2lkdGg6MDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7bWFyZ2luLXRvcDoxcHg7XCIgK1xuICAgIFwicG9zaXRpb246YWJzb2x1dGVcIjtcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuICAvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcbiAgLy8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cbiAgZnVuY3Rpb24gY29tcHV0ZVBpeGVsUG9zaXRpb25BbmRCb3hTaXppbmdSZWxpYWJsZSgpIHtcbiAgICBkaXYuc3R5bGUuY3NzVGV4dCA9XG4gICAgICAvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xuICAgICAgLy8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXG4gICAgICBcIi13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtcIiArXG4gICAgICBcImRpc3BsYXk6YmxvY2s7bWFyZ2luLXRvcDoxJTt0b3A6MSU7XCIgK1xuICAgICAgXCJib3JkZXI6MXB4O3BhZGRpbmc6MXB4O3dpZHRoOjRweDtwb3NpdGlvbjphYnNvbHV0ZVwiO1xuICAgIGRpdi5pbm5lckhUTUwgPSBcIlwiO1xuICAgIGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XG5cbiAgICB2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2LCBudWxsICk7XG4gICAgcGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuICAgIGJveFNpemluZ1JlbGlhYmxlVmFsID0gZGl2U3R5bGUud2lkdGggPT09IFwiNHB4XCI7XG5cbiAgICBkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuICB9XG5cbiAgLy8gU3VwcG9ydDogbm9kZS5qcyBqc2RvbVxuICAvLyBEb24ndCBhc3N1bWUgdGhhdCBnZXRDb21wdXRlZFN0eWxlIGlzIGEgcHJvcGVydHkgb2YgdGhlIGdsb2JhbCBvYmplY3RcbiAgaWYgKCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSApIHtcbiAgICBqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG4gICAgICBwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAvLyBUaGlzIHRlc3QgaXMgZXhlY3V0ZWQgb25seSBvbmNlIGJ1dCB3ZSBzdGlsbCBkbyBtZW1vaXppbmdcbiAgICAgICAgLy8gc2luY2Ugd2UgY2FuIHVzZSB0aGUgYm94U2l6aW5nUmVsaWFibGUgcHJlLWNvbXB1dGluZy5cbiAgICAgICAgLy8gTm8gbmVlZCB0byBjaGVjayBpZiB0aGUgdGVzdCB3YXMgYWxyZWFkeSBwZXJmb3JtZWQsIHRob3VnaC5cbiAgICAgICAgY29tcHV0ZVBpeGVsUG9zaXRpb25BbmRCb3hTaXppbmdSZWxpYWJsZSgpO1xuICAgICAgICByZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcbiAgICAgIH0sXG4gICAgICBib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICggYm94U2l6aW5nUmVsaWFibGVWYWwgPT0gbnVsbCApIHtcbiAgICAgICAgICBjb21wdXRlUGl4ZWxQb3NpdGlvbkFuZEJveFNpemluZ1JlbGlhYmxlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuICAgICAgfSxcbiAgICAgIHJlbGlhYmxlTWFyZ2luUmlnaHQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG4gICAgICAgIC8vIENoZWNrIGlmIGRpdiB3aXRoIGV4cGxpY2l0IHdpZHRoIGFuZCBubyBtYXJnaW4tcmlnaHQgaW5jb3JyZWN0bHlcbiAgICAgICAgLy8gZ2V0cyBjb21wdXRlZCBtYXJnaW4tcmlnaHQgYmFzZWQgb24gd2lkdGggb2YgY29udGFpbmVyLiAoIzMzMzMpXG4gICAgICAgIC8vIFdlYktpdCBCdWcgMTMzNDMgLSBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgd3JvbmcgdmFsdWUgZm9yIG1hcmdpbi1yaWdodFxuICAgICAgICAvLyBUaGlzIHN1cHBvcnQgZnVuY3Rpb24gaXMgb25seSBleGVjdXRlZCBvbmNlIHNvIG5vIG1lbW9pemluZyBpcyBuZWVkZWQuXG4gICAgICAgIHZhciByZXQsXG4gICAgICAgICAgbWFyZ2luRGl2ID0gZGl2LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuICAgICAgICAvLyBSZXNldCBDU1M6IGJveC1zaXppbmc7IGRpc3BsYXk7IG1hcmdpbjsgYm9yZGVyOyBwYWRkaW5nXG4gICAgICAgIG1hcmdpbkRpdi5zdHlsZS5jc3NUZXh0ID0gZGl2LnN0eWxlLmNzc1RleHQgPVxuICAgICAgICAgIC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG4gICAgICAgICAgLy8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXG4gICAgICAgICAgXCItd2Via2l0LWJveC1zaXppbmc6Y29udGVudC1ib3g7Ym94LXNpemluZzpjb250ZW50LWJveDtcIiArXG4gICAgICAgICAgXCJkaXNwbGF5OmJsb2NrO21hcmdpbjowO2JvcmRlcjowO3BhZGRpbmc6MFwiO1xuICAgICAgICBtYXJnaW5EaXYuc3R5bGUubWFyZ2luUmlnaHQgPSBtYXJnaW5EaXYuc3R5bGUud2lkdGggPSBcIjBcIjtcbiAgICAgICAgZGl2LnN0eWxlLndpZHRoID0gXCIxcHhcIjtcbiAgICAgICAgZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcblxuICAgICAgICByZXQgPSAhcGFyc2VGbG9hdCggd2luZG93LmdldENvbXB1dGVkU3R5bGUoIG1hcmdpbkRpdiwgbnVsbCApLm1hcmdpblJpZ2h0ICk7XG5cbiAgICAgICAgZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcbiAgICAgICAgZGl2LnJlbW92ZUNoaWxkKCBtYXJnaW5EaXYgKTtcblxuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59KSgpO1xuXG5cbi8vIEEgbWV0aG9kIGZvciBxdWlja2x5IHN3YXBwaW5nIGluL291dCBDU1MgcHJvcGVydGllcyB0byBnZXQgY29ycmVjdCBjYWxjdWxhdGlvbnMuXG5qUXVlcnkuc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcbiAgdmFyIHJldCwgbmFtZSxcbiAgICBvbGQgPSB7fTtcblxuICAvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcbiAgZm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuICAgIG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuICAgIGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcbiAgfVxuXG4gIHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cbiAgLy8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG4gIGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcbiAgICBlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG5cbnZhclxuICAvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG4gIC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuICAvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcbiAgcmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuICBybnVtc3BsaXQgPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKC4qKSRcIiwgXCJpXCIgKSxcbiAgcnJlbE51bSA9IG5ldyBSZWdFeHAoIFwiXihbKy1dKT0oXCIgKyBwbnVtICsgXCIpXCIsIFwiaVwiICksXG5cbiAgY3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG4gIGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcbiAgICBsZXR0ZXJTcGFjaW5nOiBcIjBcIixcbiAgICBmb250V2VpZ2h0OiBcIjQwMFwiXG4gIH0sXG5cbiAgY3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdO1xuXG4vLyBSZXR1cm4gYSBjc3MgcHJvcGVydHkgbWFwcGVkIHRvIGEgcG90ZW50aWFsbHkgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggc3R5bGUsIG5hbWUgKSB7XG5cbiAgLy8gU2hvcnRjdXQgZm9yIG5hbWVzIHRoYXQgYXJlIG5vdCB2ZW5kb3IgcHJlZml4ZWRcbiAgaWYgKCBuYW1lIGluIHN0eWxlICkge1xuICAgIHJldHVybiBuYW1lO1xuICB9XG5cbiAgLy8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuICB2YXIgY2FwTmFtZSA9IG5hbWVbMF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSksXG4gICAgb3JpZ05hbWUgPSBuYW1lLFxuICAgIGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCBpLS0gKSB7XG4gICAgbmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuICAgIGlmICggbmFtZSBpbiBzdHlsZSApIHtcbiAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvcmlnTmFtZTtcbn1cblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcbiAgdmFyIG1hdGNoZXMgPSBybnVtc3BsaXQuZXhlYyggdmFsdWUgKTtcbiAgcmV0dXJuIG1hdGNoZXMgP1xuICAgIC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG4gICAgTWF0aC5tYXgoIDAsIG1hdGNoZXNbIDEgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDIgXSB8fCBcInB4XCIgKSA6XG4gICAgdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSwgaXNCb3JkZXJCb3gsIHN0eWxlcyApIHtcbiAgdmFyIGkgPSBleHRyYSA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApID9cbiAgICAvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIHJpZ2h0IG1lYXN1cmVtZW50LCBhdm9pZCBhdWdtZW50YXRpb25cbiAgICA0IDpcbiAgICAvLyBPdGhlcndpc2UgaW5pdGlhbGl6ZSBmb3IgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBwcm9wZXJ0aWVzXG4gICAgbmFtZSA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cbiAgICB2YWwgPSAwO1xuXG4gIGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcbiAgICAvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW4sIHNvIGFkZCBpdCBpZiB3ZSB3YW50IGl0XG4gICAgaWYgKCBleHRyYSA9PT0gXCJtYXJnaW5cIiApIHtcbiAgICAgIHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBleHRyYSArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcbiAgICB9XG5cbiAgICBpZiAoIGlzQm9yZGVyQm94ICkge1xuICAgICAgLy8gYm9yZGVyLWJveCBpbmNsdWRlcyBwYWRkaW5nLCBzbyByZW1vdmUgaXQgaWYgd2Ugd2FudCBjb250ZW50XG4gICAgICBpZiAoIGV4dHJhID09PSBcImNvbnRlbnRcIiApIHtcbiAgICAgICAgdmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuICAgICAgfVxuXG4gICAgICAvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBib3JkZXIgbm9yIG1hcmdpbiwgc28gcmVtb3ZlIGJvcmRlclxuICAgICAgaWYgKCBleHRyYSAhPT0gXCJtYXJnaW5cIiApIHtcbiAgICAgICAgdmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQsIHNvIGFkZCBwYWRkaW5nXG4gICAgICB2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cbiAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQgbm9yIHBhZGRpbmcsIHNvIGFkZCBib3JkZXJcbiAgICAgIGlmICggZXh0cmEgIT09IFwicGFkZGluZ1wiICkge1xuICAgICAgICB2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApIHtcblxuICAvLyBTdGFydCB3aXRoIG9mZnNldCBwcm9wZXJ0eSwgd2hpY2ggaXMgZXF1aXZhbGVudCB0byB0aGUgYm9yZGVyLWJveCB2YWx1ZVxuICB2YXIgdmFsdWVJc0JvcmRlckJveCA9IHRydWUsXG4gICAgdmFsID0gbmFtZSA9PT0gXCJ3aWR0aFwiID8gZWxlbS5vZmZzZXRXaWR0aCA6IGVsZW0ub2Zmc2V0SGVpZ2h0LFxuICAgIHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuICAgIGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuICAvLyBTb21lIG5vbi1odG1sIGVsZW1lbnRzIHJldHVybiB1bmRlZmluZWQgZm9yIG9mZnNldFdpZHRoLCBzbyBjaGVjayBmb3IgbnVsbC91bmRlZmluZWRcbiAgLy8gc3ZnIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjQ5Mjg1XG4gIC8vIE1hdGhNTCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTQ5MTY2OFxuICBpZiAoIHZhbCA8PSAwIHx8IHZhbCA9PSBudWxsICkge1xuICAgIC8vIEZhbGwgYmFjayB0byBjb21wdXRlZCB0aGVuIHVuY29tcHV0ZWQgY3NzIGlmIG5lY2Vzc2FyeVxuICAgIHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG4gICAgaWYgKCB2YWwgPCAwIHx8IHZhbCA9PSBudWxsICkge1xuICAgICAgdmFsID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuICAgIH1cblxuICAgIC8vIENvbXB1dGVkIHVuaXQgaXMgbm90IHBpeGVscy4gU3RvcCBoZXJlIGFuZCByZXR1cm4uXG4gICAgaWYgKCBybnVtbm9ucHgudGVzdCh2YWwpICkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3Igc3R5bGUgaW4gY2FzZSBhIGJyb3dzZXIgd2hpY2ggcmV0dXJucyB1bnJlbGlhYmxlIHZhbHVlc1xuICAgIC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGVcbiAgICB2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3ggJiZcbiAgICAgICggc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IHZhbCA9PT0gZWxlbS5zdHlsZVsgbmFtZSBdICk7XG5cbiAgICAvLyBOb3JtYWxpemUgXCJcIiwgYXV0bywgYW5kIHByZXBhcmUgZm9yIGV4dHJhXG4gICAgdmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcbiAgfVxuXG4gIC8vIFVzZSB0aGUgYWN0aXZlIGJveC1zaXppbmcgbW9kZWwgdG8gYWRkL3N1YnRyYWN0IGlycmVsZXZhbnQgc3R5bGVzXG4gIHJldHVybiAoIHZhbCArXG4gICAgYXVnbWVudFdpZHRoT3JIZWlnaHQoXG4gICAgICBlbGVtLFxuICAgICAgbmFtZSxcbiAgICAgIGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcbiAgICAgIHZhbHVlSXNCb3JkZXJCb3gsXG4gICAgICBzdHlsZXNcbiAgICApXG4gICkgKyBcInB4XCI7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcbiAgdmFyIGRpc3BsYXksIGVsZW0sIGhpZGRlbixcbiAgICB2YWx1ZXMgPSBbXSxcbiAgICBpbmRleCA9IDAsXG4gICAgbGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG4gIGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG4gICAgZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuICAgIGlmICggIWVsZW0uc3R5bGUgKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwib2xkZGlzcGxheVwiICk7XG4gICAgZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcbiAgICBpZiAoIHNob3cgKSB7XG4gICAgICAvLyBSZXNldCB0aGUgaW5saW5lIGRpc3BsYXkgb2YgdGhpcyBlbGVtZW50IHRvIGxlYXJuIGlmIGl0IGlzXG4gICAgICAvLyBiZWluZyBoaWRkZW4gYnkgY2FzY2FkZWQgcnVsZXMgb3Igbm90XG4gICAgICBpZiAoICF2YWx1ZXNbIGluZGV4IF0gJiYgZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG4gICAgICAgIGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG4gICAgICB9XG5cbiAgICAgIC8vIFNldCBlbGVtZW50cyB3aGljaCBoYXZlIGJlZW4gb3ZlcnJpZGRlbiB3aXRoIGRpc3BsYXk6IG5vbmVcbiAgICAgIC8vIGluIGEgc3R5bGVzaGVldCB0byB3aGF0ZXZlciB0aGUgZGVmYXVsdCBicm93c2VyIHN0eWxlIGlzXG4gICAgICAvLyBmb3Igc3VjaCBhbiBlbGVtZW50XG4gICAgICBpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbiggZWxlbSApICkge1xuICAgICAgICB2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5hY2Nlc3MoXG4gICAgICAgICAgZWxlbSxcbiAgICAgICAgICBcIm9sZGRpc3BsYXlcIixcbiAgICAgICAgICBkZWZhdWx0RGlzcGxheShlbGVtLm5vZGVOYW1lKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBoaWRkZW4gPSBpc0hpZGRlbiggZWxlbSApO1xuXG4gICAgICBpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiIHx8ICFoaWRkZW4gKSB7XG4gICAgICAgIGRhdGFQcml2LnNldChcbiAgICAgICAgICBlbGVtLFxuICAgICAgICAgIFwib2xkZGlzcGxheVwiLFxuICAgICAgICAgIGhpZGRlbiA/IGRpc3BsYXkgOiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gU2V0IHRoZSBkaXNwbGF5IG9mIG1vc3Qgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3BcbiAgLy8gdG8gYXZvaWQgdGhlIGNvbnN0YW50IHJlZmxvd1xuICBmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuICAgIGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcbiAgICBpZiAoICFlbGVtLnN0eWxlICkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICggIXNob3cgfHwgZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgKSB7XG4gICAgICBlbGVtLnN0eWxlLmRpc3BsYXkgPSBzaG93ID8gdmFsdWVzWyBpbmRleCBdIHx8IFwiXCIgOiBcIm5vbmVcIjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5leHRlbmQoe1xuXG4gIC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuICAvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcbiAgY3NzSG9va3M6IHtcbiAgICBvcGFjaXR5OiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcbiAgICAgICAgaWYgKCBjb21wdXRlZCApIHtcblxuICAgICAgICAgIC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG4gICAgICAgICAgdmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcbiAgICAgICAgICByZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLy8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcbiAgY3NzTnVtYmVyOiB7XG4gICAgXCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuICAgIFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcbiAgICBcImZsZXhHcm93XCI6IHRydWUsXG4gICAgXCJmbGV4U2hyaW5rXCI6IHRydWUsXG4gICAgXCJmb250V2VpZ2h0XCI6IHRydWUsXG4gICAgXCJsaW5lSGVpZ2h0XCI6IHRydWUsXG4gICAgXCJvcGFjaXR5XCI6IHRydWUsXG4gICAgXCJvcmRlclwiOiB0cnVlLFxuICAgIFwib3JwaGFuc1wiOiB0cnVlLFxuICAgIFwid2lkb3dzXCI6IHRydWUsXG4gICAgXCJ6SW5kZXhcIjogdHJ1ZSxcbiAgICBcInpvb21cIjogdHJ1ZVxuICB9LFxuXG4gIC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcbiAgLy8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuICBjc3NQcm9wczoge1xuICAgIFwiZmxvYXRcIjogXCJjc3NGbG9hdFwiXG4gIH0sXG5cbiAgLy8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcbiAgc3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cbiAgICAvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcbiAgICBpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcbiAgICB2YXIgcmV0LCB0eXBlLCBob29rcyxcbiAgICAgIG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxuICAgICAgc3R5bGUgPSBlbGVtLnN0eWxlO1xuXG4gICAgbmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fFxuICAgICAgKCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggc3R5bGUsIG9yaWdOYW1lICkgKTtcblxuICAgIC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG4gICAgaG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cbiAgICAvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcbiAgICBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICB0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG4gICAgICAvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG4gICAgICBpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKHJldCA9IHJyZWxOdW0uZXhlYyggdmFsdWUgKSkgKSB7XG4gICAgICAgIHZhbHVlID0gKCByZXRbMV0gKyAxICkgKiByZXRbMl0gKyBwYXJzZUZsb2F0KCBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICkgKTtcbiAgICAgICAgLy8gRml4ZXMgYnVnICM5MjM3XG4gICAgICAgIHR5cGUgPSBcIm51bWJlclwiO1xuICAgICAgfVxuXG4gICAgICAvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuICAgICAgaWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgJ3B4JyAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuICAgICAgaWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdICkge1xuICAgICAgICB2YWx1ZSArPSBcInB4XCI7XG4gICAgICB9XG5cbiAgICAgIC8vIFN1cHBvcnQ6IElFOS0xMStcbiAgICAgIC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcbiAgICAgIGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcbiAgICAgICAgc3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcbiAgICAgIGlmICggIWhvb2tzIHx8ICEoXCJzZXRcIiBpbiBob29rcykgfHxcbiAgICAgICAgKHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSkgIT09IHVuZGVmaW5lZCApIHtcblxuICAgICAgICBzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG4gICAgICBpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcbiAgICAgICAgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkpICE9PSB1bmRlZmluZWQgKSB7XG5cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3RcbiAgICAgIHJldHVybiBzdHlsZVsgbmFtZSBdO1xuICAgIH1cbiAgfSxcblxuICBjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuICAgIHZhciB2YWwsIG51bSwgaG9va3MsXG4gICAgICBvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKTtcblxuICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuICAgIG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHxcbiAgICAgICggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIGVsZW0uc3R5bGUsIG9yaWdOYW1lICkgKTtcblxuICAgIC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcbiAgICBob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuICAgIC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG4gICAgaWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuICAgICAgdmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG4gICAgaWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcbiAgICAgIHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG4gICAgfVxuXG4gICAgLy8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG4gICAgaWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG4gICAgICB2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcbiAgICB9XG5cbiAgICAvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcbiAgICBpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuICAgICAgbnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG4gICAgICByZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgalF1ZXJ5LmlzTnVtZXJpYyggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcbiAgICB9XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxufSk7XG5cbmpRdWVyeS5lYWNoKFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuICBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSA9IHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG4gICAgICBpZiAoIGNvbXB1dGVkICkge1xuXG4gICAgICAgIC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuICAgICAgICAvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuICAgICAgICByZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuICAgICAgICAgIGVsZW0ub2Zmc2V0V2lkdGggPT09IDAgP1xuICAgICAgICAgICAgalF1ZXJ5LnN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcbiAgICAgICAgICAgIH0pIDpcbiAgICAgICAgICAgIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcbiAgICAgIHZhciBzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKTtcbiAgICAgIHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIGV4dHJhID9cbiAgICAgICAgYXVnbWVudFdpZHRoT3JIZWlnaHQoXG4gICAgICAgICAgZWxlbSxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIGV4dHJhLFxuICAgICAgICAgIGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG4gICAgICAgICAgc3R5bGVzXG4gICAgICAgICkgOiAwXG4gICAgICApO1xuICAgIH1cbiAgfTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xualF1ZXJ5LmNzc0hvb2tzLm1hcmdpblJpZ2h0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luUmlnaHQsXG4gIGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcbiAgICBpZiAoIGNvbXB1dGVkICkge1xuICAgICAgcmV0dXJuIGpRdWVyeS5zd2FwKCBlbGVtLCB7IFwiZGlzcGxheVwiOiBcImlubGluZS1ibG9ja1wiIH0sXG4gICAgICAgIGN1ckNTUywgWyBlbGVtLCBcIm1hcmdpblJpZ2h0XCIgXSApO1xuICAgIH1cbiAgfVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goe1xuICBtYXJnaW46IFwiXCIsXG4gIHBhZGRpbmc6IFwiXCIsXG4gIGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG4gIGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG4gICAgZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG4gICAgICB2YXIgaSA9IDAsXG4gICAgICAgIGV4cGFuZGVkID0ge30sXG5cbiAgICAgICAgLy8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG4gICAgICAgIHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoXCIgXCIpIDogWyB2YWx1ZSBdO1xuXG4gICAgICBmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG4gICAgICAgIGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cbiAgICAgICAgICBwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBleHBhbmRlZDtcbiAgICB9XG4gIH07XG5cbiAgaWYgKCAhcm1hcmdpbi50ZXN0KCBwcmVmaXggKSApIHtcbiAgICBqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuICB9XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG4gIGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuICAgIHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcbiAgICAgIHZhciBzdHlsZXMsIGxlbixcbiAgICAgICAgbWFwID0ge30sXG4gICAgICAgIGkgPSAwO1xuXG4gICAgICBpZiAoIGpRdWVyeS5pc0FycmF5KCBuYW1lICkgKSB7XG4gICAgICAgIHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuICAgICAgICBsZW4gPSBuYW1lLmxlbmd0aDtcblxuICAgICAgICBmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcbiAgICAgICAgICBtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWFwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG4gICAgICAgIGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG4gICAgICAgIGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcbiAgICB9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcbiAgfSxcbiAgc2hvdzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG4gIH0sXG4gIGhpZGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuICB9LFxuICB0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcbiAgICBpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG4gICAgICByZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIGlzSGlkZGVuKCB0aGlzICkgKSB7XG4gICAgICAgIGpRdWVyeSggdGhpcyApLnNob3coKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGpRdWVyeSggdGhpcyApLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuICByZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFR3ZWVuLFxuICBpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG4gICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICB0aGlzLnByb3AgPSBwcm9wO1xuICAgIHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IFwic3dpbmdcIjtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG4gICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgdGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcbiAgfSxcbiAgY3VyOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG4gICAgcmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG4gICAgICBob29rcy5nZXQoIHRoaXMgKSA6XG4gICAgICBUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG4gIH0sXG4gIHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG4gICAgdmFyIGVhc2VkLFxuICAgICAgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG4gICAgaWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG4gICAgICB0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcbiAgICAgICAgcGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcbiAgICB9XG4gICAgdGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG4gICAgaWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcbiAgICAgIHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcbiAgICB9XG5cbiAgICBpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcbiAgICAgIGhvb2tzLnNldCggdGhpcyApO1xuICAgIH0gZWxzZSB7XG4gICAgICBUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcbiAgX2RlZmF1bHQ6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcbiAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgIGlmICggdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiZcbiAgICAgICAgKCF0d2Vlbi5lbGVtLnN0eWxlIHx8IHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsKSApIHtcbiAgICAgICAgcmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcbiAgICAgIH1cblxuICAgICAgLy8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG4gICAgICAvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuICAgICAgLy8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG4gICAgICAvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuICAgICAgcmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuICAgICAgLy8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG4gICAgICByZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuICAgICAgLy8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG4gICAgICAvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG4gICAgICAvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuICAgICAgaWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuICAgICAgICBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuICAgICAgfSBlbHNlIGlmICggdHdlZW4uZWxlbS5zdHlsZSAmJlxuICAgICAgICAoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fFxuICAgICAgICAgIGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XG4gICAgICAgIGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLy8gU3VwcG9ydDogSUU5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcbiAgc2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG4gICAgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcbiAgICAgIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcbiAgICB9XG4gIH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG4gIGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG4gICAgcmV0dXJuIHA7XG4gIH0sXG4gIHN3aW5nOiBmdW5jdGlvbiggcCApIHtcbiAgICByZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuICB9XG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBDb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuICBmeE5vdywgdGltZXJJZCxcbiAgcmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG4gIHJmeG51bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICksXG4gIHJydW4gPSAvcXVldWVIb29rcyQvLFxuICBhbmltYXRpb25QcmVmaWx0ZXJzID0gWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG4gIHR3ZWVuZXJzID0ge1xuICAgIFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcbiAgICAgIHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICksXG4gICAgICAgIHRhcmdldCA9IHR3ZWVuLmN1cigpLFxuICAgICAgICBwYXJ0cyA9IHJmeG51bS5leGVjKCB2YWx1ZSApLFxuICAgICAgICB1bml0ID0gcGFydHMgJiYgcGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuICAgICAgICAvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuICAgICAgICBzdGFydCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiArdGFyZ2V0ICkgJiZcbiAgICAgICAgICByZnhudW0uZXhlYyggalF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgcHJvcCApICksXG4gICAgICAgIHNjYWxlID0gMSxcbiAgICAgICAgbWF4SXRlcmF0aW9ucyA9IDIwO1xuXG4gICAgICBpZiAoIHN0YXJ0ICYmIHN0YXJ0WyAzIF0gIT09IHVuaXQgKSB7XG4gICAgICAgIC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3NcbiAgICAgICAgdW5pdCA9IHVuaXQgfHwgc3RhcnRbIDMgXTtcblxuICAgICAgICAvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG4gICAgICAgIHBhcnRzID0gcGFydHMgfHwgW107XG5cbiAgICAgICAgLy8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcbiAgICAgICAgc3RhcnQgPSArdGFyZ2V0IHx8IDE7XG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgIC8vIElmIHByZXZpb3VzIGl0ZXJhdGlvbiB6ZXJvZWQgb3V0LCBkb3VibGUgdW50aWwgd2UgZ2V0ICpzb21ldGhpbmcqLlxuICAgICAgICAgIC8vIFVzZSBzdHJpbmcgZm9yIGRvdWJsaW5nIHNvIHdlIGRvbid0IGFjY2lkZW50YWxseSBzZWUgc2NhbGUgYXMgdW5jaGFuZ2VkIGJlbG93XG4gICAgICAgICAgc2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XG5cbiAgICAgICAgICAvLyBBZGp1c3QgYW5kIGFwcGx5XG4gICAgICAgICAgc3RhcnQgPSBzdGFydCAvIHNjYWxlO1xuICAgICAgICAgIGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgcHJvcCwgc3RhcnQgKyB1bml0ICk7XG5cbiAgICAgICAgLy8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKCksXG4gICAgICAgIC8vIGJyZWFrIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2hcbiAgICAgICAgfSB3aGlsZSAoXG4gICAgICAgICAgc2NhbGUgIT09IChzY2FsZSA9IHR3ZWVuLmN1cigpIC8gdGFyZ2V0KSAmJiBzY2FsZSAhPT0gMSAmJiAtLW1heEl0ZXJhdGlvbnNcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gVXBkYXRlIHR3ZWVuIHByb3BlcnRpZXNcbiAgICAgIGlmICggcGFydHMgKSB7XG4gICAgICAgIHN0YXJ0ID0gdHdlZW4uc3RhcnQgPSArc3RhcnQgfHwgK3RhcmdldCB8fCAwO1xuICAgICAgICB0d2Vlbi51bml0ID0gdW5pdDtcbiAgICAgICAgLy8gSWYgYSArPS8tPSB0b2tlbiB3YXMgcHJvdmlkZWQsIHdlJ3JlIGRvaW5nIGEgcmVsYXRpdmUgYW5pbWF0aW9uXG4gICAgICAgIHR3ZWVuLmVuZCA9IHBhcnRzWyAxIF0gP1xuICAgICAgICAgIHN0YXJ0ICsgKCBwYXJ0c1sgMSBdICsgMSApICogcGFydHNbIDIgXSA6XG4gICAgICAgICAgK3BhcnRzWyAyIF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0d2VlbjtcbiAgICB9IF1cbiAgfTtcblxuZnVuY3Rpb24gcmFmKCkge1xuICBpZiAoIHRpbWVySWQgKSB7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggcmFmICk7XG4gICAgalF1ZXJ5LmZ4LnRpY2soKTtcbiAgfVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcbiAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBmeE5vdyA9IHVuZGVmaW5lZDtcbiAgfSk7XG4gIHJldHVybiAoIGZ4Tm93ID0galF1ZXJ5Lm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuICB2YXIgd2hpY2gsXG4gICAgaSA9IDAsXG4gICAgYXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG4gIC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcbiAgLy8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcbiAgaW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG4gIGZvciAoIDsgaSA8IDQgOyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG4gICAgd2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcbiAgICBhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcbiAgfVxuXG4gIGlmICggaW5jbHVkZVdpZHRoICkge1xuICAgIGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG4gIH1cblxuICByZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuICB2YXIgdHdlZW4sXG4gICAgY29sbGVjdGlvbiA9ICggdHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggdHdlZW5lcnNbIFwiKlwiIF0gKSxcbiAgICBpbmRleCA9IDAsXG4gICAgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG4gIGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG4gICAgaWYgKCAodHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSkgKSB7XG5cbiAgICAgIC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG4gICAgICByZXR1cm4gdHdlZW47XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gIHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCB0d2VlbiwgaG9va3MsIG9sZGZpcmUsIGRpc3BsYXksIGNoZWNrRGlzcGxheSxcbiAgICBhbmltID0gdGhpcyxcbiAgICBvcmlnID0ge30sXG4gICAgc3R5bGUgPSBlbGVtLnN0eWxlLFxuICAgIGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW4oIGVsZW0gKSxcbiAgICBkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG4gIC8vIEhhbmRsZSBxdWV1ZTogZmFsc2UgcHJvbWlzZXNcbiAgaWYgKCAhb3B0cy5xdWV1ZSApIHtcbiAgICBob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG4gICAgaWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuICAgICAgaG9va3MudW5xdWV1ZWQgPSAwO1xuICAgICAgb2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG4gICAgICBob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICggIWhvb2tzLnVucXVldWVkICkge1xuICAgICAgICAgIG9sZGZpcmUoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgaG9va3MudW5xdWV1ZWQrKztcblxuICAgIGFuaW0uYWx3YXlzKGZ1bmN0aW9uKCkge1xuICAgICAgLy8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcbiAgICAgIGFuaW0uYWx3YXlzKGZ1bmN0aW9uKCkge1xuICAgICAgICBob29rcy51bnF1ZXVlZC0tO1xuICAgICAgICBpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcbiAgICAgICAgICBob29rcy5lbXB0eS5maXJlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gSGVpZ2h0L3dpZHRoIG92ZXJmbG93IHBhc3NcbiAgaWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCJoZWlnaHRcIiBpbiBwcm9wcyB8fCBcIndpZHRoXCIgaW4gcHJvcHMgKSApIHtcbiAgICAvLyBNYWtlIHN1cmUgdGhhdCBub3RoaW5nIHNuZWFrcyBvdXRcbiAgICAvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFOS0xMCBkbyBub3RcbiAgICAvLyBjaGFuZ2UgdGhlIG92ZXJmbG93IGF0dHJpYnV0ZSB3aGVuIG92ZXJmbG93WCBhbmRcbiAgICAvLyBvdmVyZmxvd1kgYXJlIHNldCB0byB0aGUgc2FtZSB2YWx1ZVxuICAgIG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG4gICAgLy8gU2V0IGRpc3BsYXkgcHJvcGVydHkgdG8gaW5saW5lLWJsb2NrIGZvciBoZWlnaHQvd2lkdGhcbiAgICAvLyBhbmltYXRpb25zIG9uIGlubGluZSBlbGVtZW50cyB0aGF0IGFyZSBoYXZpbmcgd2lkdGgvaGVpZ2h0IGFuaW1hdGVkXG4gICAgZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cbiAgICAvLyBUZXN0IGRlZmF1bHQgZGlzcGxheSBpZiBkaXNwbGF5IGlzIGN1cnJlbnRseSBcIm5vbmVcIlxuICAgIGNoZWNrRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID9cbiAgICAgIGRhdGFQcml2LmdldCggZWxlbSwgXCJvbGRkaXNwbGF5XCIgKSB8fCBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheTtcblxuICAgIGlmICggY2hlY2tEaXNwbGF5ID09PSBcImlubGluZVwiICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcbiAgICAgIHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuICAgIH1cbiAgfVxuXG4gIGlmICggb3B0cy5vdmVyZmxvdyApIHtcbiAgICBzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG4gICAgYW5pbS5hbHdheXMoZnVuY3Rpb24oKSB7XG4gICAgICBzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcbiAgICAgIHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcbiAgICAgIHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHNob3cvaGlkZSBwYXNzXG4gIGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG4gICAgdmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuICAgIGlmICggcmZ4dHlwZXMuZXhlYyggdmFsdWUgKSApIHtcbiAgICAgIGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuICAgICAgdG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuICAgICAgaWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgZGF0YVNob3cgbGVmdCBvdmVyIGZyb20gYSBzdG9wcGVkIGhpZGUgb3Igc2hvd1xuICAgICAgICAvLyBhbmQgd2UgYXJlIGdvaW5nIHRvIHByb2NlZWQgd2l0aCBzaG93LCB3ZSBzaG91bGQgcHJldGVuZCB0byBiZSBoaWRkZW5cbiAgICAgICAgaWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgIGhpZGRlbiA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cbiAgICAvLyBBbnkgbm9uLWZ4IHZhbHVlIHN0b3BzIHVzIGZyb20gcmVzdG9yaW5nIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlXG4gICAgfSBlbHNlIHtcbiAgICAgIGRpc3BsYXkgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKCAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcbiAgICBpZiAoIGRhdGFTaG93ICkge1xuICAgICAgaWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuICAgICAgICBoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7fSApO1xuICAgIH1cblxuICAgIC8vIFN0b3JlIHN0YXRlIGlmIGl0cyB0b2dnbGUgLSBlbmFibGVzIC5zdG9wKCkudG9nZ2xlKCkgdG8gXCJyZXZlcnNlXCJcbiAgICBpZiAoIHRvZ2dsZSApIHtcbiAgICAgIGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG4gICAgfVxuICAgIGlmICggaGlkZGVuICkge1xuICAgICAgalF1ZXJ5KCBlbGVtICkuc2hvdygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhbmltLmRvbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgIGpRdWVyeSggZWxlbSApLmhpZGUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBhbmltLmRvbmUoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcHJvcDtcblxuICAgICAgZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG4gICAgICBmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG4gICAgICAgIGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZm9yICggcHJvcCBpbiBvcmlnICkge1xuICAgICAgdHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblxuICAgICAgaWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG4gICAgICAgIGRhdGFTaG93WyBwcm9wIF0gPSB0d2Vlbi5zdGFydDtcbiAgICAgICAgaWYgKCBoaWRkZW4gKSB7XG4gICAgICAgICAgdHdlZW4uZW5kID0gdHdlZW4uc3RhcnQ7XG4gICAgICAgICAgdHdlZW4uc3RhcnQgPSBwcm9wID09PSBcIndpZHRoXCIgfHwgcHJvcCA9PT0gXCJoZWlnaHRcIiA/IDEgOiAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gIC8vIElmIHRoaXMgaXMgYSBub29wIGxpa2UgLmhpZGUoKS5oaWRlKCksIHJlc3RvcmUgYW4gb3ZlcndyaXR0ZW4gZGlzcGxheSB2YWx1ZVxuICB9IGVsc2UgaWYgKCAoZGlzcGxheSA9PT0gXCJub25lXCIgPyBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheSkgPT09IFwiaW5saW5lXCIgKSB7XG4gICAgc3R5bGUuZGlzcGxheSA9IGRpc3BsYXk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG4gIHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cbiAgLy8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG4gIGZvciAoIGluZGV4IGluIHByb3BzICkge1xuICAgIG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBpbmRleCApO1xuICAgIGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcbiAgICB2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuICAgIGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG4gICAgICBlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuICAgICAgdmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG4gICAgfVxuXG4gICAgaWYgKCBpbmRleCAhPT0gbmFtZSApIHtcbiAgICAgIHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcbiAgICB9XG5cbiAgICBob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuICAgIGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcbiAgICAgIHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuICAgICAgZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cbiAgICAgIC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cbiAgICAgIC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcbiAgICAgIGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuICAgICAgICBpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG4gICAgICAgICAgcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcbiAgICAgICAgICBzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuICB2YXIgcmVzdWx0LFxuICAgIHN0b3BwZWQsXG4gICAgaW5kZXggPSAwLFxuICAgIGxlbmd0aCA9IGFuaW1hdGlvblByZWZpbHRlcnMubGVuZ3RoLFxuICAgIGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcbiAgICAgIC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuICAgICAgZGVsZXRlIHRpY2suZWxlbTtcbiAgICB9KSxcbiAgICB0aWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIHN0b3BwZWQgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG4gICAgICAgIHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcbiAgICAgICAgLy8gU3VwcG9ydDogQW5kcm9pZCAyLjNcbiAgICAgICAgLy8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuICAgICAgICB0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG4gICAgICAgIHBlcmNlbnQgPSAxIC0gdGVtcCxcbiAgICAgICAgaW5kZXggPSAwLFxuICAgICAgICBsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuICAgICAgZm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG4gICAgICAgIGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG4gICAgICB9XG5cbiAgICAgIGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSk7XG5cbiAgICAgIGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuICAgICAgICByZXR1cm4gcmVtYWluaW5nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG4gICAgYW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSh7XG4gICAgICBlbGVtOiBlbGVtLFxuICAgICAgcHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG4gICAgICBvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7IHNwZWNpYWxFYXNpbmc6IHt9IH0sIG9wdGlvbnMgKSxcbiAgICAgIG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcbiAgICAgIG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcbiAgICAgIHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcbiAgICAgIGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuICAgICAgdHdlZW5zOiBbXSxcbiAgICAgIGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuICAgICAgICB2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG4gICAgICAgICAgICBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG4gICAgICAgIGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcbiAgICAgICAgcmV0dXJuIHR3ZWVuO1xuICAgICAgfSxcbiAgICAgIHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuICAgICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuICAgICAgICAgIC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuICAgICAgICAgIGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG4gICAgICAgIGlmICggc3RvcHBlZCApIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBzdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgZm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG4gICAgICAgICAgYW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG4gICAgICAgIGlmICggZ290b0VuZCApIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9KSxcbiAgICBwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuICBwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG4gIGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuICAgIHJlc3VsdCA9IGFuaW1hdGlvblByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcbiAgICBpZiAoIHJlc3VsdCApIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG5cbiAgalF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuICBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuICAgIGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuICB9XG5cbiAgalF1ZXJ5LmZ4LnRpbWVyKFxuICAgIGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcbiAgICAgIGVsZW06IGVsZW0sXG4gICAgICBhbmltOiBhbmltYXRpb24sXG4gICAgICBxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcbiAgICB9KVxuICApO1xuXG4gIC8vIGF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG4gIHJldHVybiBhbmltYXRpb24ucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcbiAgICAuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuICAgIC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcbiAgICAuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG4gIHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG4gICAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcbiAgICAgIGNhbGxiYWNrID0gcHJvcHM7XG4gICAgICBwcm9wcyA9IFsgXCIqXCIgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMgPSBwcm9wcy5zcGxpdChcIiBcIik7XG4gICAgfVxuXG4gICAgdmFyIHByb3AsXG4gICAgICBpbmRleCA9IDAsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICBmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcbiAgICAgIHByb3AgPSBwcm9wc1sgaW5kZXggXTtcbiAgICAgIHR3ZWVuZXJzWyBwcm9wIF0gPSB0d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuICAgICAgdHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuICAgIH1cbiAgfSxcblxuICBwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcbiAgICBpZiAoIHByZXBlbmQgKSB7XG4gICAgICBhbmltYXRpb25QcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFuaW1hdGlvblByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG4gIHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcbiAgICBjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuICAgICAgalF1ZXJ5LmlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG4gICAgZHVyYXRpb246IHNwZWVkLFxuICAgIGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuICB9O1xuXG4gIC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZiBvciBpZiBkb2N1bWVudCBpcyBoaWRkZW5cbiAgaWYgKCBqUXVlcnkuZngub2ZmIHx8IGRvY3VtZW50LmhpZGRlbiApIHtcbiAgICBvcHQuZHVyYXRpb24gPSAwO1xuXG4gIH0gZWxzZSB7XG4gICAgb3B0LmR1cmF0aW9uID0gdHlwZW9mIG9wdC5kdXJhdGlvbiA9PT0gXCJudW1iZXJcIiA/XG4gICAgICBvcHQuZHVyYXRpb24gOiBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyA/XG4gICAgICAgIGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdIDogalF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuICBpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcbiAgICBvcHQucXVldWUgPSBcImZ4XCI7XG4gIH1cblxuICAvLyBRdWV1ZWluZ1xuICBvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG4gIG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcbiAgICAgIG9wdC5vbGQuY2FsbCggdGhpcyApO1xuICAgIH1cblxuICAgIGlmICggb3B0LnF1ZXVlICkge1xuICAgICAgalF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG4gIGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuICAgIC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuICAgIHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW4gKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cbiAgICAgIC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuICAgICAgLmVuZCgpLmFuaW1hdGUoeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuICB9LFxuICBhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG4gICAgdmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcbiAgICAgIG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcbiAgICAgIGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG4gICAgICAgIHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuICAgICAgICAvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcbiAgICAgICAgaWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcbiAgICAgICAgICBhbmltLnN0b3AoIHRydWUgKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG4gICAgcmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuICAgICAgdGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcbiAgICAgIHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcbiAgfSxcbiAgc3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG4gICAgdmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcbiAgICAgIHZhciBzdG9wID0gaG9va3Muc3RvcDtcbiAgICAgIGRlbGV0ZSBob29rcy5zdG9wO1xuICAgICAgc3RvcCggZ290b0VuZCApO1xuICAgIH07XG5cbiAgICBpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuICAgICAgZ290b0VuZCA9IGNsZWFyUXVldWU7XG4gICAgICBjbGVhclF1ZXVlID0gdHlwZTtcbiAgICAgIHR5cGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcbiAgICAgIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZGVxdWV1ZSA9IHRydWUsXG4gICAgICAgIGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcbiAgICAgICAgdGltZXJzID0galF1ZXJ5LnRpbWVycyxcbiAgICAgICAgZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG4gICAgICBpZiAoIGluZGV4ICkge1xuICAgICAgICBpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuICAgICAgICAgIHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuICAgICAgICAgIGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuICAgICAgICAgICAgc3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG4gICAgICAgIGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcbiAgICAgICAgICAodHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSkgKSB7XG5cbiAgICAgICAgICB0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG4gICAgICAgICAgZGVxdWV1ZSA9IGZhbHNlO1xuICAgICAgICAgIHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cbiAgICAgIC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcbiAgICAgIC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cbiAgICAgIGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcbiAgICAgICAgalF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcbiAgICBpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuICAgICAgdHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGluZGV4LFxuICAgICAgICBkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG4gICAgICAgIHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuICAgICAgICBob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuICAgICAgICB0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuICAgICAgICBsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cbiAgICAgIC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcbiAgICAgIGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuICAgICAgLy8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG4gICAgICBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cbiAgICAgIGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcbiAgICAgICAgaG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG4gICAgICB9XG5cbiAgICAgIC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG4gICAgICBmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuICAgICAgICBpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcbiAgICAgICAgICB0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG4gICAgICAgICAgdGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuICAgICAgZm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcbiAgICAgICAgaWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG4gICAgICAgICAgcXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuICAgICAgZGVsZXRlIGRhdGEuZmluaXNoO1xuICAgIH0pO1xuICB9XG59KTtcblxualF1ZXJ5LmVhY2goWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG4gIHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuICBqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcbiAgICByZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cbiAgICAgIGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG4gICAgICB0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG4gIH07XG59KTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goe1xuICBzbGlkZURvd246IGdlbkZ4KFwic2hvd1wiKSxcbiAgc2xpZGVVcDogZ2VuRngoXCJoaWRlXCIpLFxuICBzbGlkZVRvZ2dsZTogZ2VuRngoXCJ0b2dnbGVcIiksXG4gIGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuICBmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG4gIGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG4gIGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuICAgIHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuICB9O1xufSk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG4gIHZhciB0aW1lcixcbiAgICBpID0gMCxcbiAgICB0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG4gIGZ4Tm93ID0galF1ZXJ5Lm5vdygpO1xuXG4gIGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcbiAgICB0aW1lciA9IHRpbWVyc1sgaSBdO1xuICAgIC8vIENoZWNrcyB0aGUgdGltZXIgaGFzIG5vdCBhbHJlYWR5IGJlZW4gcmVtb3ZlZFxuICAgIGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuICAgICAgdGltZXJzLnNwbGljZSggaS0tLCAxICk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCAhdGltZXJzLmxlbmd0aCApIHtcbiAgICBqUXVlcnkuZnguc3RvcCgpO1xuICB9XG4gIGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuICBqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG4gIGlmICggdGltZXIoKSApIHtcbiAgICBqUXVlcnkuZnguc3RhcnQoKTtcbiAgfSBlbHNlIHtcbiAgICBqUXVlcnkudGltZXJzLnBvcCgpO1xuICB9XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aW1lcklkICkge1xuICAgIHRpbWVySWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID9cbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHJhZiApIDpcbiAgICAgIHNldEludGVydmFsKCBqUXVlcnkuZngudGljaywgalF1ZXJ5LmZ4LmludGVydmFsICk7XG4gIH1cbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG4gIGlmICggd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lICkge1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSggdGltZXJJZCApO1xuICB9IGVsc2Uge1xuICAgIGNsZWFySW50ZXJ2YWwoIHRpbWVySWQgKTtcbiAgfVxuXG4gIHRpbWVySWQgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcbiAgc2xvdzogNjAwLFxuICBmYXN0OiAyMDAsXG4gIC8vIERlZmF1bHQgc3BlZWRcbiAgX2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcbiAgdGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcbiAgdHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG4gIHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG4gICAgdmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG4gICAgaG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG4gICAgfTtcbiAgfSk7XG59O1xuXG5cbihmdW5jdGlvbigpIHtcbiAgdmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG4gICAgc2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuICAgIG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cbiAgaW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuICAvLyBTdXBwb3J0OiBBbmRyb2lkPDQuNFxuICAvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcbiAgc3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cbiAgLy8gU3VwcG9ydDogSUU8PTExK1xuICAvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuICBzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG4gIC8vIFN1cHBvcnQ6IEFuZHJvaWQ8PTIuM1xuICAvLyBPcHRpb25zIGluc2lkZSBkaXNhYmxlZCBzZWxlY3RzIGFyZSBpbmNvcnJlY3RseSBtYXJrZWQgYXMgZGlzYWJsZWRcbiAgc2VsZWN0LmRpc2FibGVkID0gdHJ1ZTtcbiAgc3VwcG9ydC5vcHREaXNhYmxlZCA9ICFvcHQuZGlzYWJsZWQ7XG5cbiAgLy8gU3VwcG9ydDogSUU8PTExK1xuICAvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuICBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuICBpbnB1dC52YWx1ZSA9IFwidFwiO1xuICBpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuICBzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59KSgpO1xuXG5cbnZhciBub2RlSG9vaywgYm9vbEhvb2ssXG4gIGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcbiAgYXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuICAgIHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcbiAgfSxcblxuICByZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgalF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbmpRdWVyeS5leHRlbmQoe1xuICBhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG4gICAgdmFyIGhvb2tzLCByZXQsXG4gICAgICBuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cbiAgICAvLyBkb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG4gICAgaWYgKCAhZWxlbSB8fCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuICAgIGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuICAgICAgcmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuICAgIH1cblxuICAgIC8vIEFsbCBhdHRyaWJ1dGVzIGFyZSBsb3dlcmNhc2VcbiAgICAvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG4gICAgaWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG4gICAgICBuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lIF0gfHxcbiAgICAgICAgKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogbm9kZUhvb2sgKTtcbiAgICB9XG5cbiAgICBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cbiAgICAgIGlmICggdmFsdWUgPT09IG51bGwgKSB7XG4gICAgICAgIGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cbiAgICAgIH0gZWxzZSBpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcbiAgICAgICAgKHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSkgIT09IHVuZGVmaW5lZCApIHtcblxuICAgICAgICByZXR1cm4gcmV0O1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApKSAhPT0gbnVsbCApIHtcbiAgICAgIHJldHVybiByZXQ7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG4gICAgICAvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuICAgICAgcmV0dXJuIHJldCA9PSBudWxsID9cbiAgICAgICAgdW5kZWZpbmVkIDpcbiAgICAgICAgcmV0O1xuICAgIH1cbiAgfSxcblxuICByZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG4gICAgdmFyIG5hbWUsIHByb3BOYW1lLFxuICAgICAgaSA9IDAsXG4gICAgICBhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICk7XG5cbiAgICBpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuICAgICAgd2hpbGUgKCAobmFtZSA9IGF0dHJOYW1lc1tpKytdKSApIHtcbiAgICAgICAgcHJvcE5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cbiAgICAgICAgLy8gQm9vbGVhbiBhdHRyaWJ1dGVzIGdldCBzcGVjaWFsIHRyZWF0bWVudCAoIzEwODcwKVxuICAgICAgICBpZiAoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApICkge1xuICAgICAgICAgIC8vIFNldCBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHRvIGZhbHNlXG4gICAgICAgICAgZWxlbVsgcHJvcE5hbWUgXSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgYXR0ckhvb2tzOiB7XG4gICAgdHlwZToge1xuICAgICAgc2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG4gICAgICAgIGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG4gICAgICAgICAgalF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcbiAgICAgICAgICB2YXIgdmFsID0gZWxlbS52YWx1ZTtcbiAgICAgICAgICBlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG4gICAgICAgICAgaWYgKCB2YWwgKSB7XG4gICAgICAgICAgICBlbGVtLnZhbHVlID0gdmFsO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcbiAgc2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG4gICAgaWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG4gICAgICAvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG4gICAgICBqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZTtcbiAgfVxufTtcbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcbiAgdmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG4gIGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcbiAgICB2YXIgcmV0LCBoYW5kbGU7XG4gICAgaWYgKCAhaXNYTUwgKSB7XG4gICAgICAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG4gICAgICBoYW5kbGUgPSBhdHRySGFuZGxlWyBuYW1lIF07XG4gICAgICBhdHRySGFuZGxlWyBuYW1lIF0gPSByZXQ7XG4gICAgICByZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG4gICAgICAgIG5hbWUudG9Mb3dlckNhc2UoKSA6XG4gICAgICAgIG51bGw7XG4gICAgICBhdHRySGFuZGxlWyBuYW1lIF0gPSBoYW5kbGU7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH07XG59KTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcbiAgcHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuICAgIHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcbiAgfSxcblxuICByZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuICAgIH0pO1xuICB9XG59KTtcblxualF1ZXJ5LmV4dGVuZCh7XG4gIHByb3BGaXg6IHtcbiAgICBcImZvclwiOiBcImh0bWxGb3JcIixcbiAgICBcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcbiAgfSxcblxuICBwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG4gICAgdmFyIHJldCwgaG9va3MsIG5vdHhtbCxcbiAgICAgIG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuICAgIC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcbiAgICBpZiAoICFlbGVtIHx8IG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG5vdHhtbCA9IG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKTtcblxuICAgIGlmICggbm90eG1sICkge1xuICAgICAgLy8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuICAgICAgbmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcbiAgICAgIGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuICAgIH1cblxuICAgIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcbiAgICAgIHJldHVybiBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkpICE9PSB1bmRlZmluZWQgP1xuICAgICAgICByZXQgOlxuICAgICAgICAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApKSAhPT0gbnVsbCA/XG4gICAgICAgIHJldCA6XG4gICAgICAgIGVsZW1bIG5hbWUgXTtcbiAgICB9XG4gIH0sXG5cbiAgcHJvcEhvb2tzOiB7XG4gICAgdGFiSW5kZXg6IHtcbiAgICAgIGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICAgIHJldHVybiBlbGVtLmhhc0F0dHJpYnV0ZSggXCJ0YWJpbmRleFwiICkgfHxcbiAgICAgICAgICByZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fCBlbGVtLmhyZWYgP1xuICAgICAgICAgICAgZWxlbS50YWJJbmRleCA6XG4gICAgICAgICAgICAtMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuICBqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuICAgIGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICB2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuICAgICAgaWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG4gICAgICAgIHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmpRdWVyeS5lYWNoKFtcbiAgXCJ0YWJJbmRleFwiLFxuICBcInJlYWRPbmx5XCIsXG4gIFwibWF4TGVuZ3RoXCIsXG4gIFwiY2VsbFNwYWNpbmdcIixcbiAgXCJjZWxsUGFkZGluZ1wiLFxuICBcInJvd1NwYW5cIixcbiAgXCJjb2xTcGFuXCIsXG4gIFwidXNlTWFwXCIsXG4gIFwiZnJhbWVCb3JkZXJcIixcbiAgXCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG4gIGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59KTtcblxuXG5cblxudmFyIHJjbGFzcyA9IC9bXFx0XFxyXFxuXFxmXS9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcbiAgYWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcbiAgICB2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcbiAgICAgIHByb2NlZWQgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUsXG4gICAgICBpID0gMCxcbiAgICAgIGxlbiA9IHRoaXMubGVuZ3RoO1xuXG4gICAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGogKSB7XG4gICAgICAgIGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCB0aGlzLmNsYXNzTmFtZSApICk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIHByb2NlZWQgKSB7XG4gICAgICAvLyBUaGUgZGlzanVuY3Rpb24gaGVyZSBpcyBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIHJlbW92ZUNsYXNzKVxuICAgICAgY2xhc3NlcyA9ICggdmFsdWUgfHwgXCJcIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuICAgICAgZm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG4gICAgICAgIGVsZW0gPSB0aGlzWyBpIF07XG4gICAgICAgIGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBlbGVtLmNsYXNzTmFtZSA/XG4gICAgICAgICAgKCBcIiBcIiArIGVsZW0uY2xhc3NOYW1lICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiICkgOlxuICAgICAgICAgIFwiIFwiXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKCBjdXIgKSB7XG4gICAgICAgICAgaiA9IDA7XG4gICAgICAgICAgd2hpbGUgKCAoY2xhenogPSBjbGFzc2VzW2orK10pICkge1xuICAgICAgICAgICAgaWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuICAgICAgICAgICAgICBjdXIgKz0gY2xhenogKyBcIiBcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBvbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuICAgICAgICAgIGZpbmFsVmFsdWUgPSBqUXVlcnkudHJpbSggY3VyICk7XG4gICAgICAgICAgaWYgKCBlbGVtLmNsYXNzTmFtZSAhPT0gZmluYWxWYWx1ZSApIHtcbiAgICAgICAgICAgIGVsZW0uY2xhc3NOYW1lID0gZmluYWxWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICByZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuICAgIHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuICAgICAgcHJvY2VlZCA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDAgfHwgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlLFxuICAgICAgaSA9IDAsXG4gICAgICBsZW4gPSB0aGlzLmxlbmd0aDtcblxuICAgIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBqICkge1xuICAgICAgICBqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgdGhpcy5jbGFzc05hbWUgKSApO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICggcHJvY2VlZCApIHtcbiAgICAgIGNsYXNzZXMgPSAoIHZhbHVlIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XG5cbiAgICAgIGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuICAgICAgICBlbGVtID0gdGhpc1sgaSBdO1xuICAgICAgICAvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuICAgICAgICBjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggZWxlbS5jbGFzc05hbWUgP1xuICAgICAgICAgICggXCIgXCIgKyBlbGVtLmNsYXNzTmFtZSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApIDpcbiAgICAgICAgICBcIlwiXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKCBjdXIgKSB7XG4gICAgICAgICAgaiA9IDA7XG4gICAgICAgICAgd2hpbGUgKCAoY2xhenogPSBjbGFzc2VzW2orK10pICkge1xuICAgICAgICAgICAgLy8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuICAgICAgICAgICAgd2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcbiAgICAgICAgICAgICAgY3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuICAgICAgICAgIGZpbmFsVmFsdWUgPSB2YWx1ZSA/IGpRdWVyeS50cmltKCBjdXIgKSA6IFwiXCI7XG4gICAgICAgICAgaWYgKCBlbGVtLmNsYXNzTmFtZSAhPT0gZmluYWxWYWx1ZSApIHtcbiAgICAgICAgICAgIGVsZW0uY2xhc3NOYW1lID0gZmluYWxWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICB0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuICAgIGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiB0eXBlID09PSBcInN0cmluZ1wiICkge1xuICAgICAgcmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG4gICAgfVxuXG4gICAgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG4gICAgICAgIGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuICAgICAgICAgIHZhbHVlLmNhbGwodGhpcywgaSwgdGhpcy5jbGFzc05hbWUsIHN0YXRlVmFsKSwgc3RhdGVWYWxcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG4gICAgICAgIC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG4gICAgICAgIHZhciBjbGFzc05hbWUsXG4gICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuICAgICAgICAgIGNsYXNzTmFtZXMgPSB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XG5cbiAgICAgICAgd2hpbGUgKCAoY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0pICkge1xuICAgICAgICAgIC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuICAgICAgICAgIGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG4gICAgICAgICAgICBzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG4gICAgICB9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuICAgICAgICBpZiAoIHRoaXMuY2xhc3NOYW1lICkge1xuICAgICAgICAgIC8vIHN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcbiAgICAgICAgICBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCB0aGlzLmNsYXNzTmFtZSApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcbiAgICAgICAgLy8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cbiAgICAgICAgLy8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcbiAgICAgICAgLy8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuICAgICAgICB0aGlzLmNsYXNzTmFtZSA9IHRoaXMuY2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG4gICAgICAgICAgXCJcIiA6XG4gICAgICAgICAgZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCI7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgaGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiLFxuICAgICAgaSA9IDAsXG4gICAgICBsID0gdGhpcy5sZW5ndGg7XG4gICAgZm9yICggOyBpIDwgbDsgaSsrICkge1xuICAgICAgaWYgKCB0aGlzW2ldLm5vZGVUeXBlID09PSAxICYmXG4gICAgICAgIChcIiBcIiArIHRoaXNbaV0uY2xhc3NOYW1lICsgXCIgXCIpLnJlcGxhY2UocmNsYXNzLCBcIiBcIikuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0pO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG4gIHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuICAgIHZhciBob29rcywgcmV0LCBpc0Z1bmN0aW9uLFxuICAgICAgZWxlbSA9IHRoaXNbMF07XG5cbiAgICBpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuICAgICAgaWYgKCBlbGVtICkge1xuICAgICAgICBob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcbiAgICAgICAgICBqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG4gICAgICAgIGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSkgIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0ID0gZWxlbS52YWx1ZTtcblxuICAgICAgICByZXR1cm4gdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiA/XG4gICAgICAgICAgLy8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuICAgICAgICAgIHJldC5yZXBsYWNlKHJyZXR1cm4sIFwiXCIpIDpcbiAgICAgICAgICAvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcbiAgICAgICAgICByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuICAgICAgdmFyIHZhbDtcblxuICAgICAgaWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICggaXNGdW5jdGlvbiApIHtcbiAgICAgICAgdmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICAvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG4gICAgICBpZiAoIHZhbCA9PSBudWxsICkge1xuICAgICAgICB2YWwgPSBcIlwiO1xuXG4gICAgICB9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuICAgICAgICB2YWwgKz0gXCJcIjtcblxuICAgICAgfSBlbHNlIGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbCApICkge1xuICAgICAgICB2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuICAgICAgLy8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcbiAgICAgIGlmICggIWhvb2tzIHx8ICEoXCJzZXRcIiBpbiBob29rcykgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWw7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5qUXVlcnkuZXh0ZW5kKHtcbiAgdmFsSG9va3M6IHtcbiAgICBvcHRpb246IHtcbiAgICAgIGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICAgIC8vIFN1cHBvcnQ6IElFPDExXG4gICAgICAgIC8vIG9wdGlvbi52YWx1ZSBub3QgdHJpbW1lZCAoIzE0ODU4KVxuICAgICAgICByZXR1cm4galF1ZXJ5LnRyaW0oIGVsZW0udmFsdWUgKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNlbGVjdDoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgdmFyIHZhbHVlLCBvcHRpb24sXG4gICAgICAgICAgb3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcbiAgICAgICAgICBpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcbiAgICAgICAgICBvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiIHx8IGluZGV4IDwgMCxcbiAgICAgICAgICB2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG4gICAgICAgICAgbWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGgsXG4gICAgICAgICAgaSA9IGluZGV4IDwgMCA/XG4gICAgICAgICAgICBtYXggOlxuICAgICAgICAgICAgb25lID8gaW5kZXggOiAwO1xuXG4gICAgICAgIC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcbiAgICAgICAgZm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG4gICAgICAgICAgb3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG4gICAgICAgICAgLy8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG4gICAgICAgICAgaWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG4gICAgICAgICAgICAgIC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcbiAgICAgICAgICAgICAgKCBzdXBwb3J0Lm9wdERpc2FibGVkID9cbiAgICAgICAgICAgICAgICAhb3B0aW9uLmRpc2FibGVkIDogb3B0aW9uLmdldEF0dHJpYnV0ZSggXCJkaXNhYmxlZFwiICkgPT09IG51bGwgKSAmJlxuICAgICAgICAgICAgICAoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuICAgICAgICAgICAgICAgICFqUXVlcnkubm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG4gICAgICAgICAgICAvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG4gICAgICAgICAgICB2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cbiAgICAgICAgICAgIC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG4gICAgICAgICAgICBpZiAoIG9uZSApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuICAgICAgICAgICAgdmFsdWVzLnB1c2goIHZhbHVlICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgIH0sXG5cbiAgICAgIHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuICAgICAgICB2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG4gICAgICAgICAgb3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcbiAgICAgICAgICB2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuICAgICAgICAgIGkgPSBvcHRpb25zLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoIGktLSApIHtcbiAgICAgICAgICBvcHRpb24gPSBvcHRpb25zWyBpIF07XG4gICAgICAgICAgaWYgKCAob3B0aW9uLnNlbGVjdGVkID1cbiAgICAgICAgICAgICAgalF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMSkgKSB7XG4gICAgICAgICAgICBvcHRpb25TZXQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG4gICAgICAgIGlmICggIW9wdGlvblNldCApIHtcbiAgICAgICAgICBlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaChbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuICBqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcbiAgICBzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcbiAgICAgIGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG4gICAgICAgIHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoZWxlbSkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgaWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuICAgIGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgcmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwidmFsdWVcIikgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuICAgIH07XG4gIH1cbn0pO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxualF1ZXJ5LmVhY2goIChcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCBsb2FkIHJlc2l6ZSBzY3JvbGwgdW5sb2FkIGNsaWNrIGRibGNsaWNrIFwiICtcbiAgXCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG4gIFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBlcnJvciBjb250ZXh0bWVudVwiKS5zcGxpdChcIiBcIiksXG4gIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG4gIC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG4gIGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG4gICAgICB0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcbiAgICAgIHRoaXMudHJpZ2dlciggbmFtZSApO1xuICB9O1xufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuICBob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG4gICAgcmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG4gIH0sXG5cbiAgYmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcbiAgICByZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG4gIH0sXG4gIHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcbiAgICByZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuICB9LFxuXG4gIGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcbiAgICByZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuICB9LFxuICB1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcbiAgICAvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuICAgICAgdGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG4gICAgICB0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcbiAgfVxufSk7XG5cblxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSBqUXVlcnkubm93KCk7XG5cbnZhciBycXVlcnkgPSAoL1xcPy8pO1xuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCAyLjNcbi8vIFdvcmthcm91bmQgZmFpbHVyZSB0byBzdHJpbmctY2FzdCBudWxsIGlucHV0XG5qUXVlcnkucGFyc2VKU09OID0gZnVuY3Rpb24oIGRhdGEgKSB7XG4gIHJldHVybiBKU09OLnBhcnNlKCBkYXRhICsgXCJcIiApO1xufTtcblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcbiAgdmFyIHhtbDtcbiAgaWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIFN1cHBvcnQ6IElFOVxuICB0cnkge1xuICAgIHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG4gIH0gY2F0Y2ggKCBlICkge1xuICAgIHhtbCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcbiAgICBqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuICB9XG4gIHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuICByaGFzaCA9IC8jLiokLyxcbiAgcnRzID0gLyhbPyZdKV89W14mXSovLFxuICByaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG4gIC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuICBybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuICBybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcbiAgcnByb3RvY29sID0gL15cXC9cXC8vLFxuXG4gIC8qIFByZWZpbHRlcnNcbiAgICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcbiAgICogMikgVGhlc2UgYXJlIGNhbGxlZDpcbiAgICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuICAgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG4gICAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcbiAgICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuICAgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuICAgKi9cbiAgcHJlZmlsdGVycyA9IHt9LFxuXG4gIC8qIFRyYW5zcG9ydHMgYmluZGluZ3NcbiAgICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuICAgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG4gICAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuICAgKi9cbiAgdHJhbnNwb3J0cyA9IHt9LFxuXG4gIC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuICBhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cbiAgLy8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG4gIG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG4gIG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cbiAgLy8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuICByZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuICAgIGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcbiAgICAgIGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG4gICAgICBkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcbiAgICB9XG5cbiAgICB2YXIgZGF0YVR5cGUsXG4gICAgICBpID0gMCxcbiAgICAgIGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuICAgIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcbiAgICAgIC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cbiAgICAgIHdoaWxlICggKGRhdGFUeXBlID0gZGF0YVR5cGVzW2krK10pICkge1xuICAgICAgICAvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuICAgICAgICBpZiAoIGRhdGFUeXBlWzBdID09PSBcIitcIiApIHtcbiAgICAgICAgICBkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG4gICAgICAgICAgKHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSkudW5zaGlmdCggZnVuYyApO1xuXG4gICAgICAgIC8vIE90aGVyd2lzZSBhcHBlbmRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAoc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdKS5wdXNoKCBmdW5jICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuICB2YXIgaW5zcGVjdGVkID0ge30sXG4gICAgc2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cbiAgZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG4gICAgdmFyIHNlbGVjdGVkO1xuICAgIGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG4gICAgalF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcbiAgICAgIHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG4gICAgICBpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuICAgICAgICBvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG4gICAgICAgIGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcbiAgICAgICAgcmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxlY3RlZDtcbiAgfVxuXG4gIHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG4gIHZhciBrZXksIGRlZXAsXG4gICAgZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG4gIGZvciAoIGtleSBpbiBzcmMgKSB7XG4gICAgaWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoZGVlcCA9IHt9KSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcbiAgICB9XG4gIH1cbiAgaWYgKCBkZWVwICkge1xuICAgIGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG4gIHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcbiAgICBjb250ZW50cyA9IHMuY29udGVudHMsXG4gICAgZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cbiAgLy8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3NcbiAgd2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG4gICAgZGF0YVR5cGVzLnNoaWZ0KCk7XG4gICAgaWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuICAgICAgY3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuICBpZiAoIGN0ICkge1xuICAgIGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG4gICAgICBpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuICAgICAgICBkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcbiAgaWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG4gICAgZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuICB9IGVsc2Uge1xuICAgIC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcbiAgICBmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcbiAgICAgIGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWzBdIF0gKSB7XG4gICAgICAgIGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG4gICAgICAgIGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcbiAgICBmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuICB9XG5cbiAgLy8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuICAvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuICAvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gIGlmICggZmluYWxEYXRhVHlwZSApIHtcbiAgICBpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuICAgICAgZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuICB9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG4gIHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuICAgIGNvbnZlcnRlcnMgPSB7fSxcbiAgICAvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG4gICAgZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuICAvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcbiAgaWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcbiAgICBmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcbiAgICAgIGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG4gICAgfVxuICB9XG5cbiAgY3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG4gIC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG4gIHdoaWxlICggY3VycmVudCApIHtcblxuICAgIGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuICAgICAganFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG4gICAgfVxuXG4gICAgLy8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcbiAgICBpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG4gICAgICByZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcbiAgICB9XG5cbiAgICBwcmV2ID0gY3VycmVudDtcbiAgICBjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cbiAgICBpZiAoIGN1cnJlbnQgKSB7XG5cbiAgICAvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG4gICAgICBpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG4gICAgICAgIGN1cnJlbnQgPSBwcmV2O1xuXG4gICAgICAvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG4gICAgICB9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG4gICAgICAgIC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG4gICAgICAgIGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG4gICAgICAgIC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG4gICAgICAgIGlmICggIWNvbnYgKSB7XG4gICAgICAgICAgZm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuICAgICAgICAgICAgLy8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG4gICAgICAgICAgICB0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcbiAgICAgICAgICAgIGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cbiAgICAgICAgICAgICAgLy8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG4gICAgICAgICAgICAgIGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG4gICAgICAgICAgICAgICAgY29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcbiAgICAgICAgICAgICAgaWYgKCBjb252ICkge1xuICAgICAgICAgICAgICAgIC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcbiAgICAgICAgICAgICAgICBpZiAoIGNvbnYgPT09IHRydWUgKSB7XG4gICAgICAgICAgICAgICAgICBjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHRtcFsgMCBdO1xuICAgICAgICAgICAgICAgICAgZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG4gICAgICAgIGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuICAgICAgICAgIC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cbiAgICAgICAgICBpZiAoIGNvbnYgJiYgc1sgXCJ0aHJvd3NcIiBdICkge1xuICAgICAgICAgICAgcmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICByZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG4gICAgICAgICAgICB9IGNhdGNoICggZSApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuICAgICAgICAgICAgICAgIGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCh7XG5cbiAgLy8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG4gIGFjdGl2ZTogMCxcblxuICAvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG4gIGxhc3RNb2RpZmllZDoge30sXG4gIGV0YWc6IHt9LFxuXG4gIGFqYXhTZXR0aW5nczoge1xuICAgIHVybDogbG9jYXRpb24uaHJlZixcbiAgICB0eXBlOiBcIkdFVFwiLFxuICAgIGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG4gICAgZ2xvYmFsOiB0cnVlLFxuICAgIHByb2Nlc3NEYXRhOiB0cnVlLFxuICAgIGFzeW5jOiB0cnVlLFxuICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuICAgIC8qXG4gICAgdGltZW91dDogMCxcbiAgICBkYXRhOiBudWxsLFxuICAgIGRhdGFUeXBlOiBudWxsLFxuICAgIHVzZXJuYW1lOiBudWxsLFxuICAgIHBhc3N3b3JkOiBudWxsLFxuICAgIGNhY2hlOiBudWxsLFxuICAgIHRocm93czogZmFsc2UsXG4gICAgdHJhZGl0aW9uYWw6IGZhbHNlLFxuICAgIGhlYWRlcnM6IHt9LFxuICAgICovXG5cbiAgICBhY2NlcHRzOiB7XG4gICAgICBcIipcIjogYWxsVHlwZXMsXG4gICAgICB0ZXh0OiBcInRleHQvcGxhaW5cIixcbiAgICAgIGh0bWw6IFwidGV4dC9odG1sXCIsXG4gICAgICB4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuICAgICAganNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuICAgIH0sXG5cbiAgICBjb250ZW50czoge1xuICAgICAgeG1sOiAveG1sLyxcbiAgICAgIGh0bWw6IC9odG1sLyxcbiAgICAgIGpzb246IC9qc29uL1xuICAgIH0sXG5cbiAgICByZXNwb25zZUZpZWxkczoge1xuICAgICAgeG1sOiBcInJlc3BvbnNlWE1MXCIsXG4gICAgICB0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuICAgICAganNvbjogXCJyZXNwb25zZUpTT05cIlxuICAgIH0sXG5cbiAgICAvLyBEYXRhIGNvbnZlcnRlcnNcbiAgICAvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG4gICAgY29udmVydGVyczoge1xuXG4gICAgICAvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcbiAgICAgIFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuICAgICAgLy8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG4gICAgICBcInRleHQgaHRtbFwiOiB0cnVlLFxuXG4gICAgICAvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG4gICAgICBcInRleHQganNvblwiOiBqUXVlcnkucGFyc2VKU09OLFxuXG4gICAgICAvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuICAgICAgXCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcbiAgICB9LFxuXG4gICAgLy8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcbiAgICAvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG4gICAgLy8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcbiAgICAvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcbiAgICBmbGF0T3B0aW9uczoge1xuICAgICAgdXJsOiB0cnVlLFxuICAgICAgY29udGV4dDogdHJ1ZVxuICAgIH1cbiAgfSxcblxuICAvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuICAvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG4gIC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG4gIGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG4gICAgcmV0dXJuIHNldHRpbmdzID9cblxuICAgICAgLy8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3RcbiAgICAgIGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuICAgICAgLy8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuICAgICAgYWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG4gIH0sXG5cbiAgYWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG4gIGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG4gIC8vIE1haW4gbWV0aG9kXG4gIGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cbiAgICAvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuICAgIGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcbiAgICAgIG9wdGlvbnMgPSB1cmw7XG4gICAgICB1cmwgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3RcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIHZhciB0cmFuc3BvcnQsXG4gICAgICAvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG4gICAgICBjYWNoZVVSTCxcbiAgICAgIC8vIFJlc3BvbnNlIGhlYWRlcnNcbiAgICAgIHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcbiAgICAgIHJlc3BvbnNlSGVhZGVycyxcbiAgICAgIC8vIHRpbWVvdXQgaGFuZGxlXG4gICAgICB0aW1lb3V0VGltZXIsXG4gICAgICAvLyBVcmwgY2xlYW51cCB2YXJcbiAgICAgIHVybEFuY2hvcixcbiAgICAgIC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuICAgICAgZmlyZUdsb2JhbHMsXG4gICAgICAvLyBMb29wIHZhcmlhYmxlXG4gICAgICBpLFxuICAgICAgLy8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuICAgICAgcyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG4gICAgICAvLyBDYWxsYmFja3MgY29udGV4dFxuICAgICAgY2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG4gICAgICAvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG4gICAgICBnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcbiAgICAgICAgKCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cbiAgICAgICAgICBqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcbiAgICAgICAgICBqUXVlcnkuZXZlbnQsXG4gICAgICAvLyBEZWZlcnJlZHNcbiAgICAgIGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG4gICAgICBjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLFxuICAgICAgLy8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3NcbiAgICAgIHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG4gICAgICAvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuICAgICAgcmVxdWVzdEhlYWRlcnMgPSB7fSxcbiAgICAgIHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcbiAgICAgIC8vIFRoZSBqcVhIUiBzdGF0ZVxuICAgICAgc3RhdGUgPSAwLFxuICAgICAgLy8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG4gICAgICBzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcbiAgICAgIC8vIEZha2UgeGhyXG4gICAgICBqcVhIUiA9IHtcbiAgICAgICAgcmVhZHlTdGF0ZTogMCxcblxuICAgICAgICAvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG4gICAgICAgIGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuICAgICAgICAgIHZhciBtYXRjaDtcbiAgICAgICAgICBpZiAoIHN0YXRlID09PSAyICkge1xuICAgICAgICAgICAgaWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuICAgICAgICAgICAgICByZXNwb25zZUhlYWRlcnMgPSB7fTtcbiAgICAgICAgICAgICAgd2hpbGUgKCAobWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSkgKSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gUmF3IHN0cmluZ1xuICAgICAgICBnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBzdGF0ZSA9PT0gMiA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gQ2FjaGVzIHRoZSBoZWFkZXJcbiAgICAgICAgc2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuICAgICAgICAgIHZhciBsbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICBpZiAoICFzdGF0ZSApIHtcbiAgICAgICAgICAgIG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbG5hbWUgXSB8fCBuYW1lO1xuICAgICAgICAgICAgcmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuICAgICAgICBvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcbiAgICAgICAgICBpZiAoICFzdGF0ZSApIHtcbiAgICAgICAgICAgIHMubWltZVR5cGUgPSB0eXBlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuICAgICAgICBzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuICAgICAgICAgIHZhciBjb2RlO1xuICAgICAgICAgIGlmICggbWFwICkge1xuICAgICAgICAgICAgaWYgKCBzdGF0ZSA8IDIgKSB7XG4gICAgICAgICAgICAgIGZvciAoIGNvZGUgaW4gbWFwICkge1xuICAgICAgICAgICAgICAgIC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2sgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcbiAgICAgICAgICAgICAgICBzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG4gICAgICAgICAgICAgIGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBDYW5jZWwgdGhlIHJlcXVlc3RcbiAgICAgICAgYWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuICAgICAgICAgIHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuICAgICAgICAgIGlmICggdHJhbnNwb3J0ICkge1xuICAgICAgICAgICAgdHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZG9uZSggMCwgZmluYWxUZXh0ICk7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAvLyBBdHRhY2ggZGVmZXJyZWRzXG4gICAgZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKS5jb21wbGV0ZSA9IGNvbXBsZXRlRGVmZXJyZWQuYWRkO1xuICAgIGpxWEhSLnN1Y2Nlc3MgPSBqcVhIUi5kb25lO1xuICAgIGpxWEhSLmVycm9yID0ganFYSFIuZmFpbDtcblxuICAgIC8vIFJlbW92ZSBoYXNoIGNoYXJhY3RlciAoIzc1MzE6IGFuZCBzdHJpbmcgcHJvbW90aW9uKVxuICAgIC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuICAgIC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG4gICAgLy8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG4gICAgcy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKS5yZXBsYWNlKCByaGFzaCwgXCJcIiApXG4gICAgICAucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG4gICAgLy8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG4gICAgcy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuICAgIC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3RcbiAgICBzLmRhdGFUeXBlcyA9IGpRdWVyeS50cmltKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XG5cbiAgICAvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cbiAgICBpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcbiAgICAgIHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cbiAgICAgIC8vIFN1cHBvcnQ6IElFOC0xMStcbiAgICAgIC8vIElFIHRocm93cyBleGNlcHRpb24gaWYgdXJsIGlzIG1hbGZvcm1lZCwgZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuICAgICAgdHJ5IHtcbiAgICAgICAgdXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcbiAgICAgICAgLy8gU3VwcG9ydDogSUU4LTExK1xuICAgICAgICAvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuICAgICAgICB1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuICAgICAgICBzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG4gICAgICAgICAgdXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG4gICAgICB9IGNhdGNoICggZSApIHtcbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG4gICAgICAgIC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcbiAgICAgICAgcy5jcm9zc0RvbWFpbiA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG4gICAgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuICAgICAgcy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcbiAgICB9XG5cbiAgICAvLyBBcHBseSBwcmVmaWx0ZXJzXG4gICAgaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cbiAgICAvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuICAgIGlmICggc3RhdGUgPT09IDIgKSB7XG4gICAgICByZXR1cm4ganFYSFI7XG4gICAgfVxuXG4gICAgLy8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cbiAgICAvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuICAgIGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG4gICAgLy8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuICAgIGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuICAgICAgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXCJhamF4U3RhcnRcIik7XG4gICAgfVxuXG4gICAgLy8gVXBwZXJjYXNlIHRoZSB0eXBlXG4gICAgcy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuICAgIHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG4gICAgLy8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG4gICAgLy8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG4gICAgY2FjaGVVUkwgPSBzLnVybDtcblxuICAgIC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG4gICAgaWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG4gICAgICAvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSwgYXBwZW5kIGRhdGEgdG8gdXJsXG4gICAgICBpZiAoIHMuZGF0YSApIHtcbiAgICAgICAgY2FjaGVVUkwgPSAoIHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGEgKTtcbiAgICAgICAgLy8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuICAgICAgICBkZWxldGUgcy5kYXRhO1xuICAgICAgfVxuXG4gICAgICAvLyBBZGQgYW50aS1jYWNoZSBpbiB1cmwgaWYgbmVlZGVkXG4gICAgICBpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuICAgICAgICBzLnVybCA9IHJ0cy50ZXN0KCBjYWNoZVVSTCApID9cblxuICAgICAgICAgIC8vIElmIHRoZXJlIGlzIGFscmVhZHkgYSAnXycgcGFyYW1ldGVyLCBzZXQgaXRzIHZhbHVlXG4gICAgICAgICAgY2FjaGVVUkwucmVwbGFjZSggcnRzLCBcIiQxXz1cIiArIG5vbmNlKysgKSA6XG5cbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIG9uZSB0byB0aGUgZW5kXG4gICAgICAgICAgY2FjaGVVUkwgKyAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgbm9uY2UrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuICAgIGlmICggcy5pZk1vZGlmaWVkICkge1xuICAgICAgaWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuICAgICAgICBqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcbiAgICAgIH1cbiAgICAgIGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG4gICAgICAgIGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuICAgIGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuICAgICAganFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuICAgIH1cblxuICAgIC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcbiAgICBqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuICAgICAgXCJBY2NlcHRcIixcbiAgICAgIHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1swXSBdID9cbiAgICAgICAgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1swXSBdICtcbiAgICAgICAgICAoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuICAgICAgICBzLmFjY2VwdHNbIFwiKlwiIF1cbiAgICApO1xuXG4gICAgLy8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG4gICAgZm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG4gICAgICBqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuICAgIH1cblxuICAgIC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcbiAgICBpZiAoIHMuYmVmb3JlU2VuZCAmJlxuICAgICAgKCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBzdGF0ZSA9PT0gMiApICkge1xuXG4gICAgICAvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cbiAgICAgIHJldHVybiBqcVhIUi5hYm9ydCgpO1xuICAgIH1cblxuICAgIC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuICAgIHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG4gICAgLy8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG4gICAgZm9yICggaSBpbiB7IHN1Y2Nlc3M6IDEsIGVycm9yOiAxLCBjb21wbGV0ZTogMSB9ICkge1xuICAgICAganFYSFJbIGkgXSggc1sgaSBdICk7XG4gICAgfVxuXG4gICAgLy8gR2V0IHRyYW5zcG9ydFxuICAgIHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG4gICAgLy8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG4gICAgaWYgKCAhdHJhbnNwb3J0ICkge1xuICAgICAgZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcbiAgICB9IGVsc2Uge1xuICAgICAganFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cbiAgICAgIC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG4gICAgICBpZiAoIGZpcmVHbG9iYWxzICkge1xuICAgICAgICBnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcbiAgICAgIGlmICggc3RhdGUgPT09IDIgKSB7XG4gICAgICAgIHJldHVybiBqcVhIUjtcbiAgICAgIH1cblxuICAgICAgLy8gVGltZW91dFxuICAgICAgaWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG4gICAgICAgIHRpbWVvdXRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAganFYSFIuYWJvcnQoXCJ0aW1lb3V0XCIpO1xuICAgICAgICB9LCBzLnRpbWVvdXQgKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgc3RhdGUgPSAxO1xuICAgICAgICB0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcbiAgICAgIH0gY2F0Y2ggKCBlICkge1xuICAgICAgICAvLyBQcm9wYWdhdGUgZXhjZXB0aW9uIGFzIGVycm9yIGlmIG5vdCBkb25lXG4gICAgICAgIGlmICggc3RhdGUgPCAyICkge1xuICAgICAgICAgIGRvbmUoIC0xLCBlICk7XG4gICAgICAgIC8vIFNpbXBseSByZXRocm93IG90aGVyd2lzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcbiAgICBmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcbiAgICAgIHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG4gICAgICAgIHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG4gICAgICAvLyBDYWxsZWQgb25jZVxuICAgICAgaWYgKCBzdGF0ZSA9PT0gMiApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBTdGF0ZSBpcyBcImRvbmVcIiBub3dcbiAgICAgIHN0YXRlID0gMjtcblxuICAgICAgLy8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcbiAgICAgIGlmICggdGltZW91dFRpbWVyICkge1xuICAgICAgICBjbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuICAgICAgfVxuXG4gICAgICAvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuICAgICAgLy8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcbiAgICAgIHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuICAgICAgLy8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuICAgICAgcmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG4gICAgICAvLyBTZXQgcmVhZHlTdGF0ZVxuICAgICAganFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuICAgICAgLy8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcbiAgICAgIGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG4gICAgICAvLyBHZXQgcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKCByZXNwb25zZXMgKSB7XG4gICAgICAgIHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuICAgICAgfVxuXG4gICAgICAvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG4gICAgICByZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG4gICAgICAvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuICAgICAgaWYgKCBpc1N1Y2Nlc3MgKSB7XG5cbiAgICAgICAgLy8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cbiAgICAgICAgaWYgKCBzLmlmTW9kaWZpZWQgKSB7XG4gICAgICAgICAgbW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlcihcIkxhc3QtTW9kaWZpZWRcIik7XG4gICAgICAgICAgaWYgKCBtb2RpZmllZCApIHtcbiAgICAgICAgICAgIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgbW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlcihcImV0YWdcIik7XG4gICAgICAgICAgaWYgKCBtb2RpZmllZCApIHtcbiAgICAgICAgICAgIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgbm8gY29udGVudFxuICAgICAgICBpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG4gICAgICAgICAgc3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cbiAgICAgICAgLy8gaWYgbm90IG1vZGlmaWVkXG4gICAgICAgIH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuICAgICAgICAgIHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuICAgICAgICAgIHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgIGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG4gICAgICAgICAgaXNTdWNjZXNzID0gIWVycm9yO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG4gICAgICAgIGVycm9yID0gc3RhdHVzVGV4dDtcbiAgICAgICAgaWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG4gICAgICAgICAgc3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcbiAgICAgICAgICBpZiAoIHN0YXR1cyA8IDAgKSB7XG4gICAgICAgICAgICBzdGF0dXMgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuICAgICAganFYSFIuc3RhdHVzID0gc3RhdHVzO1xuICAgICAganFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG4gICAgICAvLyBTdWNjZXNzL0Vycm9yXG4gICAgICBpZiAoIGlzU3VjY2VzcyApIHtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcbiAgICAgIH1cblxuICAgICAgLy8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3NcbiAgICAgIGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcbiAgICAgIHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICggZmlyZUdsb2JhbHMgKSB7XG4gICAgICAgIGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuICAgICAgICAgIFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG4gICAgICB9XG5cbiAgICAgIC8vIENvbXBsZXRlXG4gICAgICBjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG4gICAgICBpZiAoIGZpcmVHbG9iYWxzICkge1xuICAgICAgICBnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG4gICAgICAgIC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuICAgICAgICBpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuICAgICAgICAgIGpRdWVyeS5ldmVudC50cmlnZ2VyKFwiYWpheFN0b3BcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ganFYSFI7XG4gIH0sXG5cbiAgZ2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG4gICAgcmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG4gIH0sXG5cbiAgZ2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcbiAgICByZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG4gIH1cbn0pO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuICBqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG4gICAgLy8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcbiAgICBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG4gICAgICB0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcbiAgICAgIGNhbGxiYWNrID0gZGF0YTtcbiAgICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG4gICAgcmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKHtcbiAgICAgIHVybDogdXJsLFxuICAgICAgdHlwZTogbWV0aG9kLFxuICAgICAgZGF0YVR5cGU6IHR5cGUsXG4gICAgICBkYXRhOiBkYXRhLFxuICAgICAgc3VjY2VzczogY2FsbGJhY2tcbiAgICB9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcbiAgfTtcbn0pO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwgKSB7XG4gIHJldHVybiBqUXVlcnkuYWpheCh7XG4gICAgdXJsOiB1cmwsXG4gICAgdHlwZTogXCJHRVRcIixcbiAgICBkYXRhVHlwZTogXCJzY3JpcHRcIixcbiAgICBjYWNoZTogdHJ1ZSxcbiAgICBhc3luYzogZmFsc2UsXG4gICAgZ2xvYmFsOiBmYWxzZSxcbiAgICBcInRocm93c1wiOiB0cnVlXG4gIH0pO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcbiAgd3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG4gICAgdmFyIHdyYXA7XG5cbiAgICBpZiAoIHRoaXNbIDAgXSApIHtcbiAgICAgIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcbiAgICAgICAgaHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG4gICAgICB3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuICAgICAgaWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcbiAgICAgICAgd3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuICAgICAgfVxuXG4gICAgICB3cmFwLm1hcChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGVsZW0gPSB0aGlzO1xuXG4gICAgICAgIHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcbiAgICAgICAgICBlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbGVtO1xuICAgICAgfSkuYXBwZW5kKCB0aGlzICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgd3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcbiAgICBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuICAgICAgICBqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCh0aGlzLCBpKSApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG4gICAgICAgIGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG4gICAgICBpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcbiAgICAgICAgY29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmLmFwcGVuZCggaHRtbCApO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuICAgIHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTtcblxuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG4gICAgICBqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBpc0Z1bmN0aW9uID8gaHRtbC5jYWxsKHRoaXMsIGkpIDogaHRtbCApO1xuICAgIH0pO1xuICB9LFxuXG4gIHVud3JhcDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50KCkuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIGlmICggIWpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJib2R5XCIgKSApIHtcbiAgICAgICAgalF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuICAgICAgfVxuICAgIH0pLmVuZCgpO1xuICB9XG59KTtcblxuXG5qUXVlcnkuZXhwci5maWx0ZXJzLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICAvLyBVc2UgT1IgaW5zdGVhZCBvZiBBTkQgYXMgdGhlIGVsZW1lbnQgaXMgbm90IHZpc2libGUgaWYgZWl0aGVyIGlzIHRydWVcbiAgLy8gU2VlIHRpY2tldHMgIzEwNDA2IGFuZCAjMTMxMzJcbiAgcmV0dXJuICFlbGVtLm9mZnNldFdpZHRoIHx8ICFlbGVtLm9mZnNldEhlaWdodDtcbn07XG5qUXVlcnkuZXhwci5maWx0ZXJzLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgcmV0dXJuICFqUXVlcnkuZXhwci5maWx0ZXJzLmhpZGRlbiggZWxlbSApO1xufTtcblxuXG5cblxudmFyIHIyMCA9IC8lMjAvZyxcbiAgcmJyYWNrZXQgPSAvXFxbXFxdJC8sXG4gIHJDUkxGID0gL1xccj9cXG4vZyxcbiAgcnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuICByc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcbiAgdmFyIG5hbWU7XG5cbiAgaWYgKCBqUXVlcnkuaXNBcnJheSggb2JqICkgKSB7XG4gICAgLy8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG4gICAgalF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG4gICAgICBpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuICAgICAgICAvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG4gICAgICAgIGFkZCggcHJlZml4LCB2ICk7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuICAgICAgICBidWlsZFBhcmFtcyhcbiAgICAgICAgICBwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgPyBpIDogXCJcIiApICsgXCJdXCIsXG4gICAgICAgICAgdixcbiAgICAgICAgICB0cmFkaXRpb25hbCxcbiAgICAgICAgICBhZGRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICB9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgalF1ZXJ5LnR5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuICAgIC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cbiAgICBmb3IgKCBuYW1lIGluIG9iaiApIHtcbiAgICAgIGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcbiAgICB9XG5cbiAgfSBlbHNlIHtcbiAgICAvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG4gICAgYWRkKCBwcmVmaXgsIG9iaiApO1xuICB9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcbiAgdmFyIHByZWZpeCxcbiAgICBzID0gW10sXG4gICAgYWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG4gICAgICAvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHJldHVybiBpdHMgdmFsdWVcbiAgICAgIHZhbHVlID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgPyB2YWx1ZSgpIDogKCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG4gICAgICBzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSApO1xuICAgIH07XG5cbiAgLy8gU2V0IHRyYWRpdGlvbmFsIHRvIHRydWUgZm9yIGpRdWVyeSA8PSAxLjMuMiBiZWhhdmlvci5cbiAgaWYgKCB0cmFkaXRpb25hbCA9PT0gdW5kZWZpbmVkICkge1xuICAgIHRyYWRpdGlvbmFsID0galF1ZXJ5LmFqYXhTZXR0aW5ncyAmJiBqUXVlcnkuYWpheFNldHRpbmdzLnRyYWRpdGlvbmFsO1xuICB9XG5cbiAgLy8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cbiAgaWYgKCBqUXVlcnkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcbiAgICAvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcbiAgICBqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG4gICAgICBhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuICAgIH0pO1xuXG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcbiAgICAvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cbiAgICBmb3IgKCBwcmVmaXggaW4gYSApIHtcbiAgICAgIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG4gICAgfVxuICB9XG5cbiAgLy8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuICByZXR1cm4gcy5qb2luKCBcIiZcIiApLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuICBzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuICB9LFxuICBzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xuICAgICAgLy8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuICAgICAgdmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuICAgICAgcmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG4gICAgfSlcbiAgICAuZmlsdGVyKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cbiAgICAgIC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuICAgICAgcmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuICAgICAgICByc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG4gICAgICAgICggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcbiAgICB9KVxuICAgIC5tYXAoZnVuY3Rpb24oIGksIGVsZW0gKSB7XG4gICAgICB2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cbiAgICAgIHJldHVybiB2YWwgPT0gbnVsbCA/XG4gICAgICAgIG51bGwgOlxuICAgICAgICBqUXVlcnkuaXNBcnJheSggdmFsICkgP1xuICAgICAgICAgIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcbiAgICAgICAgICAgIHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG4gICAgICAgICAgfSkgOlxuICAgICAgICAgIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcbiAgICB9KS5nZXQoKTtcbiAgfVxufSk7XG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuICB9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhySWQgPSAwLFxuICB4aHJDYWxsYmFja3MgPSB7fSxcbiAgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcbiAgICAvLyBmaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuICAgIDA6IDIwMCxcbiAgICAvLyBTdXBwb3J0OiBJRTlcbiAgICAvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcbiAgICAxMjIzOiAyMDRcbiAgfSxcbiAgeGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuLy8gU3VwcG9ydDogSUU5XG4vLyBPcGVuIHJlcXVlc3RzIG11c3QgYmUgbWFudWFsbHkgYWJvcnRlZCBvbiB1bmxvYWQgKCM1MjgwKVxuLy8gU2VlIGh0dHBzOi8vc3VwcG9ydC5taWNyb3NvZnQuY29tL2tiLzI4NTY3NDYgZm9yIG1vcmUgaW5mb1xuaWYgKCB3aW5kb3cuYXR0YWNoRXZlbnQgKSB7XG4gIHdpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCBmdW5jdGlvbigpIHtcbiAgICBmb3IgKCB2YXIga2V5IGluIHhockNhbGxiYWNrcyApIHtcbiAgICAgIHhockNhbGxiYWNrc1sga2V5IF0oKTtcbiAgICB9XG4gIH0pO1xufVxuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG4gIHZhciBjYWxsYmFjaztcblxuICAvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG4gIGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICB4aHIgPSBvcHRpb25zLnhocigpLFxuICAgICAgICAgIGlkID0gKyt4aHJJZDtcblxuICAgICAgICB4aHIub3BlbihcbiAgICAgICAgICBvcHRpb25zLnR5cGUsXG4gICAgICAgICAgb3B0aW9ucy51cmwsXG4gICAgICAgICAgb3B0aW9ucy5hc3luYyxcbiAgICAgICAgICBvcHRpb25zLnVzZXJuYW1lLFxuICAgICAgICAgIG9wdGlvbnMucGFzc3dvcmRcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG4gICAgICAgIGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG4gICAgICAgICAgZm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcbiAgICAgICAgICAgIHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG4gICAgICAgIGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcbiAgICAgICAgICB4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcbiAgICAgICAgLy8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuICAgICAgICAvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuICAgICAgICAvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcbiAgICAgICAgLy8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG4gICAgICAgIGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbXCJYLVJlcXVlc3RlZC1XaXRoXCJdICkge1xuICAgICAgICAgIGhlYWRlcnNbXCJYLVJlcXVlc3RlZC1XaXRoXCJdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IGhlYWRlcnNcbiAgICAgICAgZm9yICggaSBpbiBoZWFkZXJzICkge1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENhbGxiYWNrXG4gICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCBjYWxsYmFjayApIHtcbiAgICAgICAgICAgICAgZGVsZXRlIHhockNhbGxiYWNrc1sgaWQgXTtcbiAgICAgICAgICAgICAgY2FsbGJhY2sgPSB4aHIub25sb2FkID0geGhyLm9uZXJyb3IgPSBudWxsO1xuXG4gICAgICAgICAgICAgIGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuICAgICAgICAgICAgICAgIHhoci5hYm9ydCgpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG4gICAgICAgICAgICAgICAgY29tcGxldGUoXG4gICAgICAgICAgICAgICAgICAvLyBmaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuICAgICAgICAgICAgICAgICAgeGhyLnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgIHhoci5zdGF0dXNUZXh0XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZShcbiAgICAgICAgICAgICAgICAgIHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgeGhyLnN0YXR1c1RleHQsXG4gICAgICAgICAgICAgICAgICAvLyBTdXBwb3J0OiBJRTlcbiAgICAgICAgICAgICAgICAgIC8vIEFjY2Vzc2luZyBiaW5hcnktZGF0YSByZXNwb25zZVRleHQgdGhyb3dzIGFuIGV4Y2VwdGlvblxuICAgICAgICAgICAgICAgICAgLy8gKCMxMTQyNilcbiAgICAgICAgICAgICAgICAgIHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ID09PSBcInN0cmluZ1wiID8ge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0XG4gICAgICAgICAgICAgICAgICB9IDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gTGlzdGVuIHRvIGV2ZW50c1xuICAgICAgICB4aHIub25sb2FkID0gY2FsbGJhY2soKTtcbiAgICAgICAgeGhyLm9uZXJyb3IgPSBjYWxsYmFjayhcImVycm9yXCIpO1xuXG4gICAgICAgIC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcbiAgICAgICAgY2FsbGJhY2sgPSB4aHJDYWxsYmFja3NbIGlkIF0gPSBjYWxsYmFjayhcImFib3J0XCIpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuICAgICAgICAgIHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcbiAgICAgICAgfSBjYXRjaCAoIGUgKSB7XG4gICAgICAgICAgLy8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcbiAgICAgICAgICBpZiAoIGNhbGxiYWNrICkge1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIGFib3J0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCBjYWxsYmFjayApIHtcbiAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSk7XG5cblxuXG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKHtcbiAgYWNjZXB0czoge1xuICAgIHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcbiAgICAgIFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcbiAgfSxcbiAgY29udGVudHM6IHtcbiAgICBzY3JpcHQ6IC8oPzpqYXZhfGVjbWEpc2NyaXB0L1xuICB9LFxuICBjb252ZXJ0ZXJzOiB7XG4gICAgXCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcbiAgICAgIGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gIH1cbn0pO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG4gIGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuICAgIHMuY2FjaGUgPSBmYWxzZTtcbiAgfVxuICBpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG4gICAgcy50eXBlID0gXCJHRVRcIjtcbiAgfVxufSk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuICAvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIHJlcXVlc3RzXG4gIGlmICggcy5jcm9zc0RvbWFpbiApIHtcbiAgICB2YXIgc2NyaXB0LCBjYWxsYmFjaztcbiAgICByZXR1cm4ge1xuICAgICAgc2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuICAgICAgICBzY3JpcHQgPSBqUXVlcnkoXCI8c2NyaXB0PlwiKS5wcm9wKHtcbiAgICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgICBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsXG4gICAgICAgICAgc3JjOiBzLnVybFxuICAgICAgICB9KS5vbihcbiAgICAgICAgICBcImxvYWQgZXJyb3JcIixcbiAgICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG4gICAgICAgICAgICBzY3JpcHQucmVtb3ZlKCk7XG4gICAgICAgICAgICBjYWxsYmFjayA9IG51bGw7XG4gICAgICAgICAgICBpZiAoIGV2dCApIHtcbiAgICAgICAgICAgICAgY29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuICAgICAgfSxcbiAgICAgIGFib3J0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCBjYWxsYmFjayApIHtcbiAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcbiAgcmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCh7XG4gIGpzb25wOiBcImNhbGxiYWNrXCIsXG4gIGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuICAgIHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuICAgIHJldHVybiBjYWxsYmFjaztcbiAgfVxufSk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cbiAgdmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuICAgIGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG4gICAgICBcInVybFwiIDpcbiAgICAgIHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgKCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuICAgICAgICAgIC5pbmRleE9mKFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIpID09PSAwICYmXG4gICAgICAgIHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuICAgICk7XG5cbiAgLy8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuICBpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuICAgIC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcbiAgICBjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuICAgICAgcy5qc29ucENhbGxiYWNrKCkgOlxuICAgICAgcy5qc29ucENhbGxiYWNrO1xuXG4gICAgLy8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuICAgIGlmICgganNvblByb3AgKSB7XG4gICAgICBzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuICAgIH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuICAgICAgcy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcbiAgICB9XG5cbiAgICAvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG4gICAgcy5jb252ZXJ0ZXJzW1wic2NyaXB0IGpzb25cIl0gPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuICAgICAgICBqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuICAgIH07XG5cbiAgICAvLyBmb3JjZSBqc29uIGRhdGFUeXBlXG4gICAgcy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG4gICAgLy8gSW5zdGFsbCBjYWxsYmFja1xuICAgIG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcbiAgICB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcbiAgICB9O1xuXG4gICAgLy8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG4gICAganFYSFIuYWx3YXlzKGZ1bmN0aW9uKCkge1xuICAgICAgLy8gUmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuICAgICAgd2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXG4gICAgICAvLyBTYXZlIGJhY2sgYXMgZnJlZVxuICAgICAgaWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcbiAgICAgICAgLy8gbWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG4gICAgICAgIHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuICAgICAgICAvLyBzYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG4gICAgICAgIG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG4gICAgICBpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuICAgICAgICBvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuICAgICAgfVxuXG4gICAgICByZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuICAgIH0pO1xuXG4gICAgLy8gRGVsZWdhdGUgdG8gc2NyaXB0XG4gICAgcmV0dXJuIFwic2NyaXB0XCI7XG4gIH1cbn0pO1xuXG5cblxuXG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9IChmdW5jdGlvbigpIHtcbiAgdmFyIGRvYyA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuICAvLyBTdXBwb3J0OiBOb2RlIHdpdGgganNkb208PTEuNS4wK1xuICAvLyBqc2RvbSdzIGRvY3VtZW50IGNyZWF0ZWQgdmlhIHRoZSBhYm92ZSBtZXRob2QgZG9lc24ndCBjb250YWluIHRoZSBib2R5XG4gIGlmICggIWRvYy5ib2R5ICkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBkb2MuYm9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG4gIHJldHVybiBkb2MuYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0pKCk7XG5cblxuLy8gZGF0YTogc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuICBpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcbiAgICBrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG4gICAgY29udGV4dCA9IGZhbHNlO1xuICB9XG4gIC8vIGRvY3VtZW50LmltcGxlbWVudGF0aW9uIHN0b3BzIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb21cbiAgLy8gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcbiAgY29udGV4dCA9IGNvbnRleHQgfHwgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA/XG4gICAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkgOlxuICAgIGRvY3VtZW50ICk7XG5cbiAgdmFyIHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApLFxuICAgIHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cbiAgLy8gU2luZ2xlIHRhZ1xuICBpZiAoIHBhcnNlZCApIHtcbiAgICByZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsxXSApIF07XG4gIH1cblxuICBwYXJzZWQgPSBqUXVlcnkuYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuICBpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG4gICAgalF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG4gIH1cblxuICByZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLy8gS2VlcCBhIGNvcHkgb2YgdGhlIG9sZCBsb2FkIG1ldGhvZFxudmFyIF9sb2FkID0galF1ZXJ5LmZuLmxvYWQ7XG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG4gIGlmICggdHlwZW9mIHVybCAhPT0gXCJzdHJpbmdcIiAmJiBfbG9hZCApIHtcbiAgICByZXR1cm4gX2xvYWQuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuICB9XG5cbiAgdmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcbiAgICBzZWxmID0gdGhpcyxcbiAgICBvZmYgPSB1cmwuaW5kZXhPZihcIiBcIik7XG5cbiAgaWYgKCBvZmYgPiAtMSApIHtcbiAgICBzZWxlY3RvciA9IGpRdWVyeS50cmltKCB1cmwuc2xpY2UoIG9mZiApICk7XG4gICAgdXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcbiAgfVxuXG4gIC8vIElmIGl0J3MgYSBmdW5jdGlvblxuICBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuICAgIC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG4gICAgY2FsbGJhY2sgPSBwYXJhbXM7XG4gICAgcGFyYW1zID0gdW5kZWZpbmVkO1xuXG4gIC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcbiAgfSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG4gICAgdHlwZSA9IFwiUE9TVFwiO1xuICB9XG5cbiAgLy8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3RcbiAgaWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG4gICAgalF1ZXJ5LmFqYXgoe1xuICAgICAgdXJsOiB1cmwsXG5cbiAgICAgIC8vIGlmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWRcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBkYXRhVHlwZTogXCJodG1sXCIsXG4gICAgICBkYXRhOiBwYXJhbXNcbiAgICB9KS5kb25lKGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cbiAgICAgIC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuICAgICAgcmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cbiAgICAgIHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG4gICAgICAgIC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuICAgICAgICAvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcbiAgICAgICAgalF1ZXJ5KFwiPGRpdj5cIikuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG4gICAgICAgIC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG4gICAgICAgIHJlc3BvbnNlVGV4dCApO1xuXG4gICAgfSkuY29tcGxldGUoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuICAgICAgc2VsZi5lYWNoKCBjYWxsYmFjaywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goW1xuICBcImFqYXhTdGFydFwiLFxuICBcImFqYXhTdG9wXCIsXG4gIFwiYWpheENvbXBsZXRlXCIsXG4gIFwiYWpheEVycm9yXCIsXG4gIFwiYWpheFN1Y2Nlc3NcIixcbiAgXCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcbiAgalF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG4gICAgcmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG4gIH07XG59KTtcblxuXG5cblxualF1ZXJ5LmV4cHIuZmlsdGVycy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICByZXR1cm4galF1ZXJ5LmdyZXAoalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuICAgIHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuICB9KS5sZW5ndGg7XG59O1xuXG5cblxuXG4vKipcbiAqIEdldHMgYSB3aW5kb3cgZnJvbSBhbiBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIGdldFdpbmRvdyggZWxlbSApIHtcbiAgcmV0dXJuIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApID8gZWxlbSA6IGVsZW0ubm9kZVR5cGUgPT09IDkgJiYgZWxlbS5kZWZhdWx0Vmlldztcbn1cblxualF1ZXJ5Lm9mZnNldCA9IHtcbiAgc2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcbiAgICB2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuICAgICAgcG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcbiAgICAgIGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcbiAgICAgIHByb3BzID0ge307XG5cbiAgICAvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG4gICAgaWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcbiAgICAgIGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG4gICAgfVxuXG4gICAgY3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcbiAgICBjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG4gICAgY3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG4gICAgY2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG4gICAgICAoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKFwiYXV0b1wiKSA+IC0xO1xuXG4gICAgLy8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcbiAgICAvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcbiAgICBpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuICAgICAgY3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG4gICAgICBjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG4gICAgICBjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuICAgIH0gZWxzZSB7XG4gICAgICBjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuICAgICAgY3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuICAgIH1cblxuICAgIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuICAgICAgLy8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG4gICAgICBvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcbiAgICB9XG5cbiAgICBpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG4gICAgICBwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuICAgIH1cbiAgICBpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuICAgICAgcHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG4gICAgfVxuXG4gICAgaWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcbiAgICAgIG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICBjdXJFbGVtLmNzcyggcHJvcHMgKTtcbiAgICB9XG4gIH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuICBvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuICAgIGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcbiAgICAgIHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuICAgICAgICB0aGlzIDpcbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuICAgICAgICAgIGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBkb2NFbGVtLCB3aW4sXG4gICAgICBlbGVtID0gdGhpc1sgMCBdLFxuICAgICAgYm94ID0geyB0b3A6IDAsIGxlZnQ6IDAgfSxcbiAgICAgIGRvYyA9IGVsZW0gJiYgZWxlbS5vd25lckRvY3VtZW50O1xuXG4gICAgaWYgKCAhZG9jICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXG4gICAgLy8gTWFrZSBzdXJlIGl0J3Mgbm90IGEgZGlzY29ubmVjdGVkIERPTSBub2RlXG4gICAgaWYgKCAhalF1ZXJ5LmNvbnRhaW5zKCBkb2NFbGVtLCBlbGVtICkgKSB7XG4gICAgICByZXR1cm4gYm94O1xuICAgIH1cblxuICAgIGJveCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgd2luID0gZ2V0V2luZG93KCBkb2MgKTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBib3gudG9wICsgd2luLnBhZ2VZT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRUb3AsXG4gICAgICBsZWZ0OiBib3gubGVmdCArIHdpbi5wYWdlWE9mZnNldCAtIGRvY0VsZW0uY2xpZW50TGVmdFxuICAgIH07XG4gIH0sXG5cbiAgcG9zaXRpb246IGZ1bmN0aW9uKCkge1xuICAgIGlmICggIXRoaXNbIDAgXSApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsXG4gICAgICBlbGVtID0gdGhpc1sgMCBdLFxuICAgICAgcGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuICAgIC8vIEZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB3aW5kb3cgKHBhcmVudE9mZnNldCA9IHt0b3A6MCwgbGVmdDogMH0sXG4gICAgLy8gYmVjYXVzZSBpdCBpcyBpdHMgb25seSBvZmZzZXQgcGFyZW50XG4gICAgaWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuICAgICAgLy8gQXNzdW1lIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyB0aGVyZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkXG4gICAgICBvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XG4gICAgICBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCgpO1xuXG4gICAgICAvLyBHZXQgY29ycmVjdCBvZmZzZXRzXG4gICAgICBvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuICAgICAgaWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJodG1sXCIgKSApIHtcbiAgICAgICAgcGFyZW50T2Zmc2V0ID0gb2Zmc2V0UGFyZW50Lm9mZnNldCgpO1xuICAgICAgfVxuXG4gICAgICAvLyBBZGQgb2Zmc2V0UGFyZW50IGJvcmRlcnNcbiAgICAgIHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuICAgICAgcGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcbiAgICB9XG5cbiAgICAvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG4gICAgICBsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuICAgIH07XG4gIH0sXG5cbiAgLy8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG4gIC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cbiAgLy8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG4gIC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcbiAgLy8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuICAvL1xuICAvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcbiAgLy8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG4gIC8vXG4gIC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG4gIG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG4gICAgICB3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuICAgICAgICBvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcbiAgICB9KTtcbiAgfVxufSk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuICB2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG4gIGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuICAgIHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcbiAgICAgIHZhciB3aW4gPSBnZXRXaW5kb3coIGVsZW0gKTtcblxuICAgICAgaWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgcmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG4gICAgICB9XG5cbiAgICAgIGlmICggd2luICkge1xuICAgICAgICB3aW4uc2Nyb2xsVG8oXG4gICAgICAgICAgIXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcbiAgICAgICAgICB0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcbiAgICAgICAgKTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG4gICAgICB9XG4gICAgfSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGgsIG51bGwgKTtcbiAgfTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmk8NyssIENocm9tZTwzNytcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTIyOTI4MFxuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcbiAgalF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcbiAgICBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG4gICAgICBpZiAoIGNvbXB1dGVkICkge1xuICAgICAgICBjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuICAgICAgICAvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcbiAgICAgICAgcmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cbiAgICAgICAgICBqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuICAgICAgICAgIGNvbXB1dGVkO1xuICAgICAgfVxuICAgIH1cbiAgKTtcbn0pO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuICBqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG4gICAgZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cbiAgICAvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcbiAgICBqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcbiAgICAgIHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG4gICAgICAgIGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuICAgICAgcmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuICAgICAgICB2YXIgZG9jO1xuXG4gICAgICAgIGlmICggalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG4gICAgICAgICAgLy8gQXMgb2YgNS84LzIwMTIgdGhpcyB3aWxsIHlpZWxkIGluY29ycmVjdCByZXN1bHRzIGZvciBNb2JpbGUgU2FmYXJpLCBidXQgdGhlcmVcbiAgICAgICAgICAvLyBpc24ndCBhIHdob2xlIGxvdCB3ZSBjYW4gZG8uIFNlZSBwdWxsIHJlcXVlc3QgYXQgdGhpcyBVUkwgZm9yIGRpc2N1c3Npb246XG4gICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC83NjRcbiAgICAgICAgICByZXR1cm4gZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG4gICAgICAgIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcbiAgICAgICAgICBkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuICAgICAgICAgIC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcbiAgICAgICAgICAvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3RcbiAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoXG4gICAgICAgICAgICBlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcbiAgICAgICAgICAgIGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuICAgICAgICAgICAgZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cbiAgICAgICAgICAvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG4gICAgICAgICAgalF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cbiAgICAgICAgICAvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG4gICAgICAgICAgalF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcbiAgICAgIH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlLCBudWxsICk7XG4gICAgfTtcbiAgfSk7XG59KTtcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuICBkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4galF1ZXJ5O1xuICB9KTtcbn1cblxuXG5cbnZhclxuICAvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcbiAgX2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cbiAgLy8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcbiAgXyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcbiAgaWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuICAgIHdpbmRvdy4kID0gXyQ7XG4gIH1cblxuICBpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuICAgIHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuICB9XG5cbiAgcmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoICFub0dsb2JhbCApIHtcbiAgd2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5yZXR1cm4galF1ZXJ5O1xufSkpO1xuIl19